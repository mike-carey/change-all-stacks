// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/change-all-stacks/cf"
	"github.com/mike-carey/change-all-stacks/services"
)

type FakeWorkerService struct {
	GetWorkerStub        func(*cfclient.Config, string, string, bool) (cf.Worker, error)
	getWorkerMutex       sync.RWMutex
	getWorkerArgsForCall []struct {
		arg1 *cfclient.Config
		arg2 string
		arg3 string
		arg4 bool
	}
	getWorkerReturns struct {
		result1 cf.Worker
		result2 error
	}
	getWorkerReturnsOnCall map[int]struct {
		result1 cf.Worker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkerService) GetWorker(arg1 *cfclient.Config, arg2 string, arg3 string, arg4 bool) (cf.Worker, error) {
	fake.getWorkerMutex.Lock()
	ret, specificReturn := fake.getWorkerReturnsOnCall[len(fake.getWorkerArgsForCall)]
	fake.getWorkerArgsForCall = append(fake.getWorkerArgsForCall, struct {
		arg1 *cfclient.Config
		arg2 string
		arg3 string
		arg4 bool
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetWorker", []interface{}{arg1, arg2, arg3, arg4})
	fake.getWorkerMutex.Unlock()
	if fake.GetWorkerStub != nil {
		return fake.GetWorkerStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getWorkerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWorkerService) GetWorkerCallCount() int {
	fake.getWorkerMutex.RLock()
	defer fake.getWorkerMutex.RUnlock()
	return len(fake.getWorkerArgsForCall)
}

func (fake *FakeWorkerService) GetWorkerCalls(stub func(*cfclient.Config, string, string, bool) (cf.Worker, error)) {
	fake.getWorkerMutex.Lock()
	defer fake.getWorkerMutex.Unlock()
	fake.GetWorkerStub = stub
}

func (fake *FakeWorkerService) GetWorkerArgsForCall(i int) (*cfclient.Config, string, string, bool) {
	fake.getWorkerMutex.RLock()
	defer fake.getWorkerMutex.RUnlock()
	argsForCall := fake.getWorkerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeWorkerService) GetWorkerReturns(result1 cf.Worker, result2 error) {
	fake.getWorkerMutex.Lock()
	defer fake.getWorkerMutex.Unlock()
	fake.GetWorkerStub = nil
	fake.getWorkerReturns = struct {
		result1 cf.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerService) GetWorkerReturnsOnCall(i int, result1 cf.Worker, result2 error) {
	fake.getWorkerMutex.Lock()
	defer fake.getWorkerMutex.Unlock()
	fake.GetWorkerStub = nil
	if fake.getWorkerReturnsOnCall == nil {
		fake.getWorkerReturnsOnCall = make(map[int]struct {
			result1 cf.Worker
			result2 error
		})
	}
	fake.getWorkerReturnsOnCall[i] = struct {
		result1 cf.Worker
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkerService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getWorkerMutex.RLock()
	defer fake.getWorkerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorkerService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.WorkerService = new(FakeWorkerService)
