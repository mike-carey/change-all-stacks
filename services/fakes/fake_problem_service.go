// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/change-all-stacks/data"
	"github.com/mike-carey/change-all-stacks/services"
)

type FakeProblemService struct {
	FindProblemsStub        func(string, []cfclient.App, string, string) (data.ProblemSet, error)
	findProblemsMutex       sync.RWMutex
	findProblemsArgsForCall []struct {
		arg1 string
		arg2 []cfclient.App
		arg3 string
		arg4 string
	}
	findProblemsReturns struct {
		result1 data.ProblemSet
		result2 error
	}
	findProblemsReturnsOnCall map[int]struct {
		result1 data.ProblemSet
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProblemService) FindProblems(arg1 string, arg2 []cfclient.App, arg3 string, arg4 string) (data.ProblemSet, error) {
	var arg2Copy []cfclient.App
	if arg2 != nil {
		arg2Copy = make([]cfclient.App, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.findProblemsMutex.Lock()
	ret, specificReturn := fake.findProblemsReturnsOnCall[len(fake.findProblemsArgsForCall)]
	fake.findProblemsArgsForCall = append(fake.findProblemsArgsForCall, struct {
		arg1 string
		arg2 []cfclient.App
		arg3 string
		arg4 string
	}{arg1, arg2Copy, arg3, arg4})
	fake.recordInvocation("FindProblems", []interface{}{arg1, arg2Copy, arg3, arg4})
	fake.findProblemsMutex.Unlock()
	if fake.FindProblemsStub != nil {
		return fake.FindProblemsStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.findProblemsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProblemService) FindProblemsCallCount() int {
	fake.findProblemsMutex.RLock()
	defer fake.findProblemsMutex.RUnlock()
	return len(fake.findProblemsArgsForCall)
}

func (fake *FakeProblemService) FindProblemsCalls(stub func(string, []cfclient.App, string, string) (data.ProblemSet, error)) {
	fake.findProblemsMutex.Lock()
	defer fake.findProblemsMutex.Unlock()
	fake.FindProblemsStub = stub
}

func (fake *FakeProblemService) FindProblemsArgsForCall(i int) (string, []cfclient.App, string, string) {
	fake.findProblemsMutex.RLock()
	defer fake.findProblemsMutex.RUnlock()
	argsForCall := fake.findProblemsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeProblemService) FindProblemsReturns(result1 data.ProblemSet, result2 error) {
	fake.findProblemsMutex.Lock()
	defer fake.findProblemsMutex.Unlock()
	fake.FindProblemsStub = nil
	fake.findProblemsReturns = struct {
		result1 data.ProblemSet
		result2 error
	}{result1, result2}
}

func (fake *FakeProblemService) FindProblemsReturnsOnCall(i int, result1 data.ProblemSet, result2 error) {
	fake.findProblemsMutex.Lock()
	defer fake.findProblemsMutex.Unlock()
	fake.FindProblemsStub = nil
	if fake.findProblemsReturnsOnCall == nil {
		fake.findProblemsReturnsOnCall = make(map[int]struct {
			result1 data.ProblemSet
			result2 error
		})
	}
	fake.findProblemsReturnsOnCall[i] = struct {
		result1 data.ProblemSet
		result2 error
	}{result1, result2}
}

func (fake *FakeProblemService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findProblemsMutex.RLock()
	defer fake.findProblemsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProblemService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.ProblemService = new(FakeProblemService)
