// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/mike-carey/change-all-stacks/services"
)

type FakeManagerService struct {
	CreateManagerStub        func(*services.ManagerOptions) (services.Manager, error)
	createManagerMutex       sync.RWMutex
	createManagerArgsForCall []struct {
		arg1 *services.ManagerOptions
	}
	createManagerReturns struct {
		result1 services.Manager
		result2 error
	}
	createManagerReturnsOnCall map[int]struct {
		result1 services.Manager
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManagerService) CreateManager(arg1 *services.ManagerOptions) (services.Manager, error) {
	fake.createManagerMutex.Lock()
	ret, specificReturn := fake.createManagerReturnsOnCall[len(fake.createManagerArgsForCall)]
	fake.createManagerArgsForCall = append(fake.createManagerArgsForCall, struct {
		arg1 *services.ManagerOptions
	}{arg1})
	fake.recordInvocation("CreateManager", []interface{}{arg1})
	fake.createManagerMutex.Unlock()
	if fake.CreateManagerStub != nil {
		return fake.CreateManagerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createManagerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManagerService) CreateManagerCallCount() int {
	fake.createManagerMutex.RLock()
	defer fake.createManagerMutex.RUnlock()
	return len(fake.createManagerArgsForCall)
}

func (fake *FakeManagerService) CreateManagerCalls(stub func(*services.ManagerOptions) (services.Manager, error)) {
	fake.createManagerMutex.Lock()
	defer fake.createManagerMutex.Unlock()
	fake.CreateManagerStub = stub
}

func (fake *FakeManagerService) CreateManagerArgsForCall(i int) *services.ManagerOptions {
	fake.createManagerMutex.RLock()
	defer fake.createManagerMutex.RUnlock()
	argsForCall := fake.createManagerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManagerService) CreateManagerReturns(result1 services.Manager, result2 error) {
	fake.createManagerMutex.Lock()
	defer fake.createManagerMutex.Unlock()
	fake.CreateManagerStub = nil
	fake.createManagerReturns = struct {
		result1 services.Manager
		result2 error
	}{result1, result2}
}

func (fake *FakeManagerService) CreateManagerReturnsOnCall(i int, result1 services.Manager, result2 error) {
	fake.createManagerMutex.Lock()
	defer fake.createManagerMutex.Unlock()
	fake.CreateManagerStub = nil
	if fake.createManagerReturnsOnCall == nil {
		fake.createManagerReturnsOnCall = make(map[int]struct {
			result1 services.Manager
			result2 error
		})
	}
	fake.createManagerReturnsOnCall[i] = struct {
		result1 services.Manager
		result2 error
	}{result1, result2}
}

func (fake *FakeManagerService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createManagerMutex.RLock()
	defer fake.createManagerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManagerService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.ManagerService = new(FakeManagerService)
