// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import (
	"fmt"
	"reflect"
	"strings"
	"sync"

	"github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/cfquery/cf"
	"github.com/mike-carey/cfquery/logger"
	"github.com/mike-carey/cfquery/util"
)

type SpaceService struct {
	Client      cf.CFClient
	storage     SpaceMap
	filled      bool
	mutex       *sync.Mutex
	serviceName string
	key         string
}

func NewSpaceService(client cf.CFClient) *SpaceService {
	return &SpaceService{
		Client:  client,
		storage: make(map[string]cfclient.Space, 0),
		filled:  false,
		mutex:   &sync.Mutex{},
	}
}

func (s *SpaceService) ServiceName() string {
	if s.serviceName == "" {
		name := fmt.Sprintf("%T", s)

		_name := strings.Split(name, ".")
		name = _name[len(_name)-1]

		s.serviceName = fmt.Sprintf("%s", name)
	}

	return s.serviceName
}

func (s *SpaceService) Key() string {
	if s.key == "" {
		key := s.ServiceName()
		s.key = key[:len(key)-len("Service")]
		logger.Info(s.key)
	}

	return s.key
}

func (s *SpaceService) lock() {
	s.mutex.Lock()
	logger.Infof("Locked %v", reflect.TypeOf(s))
}

func (s *SpaceService) unlock() {
	s.mutex.Unlock()
	logger.Infof("Unlocked %v", reflect.TypeOf(s))
}

func (s *SpaceService) GetSpaceMap() (SpaceMap, error) {
	_, err := s.GetAllSpaces()
	if err != nil {
		return nil, err
	}

	return s.storage, nil
}

func (i *inquisitor) GetSpaceMap() (SpaceMap, error) {
	return i.getSpaceService().GetSpaceMap()
}

func (s *SpaceService) GetSpaceByGuid(guid string) (*cfclient.Space, error) {
	s.lock()

	defer s.unlock()

	if s.filled {
		if val, ok := s.storage[guid]; ok {
			return &val, nil
		}
	}

	logger.Infof("Did not find %s in storage", guid)
	item, err := s.Client.GetSpaceByGuid(guid)
	if err != nil {
		return nil, err
	}

	// Save off in storage
	s.storage[guid] = item

	return &item, nil
}

func (i *inquisitor) GetSpaceByGuid(guid string) (*cfclient.Space, error) {
	return i.getSpaceService().GetSpaceByGuid(guid)
}

func (s *SpaceService) GetManySpacesByGuid(guids ...string) (SpaceMap, error) {
	pool := make(SpaceMap, len(guids))

	type Result struct {
		Guid   string
		Object *cfclient.Space
		Error  error
	}

	resCh := make(chan Result, len(guids))

	for _, guid := range guids {
		go func(guid string) {
			obj, err := s.GetSpaceByGuid(guid)
			res := Result{
				Guid:   guid,
				Error:  err,
				Object: obj,
			}

			resCh <- res
		}(guid)
	}

	errs := make([]error, 0)

	for _, _ = range guids {
		select {
		case res := <-resCh:
			if res.Error != nil {
				errs = append(errs, res.Error)
			}

			pool[res.Guid] = *res.Object
		}
	}

	if len(errs) > 0 {
		return nil, util.StackErrors(errs)
	}

	return pool, nil
}

func (i *inquisitor) GetManySpacesByGuid(guids ...string) (SpaceMap, error) {
	return i.getSpaceService().GetManySpacesByGuid(guids...)
}

func (s *SpaceService) GetAllSpaces() (Spaces, error) {
	s.lock()

	if s.filled {
		logger.Infof("Reusing storage")
		siSlice := make(Spaces, 0, len(s.storage))
		for _, si := range s.storage {
			siSlice = append(siSlice, si)
		}

		s.unlock()

		return siSlice, nil
	}

	logger.Infof("Calling out to CFClient")
	sis, err := s.Client.ListSpaces()
	if err != nil {
		return nil, err
	}

	go func(s *SpaceService, sis Spaces) {
		logger.Infof("Storing contents to storage")
		for _, si := range sis {
			s.storage[si.Guid] = si
		}

		logger.Infof("Done storing contents to storage")
		s.filled = true

		s.unlock()
	}(s, sis)

	logger.Infof("Returning list while populating happens")
	return sis, nil
}

func (i *inquisitor) GetAllSpaces() (Spaces, error) {
	return i.getSpaceService().GetAllSpaces()
}

func (i *inquisitor) newSpaceService() *SpaceService {
	return NewSpaceService(i.CFClient)
}

func (i *inquisitor) getSpaceService() *SpaceService {
	class := &SpaceService{}
	key := class.Key()

	if service, ok := i.services[key]; ok {
		return service.(*SpaceService)
	}

	service := i.newSpaceService()

	i.lock()
	i.services[key] = service
	i.unlock()

	return service
}
