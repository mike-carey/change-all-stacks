// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import (
	"github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/cfquery/logger"
	"github.com/pkg/errors"
)

func SpaceGroupBy(items Spaces, getKey func(cfclient.Space) (string, error)) (SpaceGroup, error) {
	pool := make(SpaceGroup, 0)

	for _, item := range items {
		key, err := getKey(item)
		if err != nil {
			logger.Errorf("Could not get key from item: %v", item)
			return nil, errors.Wrap(err, "Could not get key for item")
		}

		if _, ok := pool[key]; !ok {
			pool[key] = make(Spaces, 0)
		}

		logger.Infof("Adding item to %s entry", key)
		pool[key] = append(pool[key], item)
	}

	logger.Infof("Returning %d groups in slice", len(pool))
	return pool, nil
}

func SpaceGroupMapBy(items SpaceMap, getKey func(string, cfclient.Space) (string, error)) (MappedSpaceMap, error) {
	pool := make(MappedSpaceMap, 0)

	for origKey, item := range items {
		key, err := getKey(origKey, item)
		if err != nil {
			logger.Errorf("Could not get key from item: %v", item)
			return nil, errors.Wrap(err, "Could not get key for item")
		}

		if _, ok := pool[key]; !ok {
			pool[key] = make(SpaceMap, 0)
		}

		logger.Infof("Adding %s item to %s entry", origKey, key)
		pool[key][origKey] = item
	}

	logger.Infof("Returning %d groups in map", len(pool))
	return pool, nil
}

func SpaceGroupMappedSliceBy(items SpaceGroup, getKey func(string, Spaces) (string, error)) (MappedSpaceGroup, error) {
	pool := make(MappedSpaceGroup, 0)

	for origKey, item := range items {
		key, err := getKey(origKey, item)
		if err != nil {
			logger.Errorf("Could not get key from item: %v", item)
			return nil, errors.Wrap(err, "Could not get key for item")
		}

		if _, ok := pool[key]; !ok {
			pool[key] = make(SpaceGroup, 0)
		}

		logger.Infof("Adding %s item to %s entry", origKey, key)
		pool[key][origKey] = item
	}

	logger.Infof("Returning %d groups in map", len(pool))
	return pool, nil
}
