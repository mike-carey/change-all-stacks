// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/change-all-stacks/change"
)

type FakeSpaceManager struct {
	ChangeStacksInSpaceStub        func(cfclient.Config, cfclient.Org, cfclient.Space, []cfclient.App, string, bool, string) error
	changeStacksInSpaceMutex       sync.RWMutex
	changeStacksInSpaceArgsForCall []struct {
		arg1 cfclient.Config
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 []cfclient.App
		arg5 string
		arg6 bool
		arg7 string
	}
	changeStacksInSpaceReturns struct {
		result1 error
	}
	changeStacksInSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSpaceManager) ChangeStacksInSpace(arg1 cfclient.Config, arg2 cfclient.Org, arg3 cfclient.Space, arg4 []cfclient.App, arg5 string, arg6 bool, arg7 string) error {
	var arg4Copy []cfclient.App
	if arg4 != nil {
		arg4Copy = make([]cfclient.App, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.changeStacksInSpaceMutex.Lock()
	ret, specificReturn := fake.changeStacksInSpaceReturnsOnCall[len(fake.changeStacksInSpaceArgsForCall)]
	fake.changeStacksInSpaceArgsForCall = append(fake.changeStacksInSpaceArgsForCall, struct {
		arg1 cfclient.Config
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 []cfclient.App
		arg5 string
		arg6 bool
		arg7 string
	}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	fake.recordInvocation("ChangeStacksInSpace", []interface{}{arg1, arg2, arg3, arg4Copy, arg5, arg6, arg7})
	fake.changeStacksInSpaceMutex.Unlock()
	if fake.ChangeStacksInSpaceStub != nil {
		return fake.ChangeStacksInSpaceStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.changeStacksInSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeSpaceManager) ChangeStacksInSpaceCallCount() int {
	fake.changeStacksInSpaceMutex.RLock()
	defer fake.changeStacksInSpaceMutex.RUnlock()
	return len(fake.changeStacksInSpaceArgsForCall)
}

func (fake *FakeSpaceManager) ChangeStacksInSpaceCalls(stub func(cfclient.Config, cfclient.Org, cfclient.Space, []cfclient.App, string, bool, string) error) {
	fake.changeStacksInSpaceMutex.Lock()
	defer fake.changeStacksInSpaceMutex.Unlock()
	fake.ChangeStacksInSpaceStub = stub
}

func (fake *FakeSpaceManager) ChangeStacksInSpaceArgsForCall(i int) (cfclient.Config, cfclient.Org, cfclient.Space, []cfclient.App, string, bool, string) {
	fake.changeStacksInSpaceMutex.RLock()
	defer fake.changeStacksInSpaceMutex.RUnlock()
	argsForCall := fake.changeStacksInSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7
}

func (fake *FakeSpaceManager) ChangeStacksInSpaceReturns(result1 error) {
	fake.changeStacksInSpaceMutex.Lock()
	defer fake.changeStacksInSpaceMutex.Unlock()
	fake.ChangeStacksInSpaceStub = nil
	fake.changeStacksInSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceManager) ChangeStacksInSpaceReturnsOnCall(i int, result1 error) {
	fake.changeStacksInSpaceMutex.Lock()
	defer fake.changeStacksInSpaceMutex.Unlock()
	fake.ChangeStacksInSpaceStub = nil
	if fake.changeStacksInSpaceReturnsOnCall == nil {
		fake.changeStacksInSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.changeStacksInSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSpaceManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.changeStacksInSpaceMutex.RLock()
	defer fake.changeStacksInSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSpaceManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ change.SpaceManager = new(FakeSpaceManager)
