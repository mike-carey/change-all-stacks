// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/change-all-stacks/change"
	"github.com/mike-carey/change-all-stacks/data"
)

type FakeFoundationManager struct {
	ChangeStacksInFoundationStub        func(string, *cfclient.Config, *change.Options) error
	changeStacksInFoundationMutex       sync.RWMutex
	changeStacksInFoundationArgsForCall []struct {
		arg1 string
		arg2 *cfclient.Config
		arg3 *change.Options
	}
	changeStacksInFoundationReturns struct {
		result1 error
	}
	changeStacksInFoundationReturnsOnCall map[int]struct {
		result1 error
	}
	ReadAllStacksInFoundationStub        func(string, *cfclient.Config, *change.Options) (data.Data, error)
	readAllStacksInFoundationMutex       sync.RWMutex
	readAllStacksInFoundationArgsForCall []struct {
		arg1 string
		arg2 *cfclient.Config
		arg3 *change.Options
	}
	readAllStacksInFoundationReturns struct {
		result1 data.Data
		result2 error
	}
	readAllStacksInFoundationReturnsOnCall map[int]struct {
		result1 data.Data
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFoundationManager) ChangeStacksInFoundation(arg1 string, arg2 *cfclient.Config, arg3 *change.Options) error {
	fake.changeStacksInFoundationMutex.Lock()
	ret, specificReturn := fake.changeStacksInFoundationReturnsOnCall[len(fake.changeStacksInFoundationArgsForCall)]
	fake.changeStacksInFoundationArgsForCall = append(fake.changeStacksInFoundationArgsForCall, struct {
		arg1 string
		arg2 *cfclient.Config
		arg3 *change.Options
	}{arg1, arg2, arg3})
	fake.recordInvocation("ChangeStacksInFoundation", []interface{}{arg1, arg2, arg3})
	fake.changeStacksInFoundationMutex.Unlock()
	if fake.ChangeStacksInFoundationStub != nil {
		return fake.ChangeStacksInFoundationStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.changeStacksInFoundationReturns
	return fakeReturns.result1
}

func (fake *FakeFoundationManager) ChangeStacksInFoundationCallCount() int {
	fake.changeStacksInFoundationMutex.RLock()
	defer fake.changeStacksInFoundationMutex.RUnlock()
	return len(fake.changeStacksInFoundationArgsForCall)
}

func (fake *FakeFoundationManager) ChangeStacksInFoundationCalls(stub func(string, *cfclient.Config, *change.Options) error) {
	fake.changeStacksInFoundationMutex.Lock()
	defer fake.changeStacksInFoundationMutex.Unlock()
	fake.ChangeStacksInFoundationStub = stub
}

func (fake *FakeFoundationManager) ChangeStacksInFoundationArgsForCall(i int) (string, *cfclient.Config, *change.Options) {
	fake.changeStacksInFoundationMutex.RLock()
	defer fake.changeStacksInFoundationMutex.RUnlock()
	argsForCall := fake.changeStacksInFoundationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFoundationManager) ChangeStacksInFoundationReturns(result1 error) {
	fake.changeStacksInFoundationMutex.Lock()
	defer fake.changeStacksInFoundationMutex.Unlock()
	fake.ChangeStacksInFoundationStub = nil
	fake.changeStacksInFoundationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFoundationManager) ChangeStacksInFoundationReturnsOnCall(i int, result1 error) {
	fake.changeStacksInFoundationMutex.Lock()
	defer fake.changeStacksInFoundationMutex.Unlock()
	fake.ChangeStacksInFoundationStub = nil
	if fake.changeStacksInFoundationReturnsOnCall == nil {
		fake.changeStacksInFoundationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.changeStacksInFoundationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFoundationManager) ReadAllStacksInFoundation(arg1 string, arg2 *cfclient.Config, arg3 *change.Options) (data.Data, error) {
	fake.readAllStacksInFoundationMutex.Lock()
	ret, specificReturn := fake.readAllStacksInFoundationReturnsOnCall[len(fake.readAllStacksInFoundationArgsForCall)]
	fake.readAllStacksInFoundationArgsForCall = append(fake.readAllStacksInFoundationArgsForCall, struct {
		arg1 string
		arg2 *cfclient.Config
		arg3 *change.Options
	}{arg1, arg2, arg3})
	fake.recordInvocation("ReadAllStacksInFoundation", []interface{}{arg1, arg2, arg3})
	fake.readAllStacksInFoundationMutex.Unlock()
	if fake.ReadAllStacksInFoundationStub != nil {
		return fake.ReadAllStacksInFoundationStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readAllStacksInFoundationReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFoundationManager) ReadAllStacksInFoundationCallCount() int {
	fake.readAllStacksInFoundationMutex.RLock()
	defer fake.readAllStacksInFoundationMutex.RUnlock()
	return len(fake.readAllStacksInFoundationArgsForCall)
}

func (fake *FakeFoundationManager) ReadAllStacksInFoundationCalls(stub func(string, *cfclient.Config, *change.Options) (data.Data, error)) {
	fake.readAllStacksInFoundationMutex.Lock()
	defer fake.readAllStacksInFoundationMutex.Unlock()
	fake.ReadAllStacksInFoundationStub = stub
}

func (fake *FakeFoundationManager) ReadAllStacksInFoundationArgsForCall(i int) (string, *cfclient.Config, *change.Options) {
	fake.readAllStacksInFoundationMutex.RLock()
	defer fake.readAllStacksInFoundationMutex.RUnlock()
	argsForCall := fake.readAllStacksInFoundationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFoundationManager) ReadAllStacksInFoundationReturns(result1 data.Data, result2 error) {
	fake.readAllStacksInFoundationMutex.Lock()
	defer fake.readAllStacksInFoundationMutex.Unlock()
	fake.ReadAllStacksInFoundationStub = nil
	fake.readAllStacksInFoundationReturns = struct {
		result1 data.Data
		result2 error
	}{result1, result2}
}

func (fake *FakeFoundationManager) ReadAllStacksInFoundationReturnsOnCall(i int, result1 data.Data, result2 error) {
	fake.readAllStacksInFoundationMutex.Lock()
	defer fake.readAllStacksInFoundationMutex.Unlock()
	fake.ReadAllStacksInFoundationStub = nil
	if fake.readAllStacksInFoundationReturnsOnCall == nil {
		fake.readAllStacksInFoundationReturnsOnCall = make(map[int]struct {
			result1 data.Data
			result2 error
		})
	}
	fake.readAllStacksInFoundationReturnsOnCall[i] = struct {
		result1 data.Data
		result2 error
	}{result1, result2}
}

func (fake *FakeFoundationManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.changeStacksInFoundationMutex.RLock()
	defer fake.changeStacksInFoundationMutex.RUnlock()
	fake.readAllStacksInFoundationMutex.RLock()
	defer fake.readAllStacksInFoundationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFoundationManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ change.FoundationManager = new(FakeFoundationManager)
