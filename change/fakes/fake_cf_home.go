// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/mike-carey/change-all-stacks/change"
)

type FakeCFHome struct {
	DirectoryStub        func() (string, error)
	directoryMutex       sync.RWMutex
	directoryArgsForCall []struct {
	}
	directoryReturns struct {
		result1 string
		result2 error
	}
	directoryReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFHome) Directory() (string, error) {
	fake.directoryMutex.Lock()
	ret, specificReturn := fake.directoryReturnsOnCall[len(fake.directoryArgsForCall)]
	fake.directoryArgsForCall = append(fake.directoryArgsForCall, struct {
	}{})
	fake.recordInvocation("Directory", []interface{}{})
	fake.directoryMutex.Unlock()
	if fake.DirectoryStub != nil {
		return fake.DirectoryStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.directoryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFHome) DirectoryCallCount() int {
	fake.directoryMutex.RLock()
	defer fake.directoryMutex.RUnlock()
	return len(fake.directoryArgsForCall)
}

func (fake *FakeCFHome) DirectoryCalls(stub func() (string, error)) {
	fake.directoryMutex.Lock()
	defer fake.directoryMutex.Unlock()
	fake.DirectoryStub = stub
}

func (fake *FakeCFHome) DirectoryReturns(result1 string, result2 error) {
	fake.directoryMutex.Lock()
	defer fake.directoryMutex.Unlock()
	fake.DirectoryStub = nil
	fake.directoryReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFHome) DirectoryReturnsOnCall(i int, result1 string, result2 error) {
	fake.directoryMutex.Lock()
	defer fake.directoryMutex.Unlock()
	fake.DirectoryStub = nil
	if fake.directoryReturnsOnCall == nil {
		fake.directoryReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.directoryReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFHome) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.directoryMutex.RLock()
	defer fake.directoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFHome) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ change.CFHome = new(FakeCFHome)
