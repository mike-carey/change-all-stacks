// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/change-all-stacks/cf"
)

type FakeWorker struct {
	WorkStub        func([]cfclient.App, string) error
	workMutex       sync.RWMutex
	workArgsForCall []struct {
		arg1 []cfclient.App
		arg2 string
	}
	workReturns struct {
		result1 error
	}
	workReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorker) Work(arg1 []cfclient.App, arg2 string) error {
	var arg1Copy []cfclient.App
	if arg1 != nil {
		arg1Copy = make([]cfclient.App, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.workMutex.Lock()
	ret, specificReturn := fake.workReturnsOnCall[len(fake.workArgsForCall)]
	fake.workArgsForCall = append(fake.workArgsForCall, struct {
		arg1 []cfclient.App
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("Work", []interface{}{arg1Copy, arg2})
	fake.workMutex.Unlock()
	if fake.WorkStub != nil {
		return fake.WorkStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.workReturns
	return fakeReturns.result1
}

func (fake *FakeWorker) WorkCallCount() int {
	fake.workMutex.RLock()
	defer fake.workMutex.RUnlock()
	return len(fake.workArgsForCall)
}

func (fake *FakeWorker) WorkCalls(stub func([]cfclient.App, string) error) {
	fake.workMutex.Lock()
	defer fake.workMutex.Unlock()
	fake.WorkStub = stub
}

func (fake *FakeWorker) WorkArgsForCall(i int) ([]cfclient.App, string) {
	fake.workMutex.RLock()
	defer fake.workMutex.RUnlock()
	argsForCall := fake.workArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeWorker) WorkReturns(result1 error) {
	fake.workMutex.Lock()
	defer fake.workMutex.Unlock()
	fake.WorkStub = nil
	fake.workReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorker) WorkReturnsOnCall(i int, result1 error) {
	fake.workMutex.Lock()
	defer fake.workMutex.Unlock()
	fake.WorkStub = nil
	if fake.workReturnsOnCall == nil {
		fake.workReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.workReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeWorker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.workMutex.RLock()
	defer fake.workMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWorker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.Worker = new(FakeWorker)
