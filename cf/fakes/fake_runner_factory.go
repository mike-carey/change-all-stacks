// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/mike-carey/change-all-stacks/cf"
)

type FakeRunnerFactory struct {
	CreateRunnerStub        func(cf.CFCommand, *cf.RunnerOptions) cf.Runner
	createRunnerMutex       sync.RWMutex
	createRunnerArgsForCall []struct {
		arg1 cf.CFCommand
		arg2 *cf.RunnerOptions
	}
	createRunnerReturns struct {
		result1 cf.Runner
	}
	createRunnerReturnsOnCall map[int]struct {
		result1 cf.Runner
	}
	CreateRunnerWithDefaultCommandStub        func(*cf.RunnerOptions) cf.Runner
	createRunnerWithDefaultCommandMutex       sync.RWMutex
	createRunnerWithDefaultCommandArgsForCall []struct {
		arg1 *cf.RunnerOptions
	}
	createRunnerWithDefaultCommandReturns struct {
		result1 cf.Runner
	}
	createRunnerWithDefaultCommandReturnsOnCall map[int]struct {
		result1 cf.Runner
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunnerFactory) CreateRunner(arg1 cf.CFCommand, arg2 *cf.RunnerOptions) cf.Runner {
	fake.createRunnerMutex.Lock()
	ret, specificReturn := fake.createRunnerReturnsOnCall[len(fake.createRunnerArgsForCall)]
	fake.createRunnerArgsForCall = append(fake.createRunnerArgsForCall, struct {
		arg1 cf.CFCommand
		arg2 *cf.RunnerOptions
	}{arg1, arg2})
	fake.recordInvocation("CreateRunner", []interface{}{arg1, arg2})
	fake.createRunnerMutex.Unlock()
	if fake.CreateRunnerStub != nil {
		return fake.CreateRunnerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createRunnerReturns
	return fakeReturns.result1
}

func (fake *FakeRunnerFactory) CreateRunnerCallCount() int {
	fake.createRunnerMutex.RLock()
	defer fake.createRunnerMutex.RUnlock()
	return len(fake.createRunnerArgsForCall)
}

func (fake *FakeRunnerFactory) CreateRunnerCalls(stub func(cf.CFCommand, *cf.RunnerOptions) cf.Runner) {
	fake.createRunnerMutex.Lock()
	defer fake.createRunnerMutex.Unlock()
	fake.CreateRunnerStub = stub
}

func (fake *FakeRunnerFactory) CreateRunnerArgsForCall(i int) (cf.CFCommand, *cf.RunnerOptions) {
	fake.createRunnerMutex.RLock()
	defer fake.createRunnerMutex.RUnlock()
	argsForCall := fake.createRunnerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRunnerFactory) CreateRunnerReturns(result1 cf.Runner) {
	fake.createRunnerMutex.Lock()
	defer fake.createRunnerMutex.Unlock()
	fake.CreateRunnerStub = nil
	fake.createRunnerReturns = struct {
		result1 cf.Runner
	}{result1}
}

func (fake *FakeRunnerFactory) CreateRunnerReturnsOnCall(i int, result1 cf.Runner) {
	fake.createRunnerMutex.Lock()
	defer fake.createRunnerMutex.Unlock()
	fake.CreateRunnerStub = nil
	if fake.createRunnerReturnsOnCall == nil {
		fake.createRunnerReturnsOnCall = make(map[int]struct {
			result1 cf.Runner
		})
	}
	fake.createRunnerReturnsOnCall[i] = struct {
		result1 cf.Runner
	}{result1}
}

func (fake *FakeRunnerFactory) CreateRunnerWithDefaultCommand(arg1 *cf.RunnerOptions) cf.Runner {
	fake.createRunnerWithDefaultCommandMutex.Lock()
	ret, specificReturn := fake.createRunnerWithDefaultCommandReturnsOnCall[len(fake.createRunnerWithDefaultCommandArgsForCall)]
	fake.createRunnerWithDefaultCommandArgsForCall = append(fake.createRunnerWithDefaultCommandArgsForCall, struct {
		arg1 *cf.RunnerOptions
	}{arg1})
	fake.recordInvocation("CreateRunnerWithDefaultCommand", []interface{}{arg1})
	fake.createRunnerWithDefaultCommandMutex.Unlock()
	if fake.CreateRunnerWithDefaultCommandStub != nil {
		return fake.CreateRunnerWithDefaultCommandStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createRunnerWithDefaultCommandReturns
	return fakeReturns.result1
}

func (fake *FakeRunnerFactory) CreateRunnerWithDefaultCommandCallCount() int {
	fake.createRunnerWithDefaultCommandMutex.RLock()
	defer fake.createRunnerWithDefaultCommandMutex.RUnlock()
	return len(fake.createRunnerWithDefaultCommandArgsForCall)
}

func (fake *FakeRunnerFactory) CreateRunnerWithDefaultCommandCalls(stub func(*cf.RunnerOptions) cf.Runner) {
	fake.createRunnerWithDefaultCommandMutex.Lock()
	defer fake.createRunnerWithDefaultCommandMutex.Unlock()
	fake.CreateRunnerWithDefaultCommandStub = stub
}

func (fake *FakeRunnerFactory) CreateRunnerWithDefaultCommandArgsForCall(i int) *cf.RunnerOptions {
	fake.createRunnerWithDefaultCommandMutex.RLock()
	defer fake.createRunnerWithDefaultCommandMutex.RUnlock()
	argsForCall := fake.createRunnerWithDefaultCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRunnerFactory) CreateRunnerWithDefaultCommandReturns(result1 cf.Runner) {
	fake.createRunnerWithDefaultCommandMutex.Lock()
	defer fake.createRunnerWithDefaultCommandMutex.Unlock()
	fake.CreateRunnerWithDefaultCommandStub = nil
	fake.createRunnerWithDefaultCommandReturns = struct {
		result1 cf.Runner
	}{result1}
}

func (fake *FakeRunnerFactory) CreateRunnerWithDefaultCommandReturnsOnCall(i int, result1 cf.Runner) {
	fake.createRunnerWithDefaultCommandMutex.Lock()
	defer fake.createRunnerWithDefaultCommandMutex.Unlock()
	fake.CreateRunnerWithDefaultCommandStub = nil
	if fake.createRunnerWithDefaultCommandReturnsOnCall == nil {
		fake.createRunnerWithDefaultCommandReturnsOnCall = make(map[int]struct {
			result1 cf.Runner
		})
	}
	fake.createRunnerWithDefaultCommandReturnsOnCall[i] = struct {
		result1 cf.Runner
	}{result1}
}

func (fake *FakeRunnerFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createRunnerMutex.RLock()
	defer fake.createRunnerMutex.RUnlock()
	fake.createRunnerWithDefaultCommandMutex.RLock()
	defer fake.createRunnerWithDefaultCommandMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRunnerFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.RunnerFactory = new(FakeRunnerFactory)
