package query

import (
	"io"

	"github.com/cloudfoundry-community/go-cfclient"
)

<%
types = Hash.new
len = ('Service.go'.length + 1) * -1

Dir.glob('*-service.go').each do|f|
  klass = f.split('-').map{|e| e.capitalize}.join[0..len]
  type = klass[0].downcase + klass[1..-1]

  types[type] = klass
end

 %>

type Inquisitor interface {
<% types.each do |type, klass| %>
	GetAll<%= klass %>s() ([]cfclient.<%= klass %>, error)
	Get<%= klass %>ByGuid(<%= type %>Guid string) (cfclient.<%= klass %>, error)
	Get<%= klass %>ByName(<%= type %>Name string) (cfclient.<%= klass %>, error)
<% end %>
}

type inquisitor struct {
	client CFClient
	logger io.Writer
<% types.each do |type, klass| %>
	<%= type %>Service *<%= klass %>Service
<% end %>
}

func NewInquisitor(client CFClient, logger io.Writer) Inquisitor {
	return &inquisitor {
		client: client,
		logger: logger,
<% types.each do |type, klass| %>
		<%= type %>Service: New<%= klass %>Service(client, logger),
<% end %>
	}
}

<% types.each do |type, klass| %>
func (i *inquisitor) get<%= klass %>Service() *<%= klass %>Service {
	return i.<%= type %>Service
}
<% end %>
