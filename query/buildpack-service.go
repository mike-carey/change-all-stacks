// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package query

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/change-all-stacks/logger"
)

type BuildpackService struct {
	client      CFClient
	cacheList   []cfclient.Buildpack
	cacheMap    map[string]cfclient.Buildpack
	mutex       *sync.Mutex
	fullyLoaded bool
}

func NewBuildpackService(client CFClient) *BuildpackService {
	return &BuildpackService{
		client:      client,
		cacheList:   make([]cfclient.Buildpack, 0),
		cacheMap:    make(map[string]cfclient.Buildpack, 0),
		mutex:       &sync.Mutex{},
		fullyLoaded: false,
	}
}

func (s *BuildpackService) lock() {
	logger.Debugf("Locking %T", s)
	s.mutex.Lock()
	logger.Debugf("Locked %T", s)
}

func (s *BuildpackService) unlock() {
	logger.Debugf("Unlocking %T", s)
	s.mutex.Unlock()
	logger.Debugf("Unlocked %T", s)
}

func (s *BuildpackService) GetAllBuildpacks() ([]cfclient.Buildpack, error) {
	s.lock()

	if !s.fullyLoaded {
		logger.Debugf("%T is not already fully loaded", s)
		items, err := s.client.ListBuildpacks()
		if err != nil {
			return nil, err
		}

		logger.Debugf("Writing cache list for %T", s)
		s.cacheList = items

		go func(s *BuildpackService, items []cfclient.Buildpack) {
			defer s.unlock()

			logger.Debugf("Writing cache map for %T", s)
			for _, item := range items {
				s.cacheMap[item.Guid] = item
			}
		}(s, items)
	} else {
		defer s.unlock()
	}

	return s.cacheList, nil
}

func (s *BuildpackService) GetBuildpackByGuid(guid string) (cfclient.Buildpack, error) {
	s.lock()
	defer s.unlock()

	if item, ok := s.cacheMap[guid]; ok {
		logger.Debugf("Found a cached %T with a guid of %s", item, guid)
		return item, nil
	}

	if s.fullyLoaded {
		logger.Debugf("%T is already fully loaded but did not find %s in cacheMap", s, guid)
		item := cfclient.Buildpack{}
		return item, NewNotFoundError(item, "guid", guid)
	}

	logger.Debugf("Did not find cached %T and %T is not fully loaded, querying by guid: %s", cfclient.Buildpack{}, s, guid)
	i, err := s.client.GetBuildpackByGuid(guid)
	if err != nil {
		return cfclient.Buildpack{}, nil
	}

	logger.Debugf("Saving off a single %T to the cacheMap with guid: %s", i, i.Guid)
	s.cacheMap[i.Guid] = i
	return i, nil
}

func (s *BuildpackService) GetBuildpackByName(name string) (cfclient.Buildpack, error) {
	items, err := s.GetAllBuildpacks()
	if err != nil {
		return cfclient.Buildpack{}, err
	}

	s.lock()
	defer s.unlock()

	for _, item := range items {
		if item.Name == name {
			return item, nil
		}
	}

	item := cfclient.Buildpack{}
	return item, NewNotFoundError(item, "name", name)
}

// Proxy all functions onto the inquisitor struct
func (i *inquisitor) GetAllBuildpacks() ([]cfclient.Buildpack, error) {
	return i.getBuildpackService().GetAllBuildpacks()
}

func (i *inquisitor) GetBuildpackByGuid(guid string) (cfclient.Buildpack, error) {
	return i.getBuildpackService().GetBuildpackByGuid(guid)
}

func (i *inquisitor) GetBuildpackByName(name string) (cfclient.Buildpack, error) {
	return i.getBuildpackService().GetBuildpackByName(name)
}
