// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/change-all-stacks/query"
)

type FakeInquisitor struct {
	ClientStub        func() query.CFClient
	clientMutex       sync.RWMutex
	clientArgsForCall []struct {
	}
	clientReturns struct {
		result1 query.CFClient
	}
	clientReturnsOnCall map[int]struct {
		result1 query.CFClient
	}
	GetAllAppsStub        func() ([]cfclient.App, error)
	getAllAppsMutex       sync.RWMutex
	getAllAppsArgsForCall []struct {
	}
	getAllAppsReturns struct {
		result1 []cfclient.App
		result2 error
	}
	getAllAppsReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	GetAllBuildpacksStub        func() ([]cfclient.Buildpack, error)
	getAllBuildpacksMutex       sync.RWMutex
	getAllBuildpacksArgsForCall []struct {
	}
	getAllBuildpacksReturns struct {
		result1 []cfclient.Buildpack
		result2 error
	}
	getAllBuildpacksReturnsOnCall map[int]struct {
		result1 []cfclient.Buildpack
		result2 error
	}
	GetAllOrgsStub        func() ([]cfclient.Org, error)
	getAllOrgsMutex       sync.RWMutex
	getAllOrgsArgsForCall []struct {
	}
	getAllOrgsReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	getAllOrgsReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	GetAllSpacesStub        func() ([]cfclient.Space, error)
	getAllSpacesMutex       sync.RWMutex
	getAllSpacesArgsForCall []struct {
	}
	getAllSpacesReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	getAllSpacesReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	GetAllStacksStub        func() ([]cfclient.Stack, error)
	getAllStacksMutex       sync.RWMutex
	getAllStacksArgsForCall []struct {
	}
	getAllStacksReturns struct {
		result1 []cfclient.Stack
		result2 error
	}
	getAllStacksReturnsOnCall map[int]struct {
		result1 []cfclient.Stack
		result2 error
	}
	GetAppByGuidStub        func(string) (cfclient.App, error)
	getAppByGuidMutex       sync.RWMutex
	getAppByGuidArgsForCall []struct {
		arg1 string
	}
	getAppByGuidReturns struct {
		result1 cfclient.App
		result2 error
	}
	getAppByGuidReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	GetAppByNameStub        func(string) (cfclient.App, error)
	getAppByNameMutex       sync.RWMutex
	getAppByNameArgsForCall []struct {
		arg1 string
	}
	getAppByNameReturns struct {
		result1 cfclient.App
		result2 error
	}
	getAppByNameReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	GetBuildpackByGuidStub        func(string) (cfclient.Buildpack, error)
	getBuildpackByGuidMutex       sync.RWMutex
	getBuildpackByGuidArgsForCall []struct {
		arg1 string
	}
	getBuildpackByGuidReturns struct {
		result1 cfclient.Buildpack
		result2 error
	}
	getBuildpackByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Buildpack
		result2 error
	}
	GetBuildpackByNameStub        func(string) (cfclient.Buildpack, error)
	getBuildpackByNameMutex       sync.RWMutex
	getBuildpackByNameArgsForCall []struct {
		arg1 string
	}
	getBuildpackByNameReturns struct {
		result1 cfclient.Buildpack
		result2 error
	}
	getBuildpackByNameReturnsOnCall map[int]struct {
		result1 cfclient.Buildpack
		result2 error
	}
	GetOrgByGuidStub        func(string) (cfclient.Org, error)
	getOrgByGuidMutex       sync.RWMutex
	getOrgByGuidArgsForCall []struct {
		arg1 string
	}
	getOrgByGuidReturns struct {
		result1 cfclient.Org
		result2 error
	}
	getOrgByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	GetOrgByNameStub        func(string) (cfclient.Org, error)
	getOrgByNameMutex       sync.RWMutex
	getOrgByNameArgsForCall []struct {
		arg1 string
	}
	getOrgByNameReturns struct {
		result1 cfclient.Org
		result2 error
	}
	getOrgByNameReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	GetSpaceByGuidStub        func(string) (cfclient.Space, error)
	getSpaceByGuidMutex       sync.RWMutex
	getSpaceByGuidArgsForCall []struct {
		arg1 string
	}
	getSpaceByGuidReturns struct {
		result1 cfclient.Space
		result2 error
	}
	getSpaceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	GetSpaceByNameStub        func(string) (cfclient.Space, error)
	getSpaceByNameMutex       sync.RWMutex
	getSpaceByNameArgsForCall []struct {
		arg1 string
	}
	getSpaceByNameReturns struct {
		result1 cfclient.Space
		result2 error
	}
	getSpaceByNameReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	GetStackByGuidStub        func(string) (cfclient.Stack, error)
	getStackByGuidMutex       sync.RWMutex
	getStackByGuidArgsForCall []struct {
		arg1 string
	}
	getStackByGuidReturns struct {
		result1 cfclient.Stack
		result2 error
	}
	getStackByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Stack
		result2 error
	}
	GetStackByNameStub        func(string) (cfclient.Stack, error)
	getStackByNameMutex       sync.RWMutex
	getStackByNameArgsForCall []struct {
		arg1 string
	}
	getStackByNameReturns struct {
		result1 cfclient.Stack
		result2 error
	}
	getStackByNameReturnsOnCall map[int]struct {
		result1 cfclient.Stack
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInquisitor) Client() query.CFClient {
	fake.clientMutex.Lock()
	ret, specificReturn := fake.clientReturnsOnCall[len(fake.clientArgsForCall)]
	fake.clientArgsForCall = append(fake.clientArgsForCall, struct {
	}{})
	fake.recordInvocation("Client", []interface{}{})
	fake.clientMutex.Unlock()
	if fake.ClientStub != nil {
		return fake.ClientStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.clientReturns
	return fakeReturns.result1
}

func (fake *FakeInquisitor) ClientCallCount() int {
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	return len(fake.clientArgsForCall)
}

func (fake *FakeInquisitor) ClientCalls(stub func() query.CFClient) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = stub
}

func (fake *FakeInquisitor) ClientReturns(result1 query.CFClient) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	fake.clientReturns = struct {
		result1 query.CFClient
	}{result1}
}

func (fake *FakeInquisitor) ClientReturnsOnCall(i int, result1 query.CFClient) {
	fake.clientMutex.Lock()
	defer fake.clientMutex.Unlock()
	fake.ClientStub = nil
	if fake.clientReturnsOnCall == nil {
		fake.clientReturnsOnCall = make(map[int]struct {
			result1 query.CFClient
		})
	}
	fake.clientReturnsOnCall[i] = struct {
		result1 query.CFClient
	}{result1}
}

func (fake *FakeInquisitor) GetAllApps() ([]cfclient.App, error) {
	fake.getAllAppsMutex.Lock()
	ret, specificReturn := fake.getAllAppsReturnsOnCall[len(fake.getAllAppsArgsForCall)]
	fake.getAllAppsArgsForCall = append(fake.getAllAppsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAllApps", []interface{}{})
	fake.getAllAppsMutex.Unlock()
	if fake.GetAllAppsStub != nil {
		return fake.GetAllAppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllAppsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetAllAppsCallCount() int {
	fake.getAllAppsMutex.RLock()
	defer fake.getAllAppsMutex.RUnlock()
	return len(fake.getAllAppsArgsForCall)
}

func (fake *FakeInquisitor) GetAllAppsCalls(stub func() ([]cfclient.App, error)) {
	fake.getAllAppsMutex.Lock()
	defer fake.getAllAppsMutex.Unlock()
	fake.GetAllAppsStub = stub
}

func (fake *FakeInquisitor) GetAllAppsReturns(result1 []cfclient.App, result2 error) {
	fake.getAllAppsMutex.Lock()
	defer fake.getAllAppsMutex.Unlock()
	fake.GetAllAppsStub = nil
	fake.getAllAppsReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllAppsReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.getAllAppsMutex.Lock()
	defer fake.getAllAppsMutex.Unlock()
	fake.GetAllAppsStub = nil
	if fake.getAllAppsReturnsOnCall == nil {
		fake.getAllAppsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.getAllAppsReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllBuildpacks() ([]cfclient.Buildpack, error) {
	fake.getAllBuildpacksMutex.Lock()
	ret, specificReturn := fake.getAllBuildpacksReturnsOnCall[len(fake.getAllBuildpacksArgsForCall)]
	fake.getAllBuildpacksArgsForCall = append(fake.getAllBuildpacksArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAllBuildpacks", []interface{}{})
	fake.getAllBuildpacksMutex.Unlock()
	if fake.GetAllBuildpacksStub != nil {
		return fake.GetAllBuildpacksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllBuildpacksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetAllBuildpacksCallCount() int {
	fake.getAllBuildpacksMutex.RLock()
	defer fake.getAllBuildpacksMutex.RUnlock()
	return len(fake.getAllBuildpacksArgsForCall)
}

func (fake *FakeInquisitor) GetAllBuildpacksCalls(stub func() ([]cfclient.Buildpack, error)) {
	fake.getAllBuildpacksMutex.Lock()
	defer fake.getAllBuildpacksMutex.Unlock()
	fake.GetAllBuildpacksStub = stub
}

func (fake *FakeInquisitor) GetAllBuildpacksReturns(result1 []cfclient.Buildpack, result2 error) {
	fake.getAllBuildpacksMutex.Lock()
	defer fake.getAllBuildpacksMutex.Unlock()
	fake.GetAllBuildpacksStub = nil
	fake.getAllBuildpacksReturns = struct {
		result1 []cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllBuildpacksReturnsOnCall(i int, result1 []cfclient.Buildpack, result2 error) {
	fake.getAllBuildpacksMutex.Lock()
	defer fake.getAllBuildpacksMutex.Unlock()
	fake.GetAllBuildpacksStub = nil
	if fake.getAllBuildpacksReturnsOnCall == nil {
		fake.getAllBuildpacksReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Buildpack
			result2 error
		})
	}
	fake.getAllBuildpacksReturnsOnCall[i] = struct {
		result1 []cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllOrgs() ([]cfclient.Org, error) {
	fake.getAllOrgsMutex.Lock()
	ret, specificReturn := fake.getAllOrgsReturnsOnCall[len(fake.getAllOrgsArgsForCall)]
	fake.getAllOrgsArgsForCall = append(fake.getAllOrgsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAllOrgs", []interface{}{})
	fake.getAllOrgsMutex.Unlock()
	if fake.GetAllOrgsStub != nil {
		return fake.GetAllOrgsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetAllOrgsCallCount() int {
	fake.getAllOrgsMutex.RLock()
	defer fake.getAllOrgsMutex.RUnlock()
	return len(fake.getAllOrgsArgsForCall)
}

func (fake *FakeInquisitor) GetAllOrgsCalls(stub func() ([]cfclient.Org, error)) {
	fake.getAllOrgsMutex.Lock()
	defer fake.getAllOrgsMutex.Unlock()
	fake.GetAllOrgsStub = stub
}

func (fake *FakeInquisitor) GetAllOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.getAllOrgsMutex.Lock()
	defer fake.getAllOrgsMutex.Unlock()
	fake.GetAllOrgsStub = nil
	fake.getAllOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllOrgsReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.getAllOrgsMutex.Lock()
	defer fake.getAllOrgsMutex.Unlock()
	fake.GetAllOrgsStub = nil
	if fake.getAllOrgsReturnsOnCall == nil {
		fake.getAllOrgsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.getAllOrgsReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllSpaces() ([]cfclient.Space, error) {
	fake.getAllSpacesMutex.Lock()
	ret, specificReturn := fake.getAllSpacesReturnsOnCall[len(fake.getAllSpacesArgsForCall)]
	fake.getAllSpacesArgsForCall = append(fake.getAllSpacesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAllSpaces", []interface{}{})
	fake.getAllSpacesMutex.Unlock()
	if fake.GetAllSpacesStub != nil {
		return fake.GetAllSpacesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllSpacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetAllSpacesCallCount() int {
	fake.getAllSpacesMutex.RLock()
	defer fake.getAllSpacesMutex.RUnlock()
	return len(fake.getAllSpacesArgsForCall)
}

func (fake *FakeInquisitor) GetAllSpacesCalls(stub func() ([]cfclient.Space, error)) {
	fake.getAllSpacesMutex.Lock()
	defer fake.getAllSpacesMutex.Unlock()
	fake.GetAllSpacesStub = stub
}

func (fake *FakeInquisitor) GetAllSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.getAllSpacesMutex.Lock()
	defer fake.getAllSpacesMutex.Unlock()
	fake.GetAllSpacesStub = nil
	fake.getAllSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllSpacesReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.getAllSpacesMutex.Lock()
	defer fake.getAllSpacesMutex.Unlock()
	fake.GetAllSpacesStub = nil
	if fake.getAllSpacesReturnsOnCall == nil {
		fake.getAllSpacesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.getAllSpacesReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllStacks() ([]cfclient.Stack, error) {
	fake.getAllStacksMutex.Lock()
	ret, specificReturn := fake.getAllStacksReturnsOnCall[len(fake.getAllStacksArgsForCall)]
	fake.getAllStacksArgsForCall = append(fake.getAllStacksArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAllStacks", []interface{}{})
	fake.getAllStacksMutex.Unlock()
	if fake.GetAllStacksStub != nil {
		return fake.GetAllStacksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAllStacksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetAllStacksCallCount() int {
	fake.getAllStacksMutex.RLock()
	defer fake.getAllStacksMutex.RUnlock()
	return len(fake.getAllStacksArgsForCall)
}

func (fake *FakeInquisitor) GetAllStacksCalls(stub func() ([]cfclient.Stack, error)) {
	fake.getAllStacksMutex.Lock()
	defer fake.getAllStacksMutex.Unlock()
	fake.GetAllStacksStub = stub
}

func (fake *FakeInquisitor) GetAllStacksReturns(result1 []cfclient.Stack, result2 error) {
	fake.getAllStacksMutex.Lock()
	defer fake.getAllStacksMutex.Unlock()
	fake.GetAllStacksStub = nil
	fake.getAllStacksReturns = struct {
		result1 []cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAllStacksReturnsOnCall(i int, result1 []cfclient.Stack, result2 error) {
	fake.getAllStacksMutex.Lock()
	defer fake.getAllStacksMutex.Unlock()
	fake.GetAllStacksStub = nil
	if fake.getAllStacksReturnsOnCall == nil {
		fake.getAllStacksReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Stack
			result2 error
		})
	}
	fake.getAllStacksReturnsOnCall[i] = struct {
		result1 []cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAppByGuid(arg1 string) (cfclient.App, error) {
	fake.getAppByGuidMutex.Lock()
	ret, specificReturn := fake.getAppByGuidReturnsOnCall[len(fake.getAppByGuidArgsForCall)]
	fake.getAppByGuidArgsForCall = append(fake.getAppByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppByGuid", []interface{}{arg1})
	fake.getAppByGuidMutex.Unlock()
	if fake.GetAppByGuidStub != nil {
		return fake.GetAppByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetAppByGuidCallCount() int {
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	return len(fake.getAppByGuidArgsForCall)
}

func (fake *FakeInquisitor) GetAppByGuidCalls(stub func(string) (cfclient.App, error)) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = stub
}

func (fake *FakeInquisitor) GetAppByGuidArgsForCall(i int) string {
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	argsForCall := fake.getAppByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetAppByGuidReturns(result1 cfclient.App, result2 error) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = nil
	fake.getAppByGuidReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAppByGuidReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = nil
	if fake.getAppByGuidReturnsOnCall == nil {
		fake.getAppByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.getAppByGuidReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAppByName(arg1 string) (cfclient.App, error) {
	fake.getAppByNameMutex.Lock()
	ret, specificReturn := fake.getAppByNameReturnsOnCall[len(fake.getAppByNameArgsForCall)]
	fake.getAppByNameArgsForCall = append(fake.getAppByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppByName", []interface{}{arg1})
	fake.getAppByNameMutex.Unlock()
	if fake.GetAppByNameStub != nil {
		return fake.GetAppByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetAppByNameCallCount() int {
	fake.getAppByNameMutex.RLock()
	defer fake.getAppByNameMutex.RUnlock()
	return len(fake.getAppByNameArgsForCall)
}

func (fake *FakeInquisitor) GetAppByNameCalls(stub func(string) (cfclient.App, error)) {
	fake.getAppByNameMutex.Lock()
	defer fake.getAppByNameMutex.Unlock()
	fake.GetAppByNameStub = stub
}

func (fake *FakeInquisitor) GetAppByNameArgsForCall(i int) string {
	fake.getAppByNameMutex.RLock()
	defer fake.getAppByNameMutex.RUnlock()
	argsForCall := fake.getAppByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetAppByNameReturns(result1 cfclient.App, result2 error) {
	fake.getAppByNameMutex.Lock()
	defer fake.getAppByNameMutex.Unlock()
	fake.GetAppByNameStub = nil
	fake.getAppByNameReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetAppByNameReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.getAppByNameMutex.Lock()
	defer fake.getAppByNameMutex.Unlock()
	fake.GetAppByNameStub = nil
	if fake.getAppByNameReturnsOnCall == nil {
		fake.getAppByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.getAppByNameReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetBuildpackByGuid(arg1 string) (cfclient.Buildpack, error) {
	fake.getBuildpackByGuidMutex.Lock()
	ret, specificReturn := fake.getBuildpackByGuidReturnsOnCall[len(fake.getBuildpackByGuidArgsForCall)]
	fake.getBuildpackByGuidArgsForCall = append(fake.getBuildpackByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetBuildpackByGuid", []interface{}{arg1})
	fake.getBuildpackByGuidMutex.Unlock()
	if fake.GetBuildpackByGuidStub != nil {
		return fake.GetBuildpackByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBuildpackByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetBuildpackByGuidCallCount() int {
	fake.getBuildpackByGuidMutex.RLock()
	defer fake.getBuildpackByGuidMutex.RUnlock()
	return len(fake.getBuildpackByGuidArgsForCall)
}

func (fake *FakeInquisitor) GetBuildpackByGuidCalls(stub func(string) (cfclient.Buildpack, error)) {
	fake.getBuildpackByGuidMutex.Lock()
	defer fake.getBuildpackByGuidMutex.Unlock()
	fake.GetBuildpackByGuidStub = stub
}

func (fake *FakeInquisitor) GetBuildpackByGuidArgsForCall(i int) string {
	fake.getBuildpackByGuidMutex.RLock()
	defer fake.getBuildpackByGuidMutex.RUnlock()
	argsForCall := fake.getBuildpackByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetBuildpackByGuidReturns(result1 cfclient.Buildpack, result2 error) {
	fake.getBuildpackByGuidMutex.Lock()
	defer fake.getBuildpackByGuidMutex.Unlock()
	fake.GetBuildpackByGuidStub = nil
	fake.getBuildpackByGuidReturns = struct {
		result1 cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetBuildpackByGuidReturnsOnCall(i int, result1 cfclient.Buildpack, result2 error) {
	fake.getBuildpackByGuidMutex.Lock()
	defer fake.getBuildpackByGuidMutex.Unlock()
	fake.GetBuildpackByGuidStub = nil
	if fake.getBuildpackByGuidReturnsOnCall == nil {
		fake.getBuildpackByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Buildpack
			result2 error
		})
	}
	fake.getBuildpackByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetBuildpackByName(arg1 string) (cfclient.Buildpack, error) {
	fake.getBuildpackByNameMutex.Lock()
	ret, specificReturn := fake.getBuildpackByNameReturnsOnCall[len(fake.getBuildpackByNameArgsForCall)]
	fake.getBuildpackByNameArgsForCall = append(fake.getBuildpackByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetBuildpackByName", []interface{}{arg1})
	fake.getBuildpackByNameMutex.Unlock()
	if fake.GetBuildpackByNameStub != nil {
		return fake.GetBuildpackByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBuildpackByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetBuildpackByNameCallCount() int {
	fake.getBuildpackByNameMutex.RLock()
	defer fake.getBuildpackByNameMutex.RUnlock()
	return len(fake.getBuildpackByNameArgsForCall)
}

func (fake *FakeInquisitor) GetBuildpackByNameCalls(stub func(string) (cfclient.Buildpack, error)) {
	fake.getBuildpackByNameMutex.Lock()
	defer fake.getBuildpackByNameMutex.Unlock()
	fake.GetBuildpackByNameStub = stub
}

func (fake *FakeInquisitor) GetBuildpackByNameArgsForCall(i int) string {
	fake.getBuildpackByNameMutex.RLock()
	defer fake.getBuildpackByNameMutex.RUnlock()
	argsForCall := fake.getBuildpackByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetBuildpackByNameReturns(result1 cfclient.Buildpack, result2 error) {
	fake.getBuildpackByNameMutex.Lock()
	defer fake.getBuildpackByNameMutex.Unlock()
	fake.GetBuildpackByNameStub = nil
	fake.getBuildpackByNameReturns = struct {
		result1 cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetBuildpackByNameReturnsOnCall(i int, result1 cfclient.Buildpack, result2 error) {
	fake.getBuildpackByNameMutex.Lock()
	defer fake.getBuildpackByNameMutex.Unlock()
	fake.GetBuildpackByNameStub = nil
	if fake.getBuildpackByNameReturnsOnCall == nil {
		fake.getBuildpackByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Buildpack
			result2 error
		})
	}
	fake.getBuildpackByNameReturnsOnCall[i] = struct {
		result1 cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetOrgByGuid(arg1 string) (cfclient.Org, error) {
	fake.getOrgByGuidMutex.Lock()
	ret, specificReturn := fake.getOrgByGuidReturnsOnCall[len(fake.getOrgByGuidArgsForCall)]
	fake.getOrgByGuidArgsForCall = append(fake.getOrgByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrgByGuid", []interface{}{arg1})
	fake.getOrgByGuidMutex.Unlock()
	if fake.GetOrgByGuidStub != nil {
		return fake.GetOrgByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOrgByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetOrgByGuidCallCount() int {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	return len(fake.getOrgByGuidArgsForCall)
}

func (fake *FakeInquisitor) GetOrgByGuidCalls(stub func(string) (cfclient.Org, error)) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = stub
}

func (fake *FakeInquisitor) GetOrgByGuidArgsForCall(i int) string {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	argsForCall := fake.getOrgByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetOrgByGuidReturns(result1 cfclient.Org, result2 error) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = nil
	fake.getOrgByGuidReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetOrgByGuidReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = nil
	if fake.getOrgByGuidReturnsOnCall == nil {
		fake.getOrgByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.getOrgByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetOrgByName(arg1 string) (cfclient.Org, error) {
	fake.getOrgByNameMutex.Lock()
	ret, specificReturn := fake.getOrgByNameReturnsOnCall[len(fake.getOrgByNameArgsForCall)]
	fake.getOrgByNameArgsForCall = append(fake.getOrgByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrgByName", []interface{}{arg1})
	fake.getOrgByNameMutex.Unlock()
	if fake.GetOrgByNameStub != nil {
		return fake.GetOrgByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOrgByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetOrgByNameCallCount() int {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	return len(fake.getOrgByNameArgsForCall)
}

func (fake *FakeInquisitor) GetOrgByNameCalls(stub func(string) (cfclient.Org, error)) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = stub
}

func (fake *FakeInquisitor) GetOrgByNameArgsForCall(i int) string {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	argsForCall := fake.getOrgByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetOrgByNameReturns(result1 cfclient.Org, result2 error) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = nil
	fake.getOrgByNameReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetOrgByNameReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = nil
	if fake.getOrgByNameReturnsOnCall == nil {
		fake.getOrgByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.getOrgByNameReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetSpaceByGuid(arg1 string) (cfclient.Space, error) {
	fake.getSpaceByGuidMutex.Lock()
	ret, specificReturn := fake.getSpaceByGuidReturnsOnCall[len(fake.getSpaceByGuidArgsForCall)]
	fake.getSpaceByGuidArgsForCall = append(fake.getSpaceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSpaceByGuid", []interface{}{arg1})
	fake.getSpaceByGuidMutex.Unlock()
	if fake.GetSpaceByGuidStub != nil {
		return fake.GetSpaceByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSpaceByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetSpaceByGuidCallCount() int {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	return len(fake.getSpaceByGuidArgsForCall)
}

func (fake *FakeInquisitor) GetSpaceByGuidCalls(stub func(string) (cfclient.Space, error)) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = stub
}

func (fake *FakeInquisitor) GetSpaceByGuidArgsForCall(i int) string {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	argsForCall := fake.getSpaceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetSpaceByGuidReturns(result1 cfclient.Space, result2 error) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = nil
	fake.getSpaceByGuidReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetSpaceByGuidReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = nil
	if fake.getSpaceByGuidReturnsOnCall == nil {
		fake.getSpaceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.getSpaceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetSpaceByName(arg1 string) (cfclient.Space, error) {
	fake.getSpaceByNameMutex.Lock()
	ret, specificReturn := fake.getSpaceByNameReturnsOnCall[len(fake.getSpaceByNameArgsForCall)]
	fake.getSpaceByNameArgsForCall = append(fake.getSpaceByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSpaceByName", []interface{}{arg1})
	fake.getSpaceByNameMutex.Unlock()
	if fake.GetSpaceByNameStub != nil {
		return fake.GetSpaceByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSpaceByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetSpaceByNameCallCount() int {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	return len(fake.getSpaceByNameArgsForCall)
}

func (fake *FakeInquisitor) GetSpaceByNameCalls(stub func(string) (cfclient.Space, error)) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = stub
}

func (fake *FakeInquisitor) GetSpaceByNameArgsForCall(i int) string {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	argsForCall := fake.getSpaceByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetSpaceByNameReturns(result1 cfclient.Space, result2 error) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = nil
	fake.getSpaceByNameReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetSpaceByNameReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = nil
	if fake.getSpaceByNameReturnsOnCall == nil {
		fake.getSpaceByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.getSpaceByNameReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetStackByGuid(arg1 string) (cfclient.Stack, error) {
	fake.getStackByGuidMutex.Lock()
	ret, specificReturn := fake.getStackByGuidReturnsOnCall[len(fake.getStackByGuidArgsForCall)]
	fake.getStackByGuidArgsForCall = append(fake.getStackByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetStackByGuid", []interface{}{arg1})
	fake.getStackByGuidMutex.Unlock()
	if fake.GetStackByGuidStub != nil {
		return fake.GetStackByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getStackByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetStackByGuidCallCount() int {
	fake.getStackByGuidMutex.RLock()
	defer fake.getStackByGuidMutex.RUnlock()
	return len(fake.getStackByGuidArgsForCall)
}

func (fake *FakeInquisitor) GetStackByGuidCalls(stub func(string) (cfclient.Stack, error)) {
	fake.getStackByGuidMutex.Lock()
	defer fake.getStackByGuidMutex.Unlock()
	fake.GetStackByGuidStub = stub
}

func (fake *FakeInquisitor) GetStackByGuidArgsForCall(i int) string {
	fake.getStackByGuidMutex.RLock()
	defer fake.getStackByGuidMutex.RUnlock()
	argsForCall := fake.getStackByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetStackByGuidReturns(result1 cfclient.Stack, result2 error) {
	fake.getStackByGuidMutex.Lock()
	defer fake.getStackByGuidMutex.Unlock()
	fake.GetStackByGuidStub = nil
	fake.getStackByGuidReturns = struct {
		result1 cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetStackByGuidReturnsOnCall(i int, result1 cfclient.Stack, result2 error) {
	fake.getStackByGuidMutex.Lock()
	defer fake.getStackByGuidMutex.Unlock()
	fake.GetStackByGuidStub = nil
	if fake.getStackByGuidReturnsOnCall == nil {
		fake.getStackByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Stack
			result2 error
		})
	}
	fake.getStackByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetStackByName(arg1 string) (cfclient.Stack, error) {
	fake.getStackByNameMutex.Lock()
	ret, specificReturn := fake.getStackByNameReturnsOnCall[len(fake.getStackByNameArgsForCall)]
	fake.getStackByNameArgsForCall = append(fake.getStackByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetStackByName", []interface{}{arg1})
	fake.getStackByNameMutex.Unlock()
	if fake.GetStackByNameStub != nil {
		return fake.GetStackByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getStackByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeInquisitor) GetStackByNameCallCount() int {
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	return len(fake.getStackByNameArgsForCall)
}

func (fake *FakeInquisitor) GetStackByNameCalls(stub func(string) (cfclient.Stack, error)) {
	fake.getStackByNameMutex.Lock()
	defer fake.getStackByNameMutex.Unlock()
	fake.GetStackByNameStub = stub
}

func (fake *FakeInquisitor) GetStackByNameArgsForCall(i int) string {
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	argsForCall := fake.getStackByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeInquisitor) GetStackByNameReturns(result1 cfclient.Stack, result2 error) {
	fake.getStackByNameMutex.Lock()
	defer fake.getStackByNameMutex.Unlock()
	fake.GetStackByNameStub = nil
	fake.getStackByNameReturns = struct {
		result1 cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) GetStackByNameReturnsOnCall(i int, result1 cfclient.Stack, result2 error) {
	fake.getStackByNameMutex.Lock()
	defer fake.getStackByNameMutex.Unlock()
	fake.GetStackByNameStub = nil
	if fake.getStackByNameReturnsOnCall == nil {
		fake.getStackByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Stack
			result2 error
		})
	}
	fake.getStackByNameReturnsOnCall[i] = struct {
		result1 cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeInquisitor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clientMutex.RLock()
	defer fake.clientMutex.RUnlock()
	fake.getAllAppsMutex.RLock()
	defer fake.getAllAppsMutex.RUnlock()
	fake.getAllBuildpacksMutex.RLock()
	defer fake.getAllBuildpacksMutex.RUnlock()
	fake.getAllOrgsMutex.RLock()
	defer fake.getAllOrgsMutex.RUnlock()
	fake.getAllSpacesMutex.RLock()
	defer fake.getAllSpacesMutex.RUnlock()
	fake.getAllStacksMutex.RLock()
	defer fake.getAllStacksMutex.RUnlock()
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	fake.getAppByNameMutex.RLock()
	defer fake.getAppByNameMutex.RUnlock()
	fake.getBuildpackByGuidMutex.RLock()
	defer fake.getBuildpackByGuidMutex.RUnlock()
	fake.getBuildpackByNameMutex.RLock()
	defer fake.getBuildpackByNameMutex.RUnlock()
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	fake.getStackByGuidMutex.RLock()
	defer fake.getStackByGuidMutex.RUnlock()
	fake.getStackByNameMutex.RLock()
	defer fake.getStackByNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInquisitor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ query.Inquisitor = new(FakeInquisitor)
