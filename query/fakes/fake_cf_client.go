// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"net/http"
	"net/url"
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/mike-carey/change-all-stacks/query"
)

type FakeCFClient struct {
	AddIsolationSegmentToOrgStub        func(string, string) error
	addIsolationSegmentToOrgMutex       sync.RWMutex
	addIsolationSegmentToOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addIsolationSegmentToOrgReturns struct {
		result1 error
	}
	addIsolationSegmentToOrgReturnsOnCall map[int]struct {
		result1 error
	}
	AddIsolationSegmentToSpaceStub        func(string, string) error
	addIsolationSegmentToSpaceMutex       sync.RWMutex
	addIsolationSegmentToSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addIsolationSegmentToSpaceReturns struct {
		result1 error
	}
	addIsolationSegmentToSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	AppByGuidStub        func(string) (cfclient.App, error)
	appByGuidMutex       sync.RWMutex
	appByGuidArgsForCall []struct {
		arg1 string
	}
	appByGuidReturns struct {
		result1 cfclient.App
		result2 error
	}
	appByGuidReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	AppByNameStub        func(string, string, string) (cfclient.App, error)
	appByNameMutex       sync.RWMutex
	appByNameArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	appByNameReturns struct {
		result1 cfclient.App
		result2 error
	}
	appByNameReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	AssignSpaceQuotaStub        func(string, string) error
	assignSpaceQuotaMutex       sync.RWMutex
	assignSpaceQuotaArgsForCall []struct {
		arg1 string
		arg2 string
	}
	assignSpaceQuotaReturns struct {
		result1 error
	}
	assignSpaceQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	AssociateOrgAuditorStub        func(string, string) (cfclient.Org, error)
	associateOrgAuditorMutex       sync.RWMutex
	associateOrgAuditorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateOrgAuditorReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgAuditorReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgAuditorByUsernameStub        func(string, string) (cfclient.Org, error)
	associateOrgAuditorByUsernameMutex       sync.RWMutex
	associateOrgAuditorByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateOrgAuditorByUsernameReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgAuditorByUsernameReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgAuditorByUsernameAndOriginStub        func(string, string, string) (cfclient.Org, error)
	associateOrgAuditorByUsernameAndOriginMutex       sync.RWMutex
	associateOrgAuditorByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	associateOrgAuditorByUsernameAndOriginReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgAuditorByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgBillingManagerStub        func(string, string) (cfclient.Org, error)
	associateOrgBillingManagerMutex       sync.RWMutex
	associateOrgBillingManagerArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateOrgBillingManagerReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgBillingManagerReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgBillingManagerByUsernameStub        func(string, string) (cfclient.Org, error)
	associateOrgBillingManagerByUsernameMutex       sync.RWMutex
	associateOrgBillingManagerByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateOrgBillingManagerByUsernameReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgBillingManagerByUsernameReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgBillingManagerByUsernameAndOriginStub        func(string, string, string) (cfclient.Org, error)
	associateOrgBillingManagerByUsernameAndOriginMutex       sync.RWMutex
	associateOrgBillingManagerByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	associateOrgBillingManagerByUsernameAndOriginReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgBillingManagerByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgManagerStub        func(string, string) (cfclient.Org, error)
	associateOrgManagerMutex       sync.RWMutex
	associateOrgManagerArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateOrgManagerReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgManagerReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgManagerByUsernameStub        func(string, string) (cfclient.Org, error)
	associateOrgManagerByUsernameMutex       sync.RWMutex
	associateOrgManagerByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateOrgManagerByUsernameReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgManagerByUsernameReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgManagerByUsernameAndOriginStub        func(string, string, string) (cfclient.Org, error)
	associateOrgManagerByUsernameAndOriginMutex       sync.RWMutex
	associateOrgManagerByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	associateOrgManagerByUsernameAndOriginReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgManagerByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgUserStub        func(string, string) (cfclient.Org, error)
	associateOrgUserMutex       sync.RWMutex
	associateOrgUserArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateOrgUserReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgUserReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgUserByUsernameStub        func(string, string) (cfclient.Org, error)
	associateOrgUserByUsernameMutex       sync.RWMutex
	associateOrgUserByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateOrgUserByUsernameReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgUserByUsernameReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateOrgUserByUsernameAndOriginStub        func(string, string, string) (cfclient.Org, error)
	associateOrgUserByUsernameAndOriginMutex       sync.RWMutex
	associateOrgUserByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	associateOrgUserByUsernameAndOriginReturns struct {
		result1 cfclient.Org
		result2 error
	}
	associateOrgUserByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	AssociateSpaceAuditorStub        func(string, string) (cfclient.Space, error)
	associateSpaceAuditorMutex       sync.RWMutex
	associateSpaceAuditorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateSpaceAuditorReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceAuditorReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	AssociateSpaceAuditorByUsernameStub        func(string, string) (cfclient.Space, error)
	associateSpaceAuditorByUsernameMutex       sync.RWMutex
	associateSpaceAuditorByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateSpaceAuditorByUsernameReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceAuditorByUsernameReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	AssociateSpaceAuditorByUsernameAndOriginStub        func(string, string, string) (cfclient.Space, error)
	associateSpaceAuditorByUsernameAndOriginMutex       sync.RWMutex
	associateSpaceAuditorByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	associateSpaceAuditorByUsernameAndOriginReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceAuditorByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	AssociateSpaceDeveloperStub        func(string, string) (cfclient.Space, error)
	associateSpaceDeveloperMutex       sync.RWMutex
	associateSpaceDeveloperArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateSpaceDeveloperReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceDeveloperReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	AssociateSpaceDeveloperByUsernameStub        func(string, string) (cfclient.Space, error)
	associateSpaceDeveloperByUsernameMutex       sync.RWMutex
	associateSpaceDeveloperByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateSpaceDeveloperByUsernameReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceDeveloperByUsernameReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	AssociateSpaceDeveloperByUsernameAndOriginStub        func(string, string, string) (cfclient.Space, error)
	associateSpaceDeveloperByUsernameAndOriginMutex       sync.RWMutex
	associateSpaceDeveloperByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	associateSpaceDeveloperByUsernameAndOriginReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceDeveloperByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	AssociateSpaceManagerStub        func(string, string) (cfclient.Space, error)
	associateSpaceManagerMutex       sync.RWMutex
	associateSpaceManagerArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateSpaceManagerReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceManagerReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	AssociateSpaceManagerByUsernameStub        func(string, string) (cfclient.Space, error)
	associateSpaceManagerByUsernameMutex       sync.RWMutex
	associateSpaceManagerByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	associateSpaceManagerByUsernameReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceManagerByUsernameReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	AssociateSpaceManagerByUsernameAndOriginStub        func(string, string, string) (cfclient.Space, error)
	associateSpaceManagerByUsernameAndOriginMutex       sync.RWMutex
	associateSpaceManagerByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	associateSpaceManagerByUsernameAndOriginReturns struct {
		result1 cfclient.Space
		result2 error
	}
	associateSpaceManagerByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	BindRouteStub        func(string, string) error
	bindRouteMutex       sync.RWMutex
	bindRouteArgsForCall []struct {
		arg1 string
		arg2 string
	}
	bindRouteReturns struct {
		result1 error
	}
	bindRouteReturnsOnCall map[int]struct {
		result1 error
	}
	BindRunningSecGroupStub        func(string) error
	bindRunningSecGroupMutex       sync.RWMutex
	bindRunningSecGroupArgsForCall []struct {
		arg1 string
	}
	bindRunningSecGroupReturns struct {
		result1 error
	}
	bindRunningSecGroupReturnsOnCall map[int]struct {
		result1 error
	}
	BindSecGroupStub        func(string, string) error
	bindSecGroupMutex       sync.RWMutex
	bindSecGroupArgsForCall []struct {
		arg1 string
		arg2 string
	}
	bindSecGroupReturns struct {
		result1 error
	}
	bindSecGroupReturnsOnCall map[int]struct {
		result1 error
	}
	BindStagingSecGroupStub        func(string) error
	bindStagingSecGroupMutex       sync.RWMutex
	bindStagingSecGroupArgsForCall []struct {
		arg1 string
	}
	bindStagingSecGroupReturns struct {
		result1 error
	}
	bindStagingSecGroupReturnsOnCall map[int]struct {
		result1 error
	}
	BindStagingSecGroupToSpaceStub        func(string, string) error
	bindStagingSecGroupToSpaceMutex       sync.RWMutex
	bindStagingSecGroupToSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	bindStagingSecGroupToSpaceReturns struct {
		result1 error
	}
	bindStagingSecGroupToSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	CreateAppStub        func(cfclient.AppCreateRequest) (cfclient.App, error)
	createAppMutex       sync.RWMutex
	createAppArgsForCall []struct {
		arg1 cfclient.AppCreateRequest
	}
	createAppReturns struct {
		result1 cfclient.App
		result2 error
	}
	createAppReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	CreateBuildpackStub        func(*cfclient.BuildpackRequest) (*cfclient.Buildpack, error)
	createBuildpackMutex       sync.RWMutex
	createBuildpackArgsForCall []struct {
		arg1 *cfclient.BuildpackRequest
	}
	createBuildpackReturns struct {
		result1 *cfclient.Buildpack
		result2 error
	}
	createBuildpackReturnsOnCall map[int]struct {
		result1 *cfclient.Buildpack
		result2 error
	}
	CreateDomainStub        func(string, string) (*cfclient.Domain, error)
	createDomainMutex       sync.RWMutex
	createDomainArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createDomainReturns struct {
		result1 *cfclient.Domain
		result2 error
	}
	createDomainReturnsOnCall map[int]struct {
		result1 *cfclient.Domain
		result2 error
	}
	CreateIsolationSegmentStub        func(string) (*cfclient.IsolationSegment, error)
	createIsolationSegmentMutex       sync.RWMutex
	createIsolationSegmentArgsForCall []struct {
		arg1 string
	}
	createIsolationSegmentReturns struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}
	createIsolationSegmentReturnsOnCall map[int]struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}
	CreateOrgStub        func(cfclient.OrgRequest) (cfclient.Org, error)
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		arg1 cfclient.OrgRequest
	}
	createOrgReturns struct {
		result1 cfclient.Org
		result2 error
	}
	createOrgReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	CreateOrgQuotaStub        func(cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error)
	createOrgQuotaMutex       sync.RWMutex
	createOrgQuotaArgsForCall []struct {
		arg1 cfclient.OrgQuotaRequest
	}
	createOrgQuotaReturns struct {
		result1 *cfclient.OrgQuota
		result2 error
	}
	createOrgQuotaReturnsOnCall map[int]struct {
		result1 *cfclient.OrgQuota
		result2 error
	}
	CreateRouteStub        func(cfclient.RouteRequest) (cfclient.Route, error)
	createRouteMutex       sync.RWMutex
	createRouteArgsForCall []struct {
		arg1 cfclient.RouteRequest
	}
	createRouteReturns struct {
		result1 cfclient.Route
		result2 error
	}
	createRouteReturnsOnCall map[int]struct {
		result1 cfclient.Route
		result2 error
	}
	CreateRouteServiceBindingStub        func(string, string) error
	createRouteServiceBindingMutex       sync.RWMutex
	createRouteServiceBindingArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createRouteServiceBindingReturns struct {
		result1 error
	}
	createRouteServiceBindingReturnsOnCall map[int]struct {
		result1 error
	}
	CreateSecGroupStub        func(string, []cfclient.SecGroupRule, []string) (*cfclient.SecGroup, error)
	createSecGroupMutex       sync.RWMutex
	createSecGroupArgsForCall []struct {
		arg1 string
		arg2 []cfclient.SecGroupRule
		arg3 []string
	}
	createSecGroupReturns struct {
		result1 *cfclient.SecGroup
		result2 error
	}
	createSecGroupReturnsOnCall map[int]struct {
		result1 *cfclient.SecGroup
		result2 error
	}
	CreateServiceBindingStub        func(string, string) (*cfclient.ServiceBinding, error)
	createServiceBindingMutex       sync.RWMutex
	createServiceBindingArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createServiceBindingReturns struct {
		result1 *cfclient.ServiceBinding
		result2 error
	}
	createServiceBindingReturnsOnCall map[int]struct {
		result1 *cfclient.ServiceBinding
		result2 error
	}
	CreateServiceBrokerStub        func(cfclient.CreateServiceBrokerRequest) (cfclient.ServiceBroker, error)
	createServiceBrokerMutex       sync.RWMutex
	createServiceBrokerArgsForCall []struct {
		arg1 cfclient.CreateServiceBrokerRequest
	}
	createServiceBrokerReturns struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	createServiceBrokerReturnsOnCall map[int]struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	CreateServiceInstanceStub        func(cfclient.ServiceInstanceRequest) (cfclient.ServiceInstance, error)
	createServiceInstanceMutex       sync.RWMutex
	createServiceInstanceArgsForCall []struct {
		arg1 cfclient.ServiceInstanceRequest
	}
	createServiceInstanceReturns struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	createServiceInstanceReturnsOnCall map[int]struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	CreateServiceKeyStub        func(cfclient.CreateServiceKeyRequest) (cfclient.ServiceKey, error)
	createServiceKeyMutex       sync.RWMutex
	createServiceKeyArgsForCall []struct {
		arg1 cfclient.CreateServiceKeyRequest
	}
	createServiceKeyReturns struct {
		result1 cfclient.ServiceKey
		result2 error
	}
	createServiceKeyReturnsOnCall map[int]struct {
		result1 cfclient.ServiceKey
		result2 error
	}
	CreateServicePlanVisibilityStub        func(string, string) (cfclient.ServicePlanVisibility, error)
	createServicePlanVisibilityMutex       sync.RWMutex
	createServicePlanVisibilityArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createServicePlanVisibilityReturns struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	createServicePlanVisibilityReturnsOnCall map[int]struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	CreateServicePlanVisibilityByUniqueIdStub        func(string, string) (cfclient.ServicePlanVisibility, error)
	createServicePlanVisibilityByUniqueIdMutex       sync.RWMutex
	createServicePlanVisibilityByUniqueIdArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createServicePlanVisibilityByUniqueIdReturns struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	createServicePlanVisibilityByUniqueIdReturnsOnCall map[int]struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	CreateSharedDomainStub        func(string, bool, string) (*cfclient.SharedDomain, error)
	createSharedDomainMutex       sync.RWMutex
	createSharedDomainArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 string
	}
	createSharedDomainReturns struct {
		result1 *cfclient.SharedDomain
		result2 error
	}
	createSharedDomainReturnsOnCall map[int]struct {
		result1 *cfclient.SharedDomain
		result2 error
	}
	CreateSpaceStub        func(cfclient.SpaceRequest) (cfclient.Space, error)
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		arg1 cfclient.SpaceRequest
	}
	createSpaceReturns struct {
		result1 cfclient.Space
		result2 error
	}
	createSpaceReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	CreateSpaceQuotaStub        func(cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error)
	createSpaceQuotaMutex       sync.RWMutex
	createSpaceQuotaArgsForCall []struct {
		arg1 cfclient.SpaceQuotaRequest
	}
	createSpaceQuotaReturns struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}
	createSpaceQuotaReturnsOnCall map[int]struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}
	CreateTaskStub        func(cfclient.TaskRequest) (cfclient.Task, error)
	createTaskMutex       sync.RWMutex
	createTaskArgsForCall []struct {
		arg1 cfclient.TaskRequest
	}
	createTaskReturns struct {
		result1 cfclient.Task
		result2 error
	}
	createTaskReturnsOnCall map[int]struct {
		result1 cfclient.Task
		result2 error
	}
	CreateTcpRouteStub        func(cfclient.RouteRequest) (cfclient.Route, error)
	createTcpRouteMutex       sync.RWMutex
	createTcpRouteArgsForCall []struct {
		arg1 cfclient.RouteRequest
	}
	createTcpRouteReturns struct {
		result1 cfclient.Route
		result2 error
	}
	createTcpRouteReturnsOnCall map[int]struct {
		result1 cfclient.Route
		result2 error
	}
	CreateUserStub        func(cfclient.UserRequest) (cfclient.User, error)
	createUserMutex       sync.RWMutex
	createUserArgsForCall []struct {
		arg1 cfclient.UserRequest
	}
	createUserReturns struct {
		result1 cfclient.User
		result2 error
	}
	createUserReturnsOnCall map[int]struct {
		result1 cfclient.User
		result2 error
	}
	CreateUserProvidedServiceInstanceStub        func(cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error)
	createUserProvidedServiceInstanceMutex       sync.RWMutex
	createUserProvidedServiceInstanceArgsForCall []struct {
		arg1 cfclient.UserProvidedServiceInstanceRequest
	}
	createUserProvidedServiceInstanceReturns struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}
	createUserProvidedServiceInstanceReturnsOnCall map[int]struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}
	DefaultIsolationSegmentForOrgStub        func(string, string) error
	defaultIsolationSegmentForOrgMutex       sync.RWMutex
	defaultIsolationSegmentForOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	defaultIsolationSegmentForOrgReturns struct {
		result1 error
	}
	defaultIsolationSegmentForOrgReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteAppStub        func(string) error
	deleteAppMutex       sync.RWMutex
	deleteAppArgsForCall []struct {
		arg1 string
	}
	deleteAppReturns struct {
		result1 error
	}
	deleteAppReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteBuildpackStub        func(string, bool) error
	deleteBuildpackMutex       sync.RWMutex
	deleteBuildpackArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	deleteBuildpackReturns struct {
		result1 error
	}
	deleteBuildpackReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteDomainStub        func(string) error
	deleteDomainMutex       sync.RWMutex
	deleteDomainArgsForCall []struct {
		arg1 string
	}
	deleteDomainReturns struct {
		result1 error
	}
	deleteDomainReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteIsolationSegmentByGUIDStub        func(string) error
	deleteIsolationSegmentByGUIDMutex       sync.RWMutex
	deleteIsolationSegmentByGUIDArgsForCall []struct {
		arg1 string
	}
	deleteIsolationSegmentByGUIDReturns struct {
		result1 error
	}
	deleteIsolationSegmentByGUIDReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteOrgStub        func(string, bool, bool) error
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 bool
	}
	deleteOrgReturns struct {
		result1 error
	}
	deleteOrgReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteOrgQuotaStub        func(string, bool) error
	deleteOrgQuotaMutex       sync.RWMutex
	deleteOrgQuotaArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	deleteOrgQuotaReturns struct {
		result1 error
	}
	deleteOrgQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteRouteStub        func(string) error
	deleteRouteMutex       sync.RWMutex
	deleteRouteArgsForCall []struct {
		arg1 string
	}
	deleteRouteReturns struct {
		result1 error
	}
	deleteRouteReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteRouteMappingStub        func(string) error
	deleteRouteMappingMutex       sync.RWMutex
	deleteRouteMappingArgsForCall []struct {
		arg1 string
	}
	deleteRouteMappingReturns struct {
		result1 error
	}
	deleteRouteMappingReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteRouteServiceBindingStub        func(string, string) error
	deleteRouteServiceBindingMutex       sync.RWMutex
	deleteRouteServiceBindingArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteRouteServiceBindingReturns struct {
		result1 error
	}
	deleteRouteServiceBindingReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSecGroupStub        func(string) error
	deleteSecGroupMutex       sync.RWMutex
	deleteSecGroupArgsForCall []struct {
		arg1 string
	}
	deleteSecGroupReturns struct {
		result1 error
	}
	deleteSecGroupReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceBindingStub        func(string) error
	deleteServiceBindingMutex       sync.RWMutex
	deleteServiceBindingArgsForCall []struct {
		arg1 string
	}
	deleteServiceBindingReturns struct {
		result1 error
	}
	deleteServiceBindingReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceBrokerStub        func(string) error
	deleteServiceBrokerMutex       sync.RWMutex
	deleteServiceBrokerArgsForCall []struct {
		arg1 string
	}
	deleteServiceBrokerReturns struct {
		result1 error
	}
	deleteServiceBrokerReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceInstanceStub        func(string, bool, bool) error
	deleteServiceInstanceMutex       sync.RWMutex
	deleteServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 bool
	}
	deleteServiceInstanceReturns struct {
		result1 error
	}
	deleteServiceInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceKeyStub        func(string) error
	deleteServiceKeyMutex       sync.RWMutex
	deleteServiceKeyArgsForCall []struct {
		arg1 string
	}
	deleteServiceKeyReturns struct {
		result1 error
	}
	deleteServiceKeyReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServicePlanVisibilityStub        func(string, bool) error
	deleteServicePlanVisibilityMutex       sync.RWMutex
	deleteServicePlanVisibilityArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	deleteServicePlanVisibilityReturns struct {
		result1 error
	}
	deleteServicePlanVisibilityReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServicePlanVisibilityByPlanAndOrgStub        func(string, string, bool) error
	deleteServicePlanVisibilityByPlanAndOrgMutex       sync.RWMutex
	deleteServicePlanVisibilityByPlanAndOrgArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	deleteServicePlanVisibilityByPlanAndOrgReturns struct {
		result1 error
	}
	deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSharedDomainStub        func(string, bool) error
	deleteSharedDomainMutex       sync.RWMutex
	deleteSharedDomainArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	deleteSharedDomainReturns struct {
		result1 error
	}
	deleteSharedDomainReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSpaceStub        func(string, bool, bool) error
	deleteSpaceMutex       sync.RWMutex
	deleteSpaceArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 bool
	}
	deleteSpaceReturns struct {
		result1 error
	}
	deleteSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteUserStub        func(string) error
	deleteUserMutex       sync.RWMutex
	deleteUserArgsForCall []struct {
		arg1 string
	}
	deleteUserReturns struct {
		result1 error
	}
	deleteUserReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteUserProvidedServiceInstanceStub        func(string) error
	deleteUserProvidedServiceInstanceMutex       sync.RWMutex
	deleteUserProvidedServiceInstanceArgsForCall []struct {
		arg1 string
	}
	deleteUserProvidedServiceInstanceReturns struct {
		result1 error
	}
	deleteUserProvidedServiceInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	DoStub        func(*http.Request) (*http.Response, error)
	doMutex       sync.RWMutex
	doArgsForCall []struct {
		arg1 *http.Request
	}
	doReturns struct {
		result1 *http.Response
		result2 error
	}
	doReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	DoRequestStub        func(*cfclient.Request) (*http.Response, error)
	doRequestMutex       sync.RWMutex
	doRequestArgsForCall []struct {
		arg1 *cfclient.Request
	}
	doRequestReturns struct {
		result1 *http.Response
		result2 error
	}
	doRequestReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	DoRequestWithoutRedirectsStub        func(*cfclient.Request) (*http.Response, error)
	doRequestWithoutRedirectsMutex       sync.RWMutex
	doRequestWithoutRedirectsArgsForCall []struct {
		arg1 *cfclient.Request
	}
	doRequestWithoutRedirectsReturns struct {
		result1 *http.Response
		result2 error
	}
	doRequestWithoutRedirectsReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	GetAppBitsStub        func(string) (io.ReadCloser, error)
	getAppBitsMutex       sync.RWMutex
	getAppBitsArgsForCall []struct {
		arg1 string
	}
	getAppBitsReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	getAppBitsReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	GetAppByGuidStub        func(string) (cfclient.App, error)
	getAppByGuidMutex       sync.RWMutex
	getAppByGuidArgsForCall []struct {
		arg1 string
	}
	getAppByGuidReturns struct {
		result1 cfclient.App
		result2 error
	}
	getAppByGuidReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	GetAppByGuidNoInlineCallStub        func(string) (cfclient.App, error)
	getAppByGuidNoInlineCallMutex       sync.RWMutex
	getAppByGuidNoInlineCallArgsForCall []struct {
		arg1 string
	}
	getAppByGuidNoInlineCallReturns struct {
		result1 cfclient.App
		result2 error
	}
	getAppByGuidNoInlineCallReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	GetAppEnvStub        func(string) (cfclient.AppEnv, error)
	getAppEnvMutex       sync.RWMutex
	getAppEnvArgsForCall []struct {
		arg1 string
	}
	getAppEnvReturns struct {
		result1 cfclient.AppEnv
		result2 error
	}
	getAppEnvReturnsOnCall map[int]struct {
		result1 cfclient.AppEnv
		result2 error
	}
	GetAppInstancesStub        func(string) (map[string]cfclient.AppInstance, error)
	getAppInstancesMutex       sync.RWMutex
	getAppInstancesArgsForCall []struct {
		arg1 string
	}
	getAppInstancesReturns struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}
	getAppInstancesReturnsOnCall map[int]struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}
	GetAppRoutesStub        func(string) ([]cfclient.Route, error)
	getAppRoutesMutex       sync.RWMutex
	getAppRoutesArgsForCall []struct {
		arg1 string
	}
	getAppRoutesReturns struct {
		result1 []cfclient.Route
		result2 error
	}
	getAppRoutesReturnsOnCall map[int]struct {
		result1 []cfclient.Route
		result2 error
	}
	GetAppStatsStub        func(string) (map[string]cfclient.AppStats, error)
	getAppStatsMutex       sync.RWMutex
	getAppStatsArgsForCall []struct {
		arg1 string
	}
	getAppStatsReturns struct {
		result1 map[string]cfclient.AppStats
		result2 error
	}
	getAppStatsReturnsOnCall map[int]struct {
		result1 map[string]cfclient.AppStats
		result2 error
	}
	GetBuildpackByGuidStub        func(string) (cfclient.Buildpack, error)
	getBuildpackByGuidMutex       sync.RWMutex
	getBuildpackByGuidArgsForCall []struct {
		arg1 string
	}
	getBuildpackByGuidReturns struct {
		result1 cfclient.Buildpack
		result2 error
	}
	getBuildpackByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Buildpack
		result2 error
	}
	GetDomainByNameStub        func(string) (cfclient.Domain, error)
	getDomainByNameMutex       sync.RWMutex
	getDomainByNameArgsForCall []struct {
		arg1 string
	}
	getDomainByNameReturns struct {
		result1 cfclient.Domain
		result2 error
	}
	getDomainByNameReturnsOnCall map[int]struct {
		result1 cfclient.Domain
		result2 error
	}
	GetInfoStub        func() (*cfclient.Info, error)
	getInfoMutex       sync.RWMutex
	getInfoArgsForCall []struct {
	}
	getInfoReturns struct {
		result1 *cfclient.Info
		result2 error
	}
	getInfoReturnsOnCall map[int]struct {
		result1 *cfclient.Info
		result2 error
	}
	GetIsolationSegmentByGUIDStub        func(string) (*cfclient.IsolationSegment, error)
	getIsolationSegmentByGUIDMutex       sync.RWMutex
	getIsolationSegmentByGUIDArgsForCall []struct {
		arg1 string
	}
	getIsolationSegmentByGUIDReturns struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}
	getIsolationSegmentByGUIDReturnsOnCall map[int]struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}
	GetOrgByGuidStub        func(string) (cfclient.Org, error)
	getOrgByGuidMutex       sync.RWMutex
	getOrgByGuidArgsForCall []struct {
		arg1 string
	}
	getOrgByGuidReturns struct {
		result1 cfclient.Org
		result2 error
	}
	getOrgByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	GetOrgByNameStub        func(string) (cfclient.Org, error)
	getOrgByNameMutex       sync.RWMutex
	getOrgByNameArgsForCall []struct {
		arg1 string
	}
	getOrgByNameReturns struct {
		result1 cfclient.Org
		result2 error
	}
	getOrgByNameReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	GetOrgQuotaByNameStub        func(string) (cfclient.OrgQuota, error)
	getOrgQuotaByNameMutex       sync.RWMutex
	getOrgQuotaByNameArgsForCall []struct {
		arg1 string
	}
	getOrgQuotaByNameReturns struct {
		result1 cfclient.OrgQuota
		result2 error
	}
	getOrgQuotaByNameReturnsOnCall map[int]struct {
		result1 cfclient.OrgQuota
		result2 error
	}
	GetRouteMappingByGuidStub        func(string) (*cfclient.RouteMapping, error)
	getRouteMappingByGuidMutex       sync.RWMutex
	getRouteMappingByGuidArgsForCall []struct {
		arg1 string
	}
	getRouteMappingByGuidReturns struct {
		result1 *cfclient.RouteMapping
		result2 error
	}
	getRouteMappingByGuidReturnsOnCall map[int]struct {
		result1 *cfclient.RouteMapping
		result2 error
	}
	GetRunningEnvironmentVariableGroupStub        func() (cfclient.EnvironmentVariableGroup, error)
	getRunningEnvironmentVariableGroupMutex       sync.RWMutex
	getRunningEnvironmentVariableGroupArgsForCall []struct {
	}
	getRunningEnvironmentVariableGroupReturns struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}
	getRunningEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}
	GetSecGroupStub        func(string) (*cfclient.SecGroup, error)
	getSecGroupMutex       sync.RWMutex
	getSecGroupArgsForCall []struct {
		arg1 string
	}
	getSecGroupReturns struct {
		result1 *cfclient.SecGroup
		result2 error
	}
	getSecGroupReturnsOnCall map[int]struct {
		result1 *cfclient.SecGroup
		result2 error
	}
	GetSecGroupByNameStub        func(string) (cfclient.SecGroup, error)
	getSecGroupByNameMutex       sync.RWMutex
	getSecGroupByNameArgsForCall []struct {
		arg1 string
	}
	getSecGroupByNameReturns struct {
		result1 cfclient.SecGroup
		result2 error
	}
	getSecGroupByNameReturnsOnCall map[int]struct {
		result1 cfclient.SecGroup
		result2 error
	}
	GetServiceBindingByGuidStub        func(string) (cfclient.ServiceBinding, error)
	getServiceBindingByGuidMutex       sync.RWMutex
	getServiceBindingByGuidArgsForCall []struct {
		arg1 string
	}
	getServiceBindingByGuidReturns struct {
		result1 cfclient.ServiceBinding
		result2 error
	}
	getServiceBindingByGuidReturnsOnCall map[int]struct {
		result1 cfclient.ServiceBinding
		result2 error
	}
	GetServiceBrokerByGuidStub        func(string) (cfclient.ServiceBroker, error)
	getServiceBrokerByGuidMutex       sync.RWMutex
	getServiceBrokerByGuidArgsForCall []struct {
		arg1 string
	}
	getServiceBrokerByGuidReturns struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	getServiceBrokerByGuidReturnsOnCall map[int]struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	GetServiceBrokerByNameStub        func(string) (cfclient.ServiceBroker, error)
	getServiceBrokerByNameMutex       sync.RWMutex
	getServiceBrokerByNameArgsForCall []struct {
		arg1 string
	}
	getServiceBrokerByNameReturns struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	getServiceBrokerByNameReturnsOnCall map[int]struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	GetServiceByGuidStub        func(string) (cfclient.Service, error)
	getServiceByGuidMutex       sync.RWMutex
	getServiceByGuidArgsForCall []struct {
		arg1 string
	}
	getServiceByGuidReturns struct {
		result1 cfclient.Service
		result2 error
	}
	getServiceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Service
		result2 error
	}
	GetServiceInstanceByGuidStub        func(string) (cfclient.ServiceInstance, error)
	getServiceInstanceByGuidMutex       sync.RWMutex
	getServiceInstanceByGuidArgsForCall []struct {
		arg1 string
	}
	getServiceInstanceByGuidReturns struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	getServiceInstanceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	GetServiceKeyByInstanceGuidStub        func(string) (cfclient.ServiceKey, error)
	getServiceKeyByInstanceGuidMutex       sync.RWMutex
	getServiceKeyByInstanceGuidArgsForCall []struct {
		arg1 string
	}
	getServiceKeyByInstanceGuidReturns struct {
		result1 cfclient.ServiceKey
		result2 error
	}
	getServiceKeyByInstanceGuidReturnsOnCall map[int]struct {
		result1 cfclient.ServiceKey
		result2 error
	}
	GetServiceKeyByNameStub        func(string) (cfclient.ServiceKey, error)
	getServiceKeyByNameMutex       sync.RWMutex
	getServiceKeyByNameArgsForCall []struct {
		arg1 string
	}
	getServiceKeyByNameReturns struct {
		result1 cfclient.ServiceKey
		result2 error
	}
	getServiceKeyByNameReturnsOnCall map[int]struct {
		result1 cfclient.ServiceKey
		result2 error
	}
	GetServiceKeysByInstanceGuidStub        func(string) ([]cfclient.ServiceKey, error)
	getServiceKeysByInstanceGuidMutex       sync.RWMutex
	getServiceKeysByInstanceGuidArgsForCall []struct {
		arg1 string
	}
	getServiceKeysByInstanceGuidReturns struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	getServiceKeysByInstanceGuidReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	GetServicePlanByGUIDStub        func(string) (*cfclient.ServicePlan, error)
	getServicePlanByGUIDMutex       sync.RWMutex
	getServicePlanByGUIDArgsForCall []struct {
		arg1 string
	}
	getServicePlanByGUIDReturns struct {
		result1 *cfclient.ServicePlan
		result2 error
	}
	getServicePlanByGUIDReturnsOnCall map[int]struct {
		result1 *cfclient.ServicePlan
		result2 error
	}
	GetServicePlanVisibilityByGuidStub        func(string) (cfclient.ServicePlanVisibility, error)
	getServicePlanVisibilityByGuidMutex       sync.RWMutex
	getServicePlanVisibilityByGuidArgsForCall []struct {
		arg1 string
	}
	getServicePlanVisibilityByGuidReturns struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	getServicePlanVisibilityByGuidReturnsOnCall map[int]struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	GetSharedDomainByGuidStub        func(string) (cfclient.SharedDomain, error)
	getSharedDomainByGuidMutex       sync.RWMutex
	getSharedDomainByGuidArgsForCall []struct {
		arg1 string
	}
	getSharedDomainByGuidReturns struct {
		result1 cfclient.SharedDomain
		result2 error
	}
	getSharedDomainByGuidReturnsOnCall map[int]struct {
		result1 cfclient.SharedDomain
		result2 error
	}
	GetSharedDomainByNameStub        func(string) (cfclient.SharedDomain, error)
	getSharedDomainByNameMutex       sync.RWMutex
	getSharedDomainByNameArgsForCall []struct {
		arg1 string
	}
	getSharedDomainByNameReturns struct {
		result1 cfclient.SharedDomain
		result2 error
	}
	getSharedDomainByNameReturnsOnCall map[int]struct {
		result1 cfclient.SharedDomain
		result2 error
	}
	GetSpaceByGuidStub        func(string) (cfclient.Space, error)
	getSpaceByGuidMutex       sync.RWMutex
	getSpaceByGuidArgsForCall []struct {
		arg1 string
	}
	getSpaceByGuidReturns struct {
		result1 cfclient.Space
		result2 error
	}
	getSpaceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	GetSpaceByNameStub        func(string, string) (cfclient.Space, error)
	getSpaceByNameMutex       sync.RWMutex
	getSpaceByNameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceByNameReturns struct {
		result1 cfclient.Space
		result2 error
	}
	getSpaceByNameReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	GetSpaceQuotaByNameStub        func(string) (cfclient.SpaceQuota, error)
	getSpaceQuotaByNameMutex       sync.RWMutex
	getSpaceQuotaByNameArgsForCall []struct {
		arg1 string
	}
	getSpaceQuotaByNameReturns struct {
		result1 cfclient.SpaceQuota
		result2 error
	}
	getSpaceQuotaByNameReturnsOnCall map[int]struct {
		result1 cfclient.SpaceQuota
		result2 error
	}
	GetStagingEnvironmentVariableGroupStub        func() (cfclient.EnvironmentVariableGroup, error)
	getStagingEnvironmentVariableGroupMutex       sync.RWMutex
	getStagingEnvironmentVariableGroupArgsForCall []struct {
	}
	getStagingEnvironmentVariableGroupReturns struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}
	getStagingEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}
	GetTaskByGuidStub        func(string) (cfclient.Task, error)
	getTaskByGuidMutex       sync.RWMutex
	getTaskByGuidArgsForCall []struct {
		arg1 string
	}
	getTaskByGuidReturns struct {
		result1 cfclient.Task
		result2 error
	}
	getTaskByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Task
		result2 error
	}
	GetTokenStub        func() (string, error)
	getTokenMutex       sync.RWMutex
	getTokenArgsForCall []struct {
	}
	getTokenReturns struct {
		result1 string
		result2 error
	}
	getTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetUserByGUIDStub        func(string) (cfclient.User, error)
	getUserByGUIDMutex       sync.RWMutex
	getUserByGUIDArgsForCall []struct {
		arg1 string
	}
	getUserByGUIDReturns struct {
		result1 cfclient.User
		result2 error
	}
	getUserByGUIDReturnsOnCall map[int]struct {
		result1 cfclient.User
		result2 error
	}
	GetUserProvidedServiceInstanceByGuidStub        func(string) (cfclient.UserProvidedServiceInstance, error)
	getUserProvidedServiceInstanceByGuidMutex       sync.RWMutex
	getUserProvidedServiceInstanceByGuidArgsForCall []struct {
		arg1 string
	}
	getUserProvidedServiceInstanceByGuidReturns struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}
	getUserProvidedServiceInstanceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}
	IsolationSegmentForSpaceStub        func(string, string) error
	isolationSegmentForSpaceMutex       sync.RWMutex
	isolationSegmentForSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	isolationSegmentForSpaceReturns struct {
		result1 error
	}
	isolationSegmentForSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	KillAppInstanceStub        func(string, string) error
	killAppInstanceMutex       sync.RWMutex
	killAppInstanceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	killAppInstanceReturns struct {
		result1 error
	}
	killAppInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	ListAllProcessesStub        func() ([]cfclient.Process, error)
	listAllProcessesMutex       sync.RWMutex
	listAllProcessesArgsForCall []struct {
	}
	listAllProcessesReturns struct {
		result1 []cfclient.Process
		result2 error
	}
	listAllProcessesReturnsOnCall map[int]struct {
		result1 []cfclient.Process
		result2 error
	}
	ListAllProcessesByQueryStub        func(url.Values) ([]cfclient.Process, error)
	listAllProcessesByQueryMutex       sync.RWMutex
	listAllProcessesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listAllProcessesByQueryReturns struct {
		result1 []cfclient.Process
		result2 error
	}
	listAllProcessesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Process
		result2 error
	}
	ListAppEventsStub        func(string) ([]cfclient.AppEventEntity, error)
	listAppEventsMutex       sync.RWMutex
	listAppEventsArgsForCall []struct {
		arg1 string
	}
	listAppEventsReturns struct {
		result1 []cfclient.AppEventEntity
		result2 error
	}
	listAppEventsReturnsOnCall map[int]struct {
		result1 []cfclient.AppEventEntity
		result2 error
	}
	ListAppEventsByQueryStub        func(string, []cfclient.AppEventQuery) ([]cfclient.AppEventEntity, error)
	listAppEventsByQueryMutex       sync.RWMutex
	listAppEventsByQueryArgsForCall []struct {
		arg1 string
		arg2 []cfclient.AppEventQuery
	}
	listAppEventsByQueryReturns struct {
		result1 []cfclient.AppEventEntity
		result2 error
	}
	listAppEventsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.AppEventEntity
		result2 error
	}
	ListAppUsageEventsStub        func() ([]cfclient.AppUsageEvent, error)
	listAppUsageEventsMutex       sync.RWMutex
	listAppUsageEventsArgsForCall []struct {
	}
	listAppUsageEventsReturns struct {
		result1 []cfclient.AppUsageEvent
		result2 error
	}
	listAppUsageEventsReturnsOnCall map[int]struct {
		result1 []cfclient.AppUsageEvent
		result2 error
	}
	ListAppUsageEventsByQueryStub        func(url.Values) ([]cfclient.AppUsageEvent, error)
	listAppUsageEventsByQueryMutex       sync.RWMutex
	listAppUsageEventsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listAppUsageEventsByQueryReturns struct {
		result1 []cfclient.AppUsageEvent
		result2 error
	}
	listAppUsageEventsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.AppUsageEvent
		result2 error
	}
	ListAppsStub        func() ([]cfclient.App, error)
	listAppsMutex       sync.RWMutex
	listAppsArgsForCall []struct {
	}
	listAppsReturns struct {
		result1 []cfclient.App
		result2 error
	}
	listAppsReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	ListAppsByQueryStub        func(url.Values) ([]cfclient.App, error)
	listAppsByQueryMutex       sync.RWMutex
	listAppsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listAppsByQueryReturns struct {
		result1 []cfclient.App
		result2 error
	}
	listAppsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	ListAppsByQueryWithLimitsStub        func(url.Values, int) ([]cfclient.App, error)
	listAppsByQueryWithLimitsMutex       sync.RWMutex
	listAppsByQueryWithLimitsArgsForCall []struct {
		arg1 url.Values
		arg2 int
	}
	listAppsByQueryWithLimitsReturns struct {
		result1 []cfclient.App
		result2 error
	}
	listAppsByQueryWithLimitsReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	ListAppsByRouteStub        func(string) ([]cfclient.App, error)
	listAppsByRouteMutex       sync.RWMutex
	listAppsByRouteArgsForCall []struct {
		arg1 string
	}
	listAppsByRouteReturns struct {
		result1 []cfclient.App
		result2 error
	}
	listAppsByRouteReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	ListBuildpacksStub        func() ([]cfclient.Buildpack, error)
	listBuildpacksMutex       sync.RWMutex
	listBuildpacksArgsForCall []struct {
	}
	listBuildpacksReturns struct {
		result1 []cfclient.Buildpack
		result2 error
	}
	listBuildpacksReturnsOnCall map[int]struct {
		result1 []cfclient.Buildpack
		result2 error
	}
	ListDomainsStub        func() ([]cfclient.Domain, error)
	listDomainsMutex       sync.RWMutex
	listDomainsArgsForCall []struct {
	}
	listDomainsReturns struct {
		result1 []cfclient.Domain
		result2 error
	}
	listDomainsReturnsOnCall map[int]struct {
		result1 []cfclient.Domain
		result2 error
	}
	ListDomainsByQueryStub        func(url.Values) ([]cfclient.Domain, error)
	listDomainsByQueryMutex       sync.RWMutex
	listDomainsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listDomainsByQueryReturns struct {
		result1 []cfclient.Domain
		result2 error
	}
	listDomainsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Domain
		result2 error
	}
	ListEventsStub        func() ([]cfclient.Event, error)
	listEventsMutex       sync.RWMutex
	listEventsArgsForCall []struct {
	}
	listEventsReturns struct {
		result1 []cfclient.Event
		result2 error
	}
	listEventsReturnsOnCall map[int]struct {
		result1 []cfclient.Event
		result2 error
	}
	ListEventsByQueryStub        func(url.Values) ([]cfclient.Event, error)
	listEventsByQueryMutex       sync.RWMutex
	listEventsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listEventsByQueryReturns struct {
		result1 []cfclient.Event
		result2 error
	}
	listEventsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Event
		result2 error
	}
	ListIsolationSegmentsStub        func() ([]cfclient.IsolationSegment, error)
	listIsolationSegmentsMutex       sync.RWMutex
	listIsolationSegmentsArgsForCall []struct {
	}
	listIsolationSegmentsReturns struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}
	listIsolationSegmentsReturnsOnCall map[int]struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}
	ListIsolationSegmentsByQueryStub        func(url.Values) ([]cfclient.IsolationSegment, error)
	listIsolationSegmentsByQueryMutex       sync.RWMutex
	listIsolationSegmentsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listIsolationSegmentsByQueryReturns struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}
	listIsolationSegmentsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}
	ListOrgAuditorsStub        func(string) ([]cfclient.User, error)
	listOrgAuditorsMutex       sync.RWMutex
	listOrgAuditorsArgsForCall []struct {
		arg1 string
	}
	listOrgAuditorsReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listOrgAuditorsReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListOrgAuditorsByQueryStub        func(string, url.Values) ([]cfclient.User, error)
	listOrgAuditorsByQueryMutex       sync.RWMutex
	listOrgAuditorsByQueryArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	listOrgAuditorsByQueryReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listOrgAuditorsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListOrgBillingManagersStub        func(string) ([]cfclient.User, error)
	listOrgBillingManagersMutex       sync.RWMutex
	listOrgBillingManagersArgsForCall []struct {
		arg1 string
	}
	listOrgBillingManagersReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listOrgBillingManagersReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListOrgBillingManagersByQueryStub        func(string, url.Values) ([]cfclient.User, error)
	listOrgBillingManagersByQueryMutex       sync.RWMutex
	listOrgBillingManagersByQueryArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	listOrgBillingManagersByQueryReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listOrgBillingManagersByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListOrgManagersStub        func(string) ([]cfclient.User, error)
	listOrgManagersMutex       sync.RWMutex
	listOrgManagersArgsForCall []struct {
		arg1 string
	}
	listOrgManagersReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listOrgManagersReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListOrgManagersByQueryStub        func(string, url.Values) ([]cfclient.User, error)
	listOrgManagersByQueryMutex       sync.RWMutex
	listOrgManagersByQueryArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	listOrgManagersByQueryReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listOrgManagersByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListOrgPrivateDomainsStub        func(string) ([]cfclient.Domain, error)
	listOrgPrivateDomainsMutex       sync.RWMutex
	listOrgPrivateDomainsArgsForCall []struct {
		arg1 string
	}
	listOrgPrivateDomainsReturns struct {
		result1 []cfclient.Domain
		result2 error
	}
	listOrgPrivateDomainsReturnsOnCall map[int]struct {
		result1 []cfclient.Domain
		result2 error
	}
	ListOrgQuotasStub        func() ([]cfclient.OrgQuota, error)
	listOrgQuotasMutex       sync.RWMutex
	listOrgQuotasArgsForCall []struct {
	}
	listOrgQuotasReturns struct {
		result1 []cfclient.OrgQuota
		result2 error
	}
	listOrgQuotasReturnsOnCall map[int]struct {
		result1 []cfclient.OrgQuota
		result2 error
	}
	ListOrgQuotasByQueryStub        func(url.Values) ([]cfclient.OrgQuota, error)
	listOrgQuotasByQueryMutex       sync.RWMutex
	listOrgQuotasByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listOrgQuotasByQueryReturns struct {
		result1 []cfclient.OrgQuota
		result2 error
	}
	listOrgQuotasByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.OrgQuota
		result2 error
	}
	ListOrgSpaceQuotasStub        func(string) ([]cfclient.SpaceQuota, error)
	listOrgSpaceQuotasMutex       sync.RWMutex
	listOrgSpaceQuotasArgsForCall []struct {
		arg1 string
	}
	listOrgSpaceQuotasReturns struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	listOrgSpaceQuotasReturnsOnCall map[int]struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	ListOrgUsersStub        func(string) ([]cfclient.User, error)
	listOrgUsersMutex       sync.RWMutex
	listOrgUsersArgsForCall []struct {
		arg1 string
	}
	listOrgUsersReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listOrgUsersReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListOrgUsersByQueryStub        func(string, url.Values) ([]cfclient.User, error)
	listOrgUsersByQueryMutex       sync.RWMutex
	listOrgUsersByQueryArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	listOrgUsersByQueryReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listOrgUsersByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListOrgsStub        func() ([]cfclient.Org, error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct {
	}
	listOrgsReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listOrgsReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	ListOrgsByQueryStub        func(url.Values) ([]cfclient.Org, error)
	listOrgsByQueryMutex       sync.RWMutex
	listOrgsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listOrgsByQueryReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listOrgsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	ListRouteMappingsStub        func() ([]*cfclient.RouteMapping, error)
	listRouteMappingsMutex       sync.RWMutex
	listRouteMappingsArgsForCall []struct {
	}
	listRouteMappingsReturns struct {
		result1 []*cfclient.RouteMapping
		result2 error
	}
	listRouteMappingsReturnsOnCall map[int]struct {
		result1 []*cfclient.RouteMapping
		result2 error
	}
	ListRouteMappingsByQueryStub        func(url.Values) ([]*cfclient.RouteMapping, error)
	listRouteMappingsByQueryMutex       sync.RWMutex
	listRouteMappingsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listRouteMappingsByQueryReturns struct {
		result1 []*cfclient.RouteMapping
		result2 error
	}
	listRouteMappingsByQueryReturnsOnCall map[int]struct {
		result1 []*cfclient.RouteMapping
		result2 error
	}
	ListRoutesStub        func() ([]cfclient.Route, error)
	listRoutesMutex       sync.RWMutex
	listRoutesArgsForCall []struct {
	}
	listRoutesReturns struct {
		result1 []cfclient.Route
		result2 error
	}
	listRoutesReturnsOnCall map[int]struct {
		result1 []cfclient.Route
		result2 error
	}
	ListRoutesByQueryStub        func(url.Values) ([]cfclient.Route, error)
	listRoutesByQueryMutex       sync.RWMutex
	listRoutesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listRoutesByQueryReturns struct {
		result1 []cfclient.Route
		result2 error
	}
	listRoutesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Route
		result2 error
	}
	ListRunningSecGroupsStub        func() ([]cfclient.SecGroup, error)
	listRunningSecGroupsMutex       sync.RWMutex
	listRunningSecGroupsArgsForCall []struct {
	}
	listRunningSecGroupsReturns struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	listRunningSecGroupsReturnsOnCall map[int]struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	ListSecGroupsStub        func() ([]cfclient.SecGroup, error)
	listSecGroupsMutex       sync.RWMutex
	listSecGroupsArgsForCall []struct {
	}
	listSecGroupsReturns struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	listSecGroupsReturnsOnCall map[int]struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	ListServiceBindingsStub        func() ([]cfclient.ServiceBinding, error)
	listServiceBindingsMutex       sync.RWMutex
	listServiceBindingsArgsForCall []struct {
	}
	listServiceBindingsReturns struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	listServiceBindingsReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	ListServiceBindingsByQueryStub        func(url.Values) ([]cfclient.ServiceBinding, error)
	listServiceBindingsByQueryMutex       sync.RWMutex
	listServiceBindingsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceBindingsByQueryReturns struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	listServiceBindingsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	ListServiceBrokersStub        func() ([]cfclient.ServiceBroker, error)
	listServiceBrokersMutex       sync.RWMutex
	listServiceBrokersArgsForCall []struct {
	}
	listServiceBrokersReturns struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	listServiceBrokersReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	ListServiceBrokersByQueryStub        func(url.Values) ([]cfclient.ServiceBroker, error)
	listServiceBrokersByQueryMutex       sync.RWMutex
	listServiceBrokersByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceBrokersByQueryReturns struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	listServiceBrokersByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	ListServiceInstancesStub        func() ([]cfclient.ServiceInstance, error)
	listServiceInstancesMutex       sync.RWMutex
	listServiceInstancesArgsForCall []struct {
	}
	listServiceInstancesReturns struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	listServiceInstancesReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	ListServiceInstancesByQueryStub        func(url.Values) ([]cfclient.ServiceInstance, error)
	listServiceInstancesByQueryMutex       sync.RWMutex
	listServiceInstancesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceInstancesByQueryReturns struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	listServiceInstancesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	ListServiceKeysStub        func() ([]cfclient.ServiceKey, error)
	listServiceKeysMutex       sync.RWMutex
	listServiceKeysArgsForCall []struct {
	}
	listServiceKeysReturns struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	listServiceKeysReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	ListServiceKeysByQueryStub        func(url.Values) ([]cfclient.ServiceKey, error)
	listServiceKeysByQueryMutex       sync.RWMutex
	listServiceKeysByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceKeysByQueryReturns struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	listServiceKeysByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	ListServicePlanVisibilitiesStub        func() ([]cfclient.ServicePlanVisibility, error)
	listServicePlanVisibilitiesMutex       sync.RWMutex
	listServicePlanVisibilitiesArgsForCall []struct {
	}
	listServicePlanVisibilitiesReturns struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	listServicePlanVisibilitiesReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	ListServicePlanVisibilitiesByQueryStub        func(url.Values) ([]cfclient.ServicePlanVisibility, error)
	listServicePlanVisibilitiesByQueryMutex       sync.RWMutex
	listServicePlanVisibilitiesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicePlanVisibilitiesByQueryReturns struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	listServicePlanVisibilitiesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	ListServicePlansStub        func() ([]cfclient.ServicePlan, error)
	listServicePlansMutex       sync.RWMutex
	listServicePlansArgsForCall []struct {
	}
	listServicePlansReturns struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	listServicePlansReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	ListServicePlansByQueryStub        func(url.Values) ([]cfclient.ServicePlan, error)
	listServicePlansByQueryMutex       sync.RWMutex
	listServicePlansByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicePlansByQueryReturns struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	listServicePlansByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	ListServiceUsageEventsStub        func() ([]cfclient.ServiceUsageEvent, error)
	listServiceUsageEventsMutex       sync.RWMutex
	listServiceUsageEventsArgsForCall []struct {
	}
	listServiceUsageEventsReturns struct {
		result1 []cfclient.ServiceUsageEvent
		result2 error
	}
	listServiceUsageEventsReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceUsageEvent
		result2 error
	}
	ListServiceUsageEventsByQueryStub        func(url.Values) ([]cfclient.ServiceUsageEvent, error)
	listServiceUsageEventsByQueryMutex       sync.RWMutex
	listServiceUsageEventsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceUsageEventsByQueryReturns struct {
		result1 []cfclient.ServiceUsageEvent
		result2 error
	}
	listServiceUsageEventsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceUsageEvent
		result2 error
	}
	ListServicesStub        func() ([]cfclient.Service, error)
	listServicesMutex       sync.RWMutex
	listServicesArgsForCall []struct {
	}
	listServicesReturns struct {
		result1 []cfclient.Service
		result2 error
	}
	listServicesReturnsOnCall map[int]struct {
		result1 []cfclient.Service
		result2 error
	}
	ListServicesByQueryStub        func(url.Values) ([]cfclient.Service, error)
	listServicesByQueryMutex       sync.RWMutex
	listServicesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicesByQueryReturns struct {
		result1 []cfclient.Service
		result2 error
	}
	listServicesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Service
		result2 error
	}
	ListSharedDomainsStub        func() ([]cfclient.SharedDomain, error)
	listSharedDomainsMutex       sync.RWMutex
	listSharedDomainsArgsForCall []struct {
	}
	listSharedDomainsReturns struct {
		result1 []cfclient.SharedDomain
		result2 error
	}
	listSharedDomainsReturnsOnCall map[int]struct {
		result1 []cfclient.SharedDomain
		result2 error
	}
	ListSharedDomainsByQueryStub        func(url.Values) ([]cfclient.SharedDomain, error)
	listSharedDomainsByQueryMutex       sync.RWMutex
	listSharedDomainsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listSharedDomainsByQueryReturns struct {
		result1 []cfclient.SharedDomain
		result2 error
	}
	listSharedDomainsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.SharedDomain
		result2 error
	}
	ListSpaceAuditorsStub        func(string) ([]cfclient.User, error)
	listSpaceAuditorsMutex       sync.RWMutex
	listSpaceAuditorsArgsForCall []struct {
		arg1 string
	}
	listSpaceAuditorsReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listSpaceAuditorsReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListSpaceAuditorsByQueryStub        func(string, url.Values) ([]cfclient.User, error)
	listSpaceAuditorsByQueryMutex       sync.RWMutex
	listSpaceAuditorsByQueryArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	listSpaceAuditorsByQueryReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listSpaceAuditorsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListSpaceDevelopersStub        func(string) ([]cfclient.User, error)
	listSpaceDevelopersMutex       sync.RWMutex
	listSpaceDevelopersArgsForCall []struct {
		arg1 string
	}
	listSpaceDevelopersReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listSpaceDevelopersReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListSpaceDevelopersByQueryStub        func(string, url.Values) ([]cfclient.User, error)
	listSpaceDevelopersByQueryMutex       sync.RWMutex
	listSpaceDevelopersByQueryArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	listSpaceDevelopersByQueryReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listSpaceDevelopersByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListSpaceManagersStub        func(string) ([]cfclient.User, error)
	listSpaceManagersMutex       sync.RWMutex
	listSpaceManagersArgsForCall []struct {
		arg1 string
	}
	listSpaceManagersReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listSpaceManagersReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListSpaceManagersByQueryStub        func(string, url.Values) ([]cfclient.User, error)
	listSpaceManagersByQueryMutex       sync.RWMutex
	listSpaceManagersByQueryArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	listSpaceManagersByQueryReturns struct {
		result1 []cfclient.User
		result2 error
	}
	listSpaceManagersByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.User
		result2 error
	}
	ListSpaceQuotasStub        func() ([]cfclient.SpaceQuota, error)
	listSpaceQuotasMutex       sync.RWMutex
	listSpaceQuotasArgsForCall []struct {
	}
	listSpaceQuotasReturns struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	listSpaceQuotasReturnsOnCall map[int]struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	ListSpaceQuotasByQueryStub        func(url.Values) ([]cfclient.SpaceQuota, error)
	listSpaceQuotasByQueryMutex       sync.RWMutex
	listSpaceQuotasByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listSpaceQuotasByQueryReturns struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	listSpaceQuotasByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	ListSpaceSecGroupsStub        func(string) ([]cfclient.SecGroup, error)
	listSpaceSecGroupsMutex       sync.RWMutex
	listSpaceSecGroupsArgsForCall []struct {
		arg1 string
	}
	listSpaceSecGroupsReturns struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	listSpaceSecGroupsReturnsOnCall map[int]struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	ListSpacesStub        func() ([]cfclient.Space, error)
	listSpacesMutex       sync.RWMutex
	listSpacesArgsForCall []struct {
	}
	listSpacesReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	listSpacesReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListSpacesByQueryStub        func(url.Values) ([]cfclient.Space, error)
	listSpacesByQueryMutex       sync.RWMutex
	listSpacesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listSpacesByQueryReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	listSpacesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListStacksStub        func() ([]cfclient.Stack, error)
	listStacksMutex       sync.RWMutex
	listStacksArgsForCall []struct {
	}
	listStacksReturns struct {
		result1 []cfclient.Stack
		result2 error
	}
	listStacksReturnsOnCall map[int]struct {
		result1 []cfclient.Stack
		result2 error
	}
	ListStacksByQueryStub        func(url.Values) ([]cfclient.Stack, error)
	listStacksByQueryMutex       sync.RWMutex
	listStacksByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listStacksByQueryReturns struct {
		result1 []cfclient.Stack
		result2 error
	}
	listStacksByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Stack
		result2 error
	}
	ListStagingSecGroupsStub        func() ([]cfclient.SecGroup, error)
	listStagingSecGroupsMutex       sync.RWMutex
	listStagingSecGroupsArgsForCall []struct {
	}
	listStagingSecGroupsReturns struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	listStagingSecGroupsReturnsOnCall map[int]struct {
		result1 []cfclient.SecGroup
		result2 error
	}
	ListTasksStub        func() ([]cfclient.Task, error)
	listTasksMutex       sync.RWMutex
	listTasksArgsForCall []struct {
	}
	listTasksReturns struct {
		result1 []cfclient.Task
		result2 error
	}
	listTasksReturnsOnCall map[int]struct {
		result1 []cfclient.Task
		result2 error
	}
	ListTasksByQueryStub        func(url.Values) ([]cfclient.Task, error)
	listTasksByQueryMutex       sync.RWMutex
	listTasksByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listTasksByQueryReturns struct {
		result1 []cfclient.Task
		result2 error
	}
	listTasksByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Task
		result2 error
	}
	ListUserAuditedOrgsStub        func(string) ([]cfclient.Org, error)
	listUserAuditedOrgsMutex       sync.RWMutex
	listUserAuditedOrgsArgsForCall []struct {
		arg1 string
	}
	listUserAuditedOrgsReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listUserAuditedOrgsReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	ListUserAuditedSpacesStub        func(string) ([]cfclient.Space, error)
	listUserAuditedSpacesMutex       sync.RWMutex
	listUserAuditedSpacesArgsForCall []struct {
		arg1 string
	}
	listUserAuditedSpacesReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	listUserAuditedSpacesReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListUserBillingManagedOrgsStub        func(string) ([]cfclient.Org, error)
	listUserBillingManagedOrgsMutex       sync.RWMutex
	listUserBillingManagedOrgsArgsForCall []struct {
		arg1 string
	}
	listUserBillingManagedOrgsReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listUserBillingManagedOrgsReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	ListUserManagedOrgsStub        func(string) ([]cfclient.Org, error)
	listUserManagedOrgsMutex       sync.RWMutex
	listUserManagedOrgsArgsForCall []struct {
		arg1 string
	}
	listUserManagedOrgsReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listUserManagedOrgsReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	ListUserManagedSpacesStub        func(string) ([]cfclient.Space, error)
	listUserManagedSpacesMutex       sync.RWMutex
	listUserManagedSpacesArgsForCall []struct {
		arg1 string
	}
	listUserManagedSpacesReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	listUserManagedSpacesReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListUserOrgsStub        func(string) ([]cfclient.Org, error)
	listUserOrgsMutex       sync.RWMutex
	listUserOrgsArgsForCall []struct {
		arg1 string
	}
	listUserOrgsReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listUserOrgsReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	ListUserProvidedServiceInstancesStub        func() ([]cfclient.UserProvidedServiceInstance, error)
	listUserProvidedServiceInstancesMutex       sync.RWMutex
	listUserProvidedServiceInstancesArgsForCall []struct {
	}
	listUserProvidedServiceInstancesReturns struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}
	listUserProvidedServiceInstancesReturnsOnCall map[int]struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}
	ListUserProvidedServiceInstancesByQueryStub        func(url.Values) ([]cfclient.UserProvidedServiceInstance, error)
	listUserProvidedServiceInstancesByQueryMutex       sync.RWMutex
	listUserProvidedServiceInstancesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listUserProvidedServiceInstancesByQueryReturns struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}
	listUserProvidedServiceInstancesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}
	ListUserSpacesStub        func(string) ([]cfclient.Space, error)
	listUserSpacesMutex       sync.RWMutex
	listUserSpacesArgsForCall []struct {
		arg1 string
	}
	listUserSpacesReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	listUserSpacesReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListUsersStub        func() (cfclient.Users, error)
	listUsersMutex       sync.RWMutex
	listUsersArgsForCall []struct {
	}
	listUsersReturns struct {
		result1 cfclient.Users
		result2 error
	}
	listUsersReturnsOnCall map[int]struct {
		result1 cfclient.Users
		result2 error
	}
	ListUsersByQueryStub        func(url.Values) (cfclient.Users, error)
	listUsersByQueryMutex       sync.RWMutex
	listUsersByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listUsersByQueryReturns struct {
		result1 cfclient.Users
		result2 error
	}
	listUsersByQueryReturnsOnCall map[int]struct {
		result1 cfclient.Users
		result2 error
	}
	MakeServicePlanPrivateStub        func(string) error
	makeServicePlanPrivateMutex       sync.RWMutex
	makeServicePlanPrivateArgsForCall []struct {
		arg1 string
	}
	makeServicePlanPrivateReturns struct {
		result1 error
	}
	makeServicePlanPrivateReturnsOnCall map[int]struct {
		result1 error
	}
	MakeServicePlanPublicStub        func(string) error
	makeServicePlanPublicMutex       sync.RWMutex
	makeServicePlanPublicArgsForCall []struct {
		arg1 string
	}
	makeServicePlanPublicReturns struct {
		result1 error
	}
	makeServicePlanPublicReturnsOnCall map[int]struct {
		result1 error
	}
	MappingAppAndRouteStub        func(cfclient.RouteMappingRequest) (*cfclient.RouteMapping, error)
	mappingAppAndRouteMutex       sync.RWMutex
	mappingAppAndRouteArgsForCall []struct {
		arg1 cfclient.RouteMappingRequest
	}
	mappingAppAndRouteReturns struct {
		result1 *cfclient.RouteMapping
		result2 error
	}
	mappingAppAndRouteReturnsOnCall map[int]struct {
		result1 *cfclient.RouteMapping
		result2 error
	}
	NewRequestStub        func(string, string) *cfclient.Request
	newRequestMutex       sync.RWMutex
	newRequestArgsForCall []struct {
		arg1 string
		arg2 string
	}
	newRequestReturns struct {
		result1 *cfclient.Request
	}
	newRequestReturnsOnCall map[int]struct {
		result1 *cfclient.Request
	}
	NewRequestWithBodyStub        func(string, string, io.Reader) *cfclient.Request
	newRequestWithBodyMutex       sync.RWMutex
	newRequestWithBodyArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 io.Reader
	}
	newRequestWithBodyReturns struct {
		result1 *cfclient.Request
	}
	newRequestWithBodyReturnsOnCall map[int]struct {
		result1 *cfclient.Request
	}
	OrgSpacesStub        func(string) ([]cfclient.Space, error)
	orgSpacesMutex       sync.RWMutex
	orgSpacesArgsForCall []struct {
		arg1 string
	}
	orgSpacesReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	orgSpacesReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	RemoveIsolationSegmentFromOrgStub        func(string, string) error
	removeIsolationSegmentFromOrgMutex       sync.RWMutex
	removeIsolationSegmentFromOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeIsolationSegmentFromOrgReturns struct {
		result1 error
	}
	removeIsolationSegmentFromOrgReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveIsolationSegmentFromSpaceStub        func(string, string) error
	removeIsolationSegmentFromSpaceMutex       sync.RWMutex
	removeIsolationSegmentFromSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeIsolationSegmentFromSpaceReturns struct {
		result1 error
	}
	removeIsolationSegmentFromSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgAuditorStub        func(string, string) error
	removeOrgAuditorMutex       sync.RWMutex
	removeOrgAuditorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeOrgAuditorReturns struct {
		result1 error
	}
	removeOrgAuditorReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgAuditorByUsernameStub        func(string, string) error
	removeOrgAuditorByUsernameMutex       sync.RWMutex
	removeOrgAuditorByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeOrgAuditorByUsernameReturns struct {
		result1 error
	}
	removeOrgAuditorByUsernameReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgAuditorByUsernameAndOriginStub        func(string, string, string) error
	removeOrgAuditorByUsernameAndOriginMutex       sync.RWMutex
	removeOrgAuditorByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	removeOrgAuditorByUsernameAndOriginReturns struct {
		result1 error
	}
	removeOrgAuditorByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgBillingManagerStub        func(string, string) error
	removeOrgBillingManagerMutex       sync.RWMutex
	removeOrgBillingManagerArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeOrgBillingManagerReturns struct {
		result1 error
	}
	removeOrgBillingManagerReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgBillingManagerByUsernameStub        func(string, string) error
	removeOrgBillingManagerByUsernameMutex       sync.RWMutex
	removeOrgBillingManagerByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeOrgBillingManagerByUsernameReturns struct {
		result1 error
	}
	removeOrgBillingManagerByUsernameReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgBillingManagerByUsernameAndOriginStub        func(string, string, string) error
	removeOrgBillingManagerByUsernameAndOriginMutex       sync.RWMutex
	removeOrgBillingManagerByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	removeOrgBillingManagerByUsernameAndOriginReturns struct {
		result1 error
	}
	removeOrgBillingManagerByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgManagerStub        func(string, string) error
	removeOrgManagerMutex       sync.RWMutex
	removeOrgManagerArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeOrgManagerReturns struct {
		result1 error
	}
	removeOrgManagerReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgManagerByUsernameStub        func(string, string) error
	removeOrgManagerByUsernameMutex       sync.RWMutex
	removeOrgManagerByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeOrgManagerByUsernameReturns struct {
		result1 error
	}
	removeOrgManagerByUsernameReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgManagerByUsernameAndOriginStub        func(string, string, string) error
	removeOrgManagerByUsernameAndOriginMutex       sync.RWMutex
	removeOrgManagerByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	removeOrgManagerByUsernameAndOriginReturns struct {
		result1 error
	}
	removeOrgManagerByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgUserStub        func(string, string) error
	removeOrgUserMutex       sync.RWMutex
	removeOrgUserArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeOrgUserReturns struct {
		result1 error
	}
	removeOrgUserReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgUserByUsernameStub        func(string, string) error
	removeOrgUserByUsernameMutex       sync.RWMutex
	removeOrgUserByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeOrgUserByUsernameReturns struct {
		result1 error
	}
	removeOrgUserByUsernameReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveOrgUserByUsernameAndOriginStub        func(string, string, string) error
	removeOrgUserByUsernameAndOriginMutex       sync.RWMutex
	removeOrgUserByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	removeOrgUserByUsernameAndOriginReturns struct {
		result1 error
	}
	removeOrgUserByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceAuditorStub        func(string, string) error
	removeSpaceAuditorMutex       sync.RWMutex
	removeSpaceAuditorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeSpaceAuditorReturns struct {
		result1 error
	}
	removeSpaceAuditorReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceAuditorByUsernameStub        func(string, string) error
	removeSpaceAuditorByUsernameMutex       sync.RWMutex
	removeSpaceAuditorByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeSpaceAuditorByUsernameReturns struct {
		result1 error
	}
	removeSpaceAuditorByUsernameReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceAuditorByUsernameAndOriginStub        func(string, string, string) error
	removeSpaceAuditorByUsernameAndOriginMutex       sync.RWMutex
	removeSpaceAuditorByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	removeSpaceAuditorByUsernameAndOriginReturns struct {
		result1 error
	}
	removeSpaceAuditorByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceDeveloperStub        func(string, string) error
	removeSpaceDeveloperMutex       sync.RWMutex
	removeSpaceDeveloperArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeSpaceDeveloperReturns struct {
		result1 error
	}
	removeSpaceDeveloperReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceDeveloperByUsernameStub        func(string, string) error
	removeSpaceDeveloperByUsernameMutex       sync.RWMutex
	removeSpaceDeveloperByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeSpaceDeveloperByUsernameReturns struct {
		result1 error
	}
	removeSpaceDeveloperByUsernameReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceDeveloperByUsernameAndOriginStub        func(string, string, string) error
	removeSpaceDeveloperByUsernameAndOriginMutex       sync.RWMutex
	removeSpaceDeveloperByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	removeSpaceDeveloperByUsernameAndOriginReturns struct {
		result1 error
	}
	removeSpaceDeveloperByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceManagerStub        func(string, string) error
	removeSpaceManagerMutex       sync.RWMutex
	removeSpaceManagerArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeSpaceManagerReturns struct {
		result1 error
	}
	removeSpaceManagerReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceManagerByUsernameStub        func(string, string) error
	removeSpaceManagerByUsernameMutex       sync.RWMutex
	removeSpaceManagerByUsernameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeSpaceManagerByUsernameReturns struct {
		result1 error
	}
	removeSpaceManagerByUsernameReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveSpaceManagerByUsernameAndOriginStub        func(string, string, string) error
	removeSpaceManagerByUsernameAndOriginMutex       sync.RWMutex
	removeSpaceManagerByUsernameAndOriginArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	removeSpaceManagerByUsernameAndOriginReturns struct {
		result1 error
	}
	removeSpaceManagerByUsernameAndOriginReturnsOnCall map[int]struct {
		result1 error
	}
	ResetDefaultIsolationSegmentForOrgStub        func(string) error
	resetDefaultIsolationSegmentForOrgMutex       sync.RWMutex
	resetDefaultIsolationSegmentForOrgArgsForCall []struct {
		arg1 string
	}
	resetDefaultIsolationSegmentForOrgReturns struct {
		result1 error
	}
	resetDefaultIsolationSegmentForOrgReturnsOnCall map[int]struct {
		result1 error
	}
	ResetIsolationSegmentForSpaceStub        func(string) error
	resetIsolationSegmentForSpaceMutex       sync.RWMutex
	resetIsolationSegmentForSpaceArgsForCall []struct {
		arg1 string
	}
	resetIsolationSegmentForSpaceReturns struct {
		result1 error
	}
	resetIsolationSegmentForSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	ServiceBindingByGuidStub        func(string) (cfclient.ServiceBinding, error)
	serviceBindingByGuidMutex       sync.RWMutex
	serviceBindingByGuidArgsForCall []struct {
		arg1 string
	}
	serviceBindingByGuidReturns struct {
		result1 cfclient.ServiceBinding
		result2 error
	}
	serviceBindingByGuidReturnsOnCall map[int]struct {
		result1 cfclient.ServiceBinding
		result2 error
	}
	ServiceInstanceByGuidStub        func(string) (cfclient.ServiceInstance, error)
	serviceInstanceByGuidMutex       sync.RWMutex
	serviceInstanceByGuidArgsForCall []struct {
		arg1 string
	}
	serviceInstanceByGuidReturns struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	serviceInstanceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	SetRunningEnvironmentVariableGroupStub        func(cfclient.EnvironmentVariableGroup) error
	setRunningEnvironmentVariableGroupMutex       sync.RWMutex
	setRunningEnvironmentVariableGroupArgsForCall []struct {
		arg1 cfclient.EnvironmentVariableGroup
	}
	setRunningEnvironmentVariableGroupReturns struct {
		result1 error
	}
	setRunningEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 error
	}
	SetStagingEnvironmentVariableGroupStub        func(cfclient.EnvironmentVariableGroup) error
	setStagingEnvironmentVariableGroupMutex       sync.RWMutex
	setStagingEnvironmentVariableGroupArgsForCall []struct {
		arg1 cfclient.EnvironmentVariableGroup
	}
	setStagingEnvironmentVariableGroupReturns struct {
		result1 error
	}
	setStagingEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 error
	}
	ShareOrgPrivateDomainStub        func(string, string) (*cfclient.Domain, error)
	shareOrgPrivateDomainMutex       sync.RWMutex
	shareOrgPrivateDomainArgsForCall []struct {
		arg1 string
		arg2 string
	}
	shareOrgPrivateDomainReturns struct {
		result1 *cfclient.Domain
		result2 error
	}
	shareOrgPrivateDomainReturnsOnCall map[int]struct {
		result1 *cfclient.Domain
		result2 error
	}
	StartAppStub        func(string) error
	startAppMutex       sync.RWMutex
	startAppArgsForCall []struct {
		arg1 string
	}
	startAppReturns struct {
		result1 error
	}
	startAppReturnsOnCall map[int]struct {
		result1 error
	}
	StopAppStub        func(string) error
	stopAppMutex       sync.RWMutex
	stopAppArgsForCall []struct {
		arg1 string
	}
	stopAppReturns struct {
		result1 error
	}
	stopAppReturnsOnCall map[int]struct {
		result1 error
	}
	TaskByGuidStub        func(string) (cfclient.Task, error)
	taskByGuidMutex       sync.RWMutex
	taskByGuidArgsForCall []struct {
		arg1 string
	}
	taskByGuidReturns struct {
		result1 cfclient.Task
		result2 error
	}
	taskByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Task
		result2 error
	}
	TasksByAppStub        func(string) ([]cfclient.Task, error)
	tasksByAppMutex       sync.RWMutex
	tasksByAppArgsForCall []struct {
		arg1 string
	}
	tasksByAppReturns struct {
		result1 []cfclient.Task
		result2 error
	}
	tasksByAppReturnsOnCall map[int]struct {
		result1 []cfclient.Task
		result2 error
	}
	TasksByAppByQueryStub        func(string, url.Values) ([]cfclient.Task, error)
	tasksByAppByQueryMutex       sync.RWMutex
	tasksByAppByQueryArgsForCall []struct {
		arg1 string
		arg2 url.Values
	}
	tasksByAppByQueryReturns struct {
		result1 []cfclient.Task
		result2 error
	}
	tasksByAppByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Task
		result2 error
	}
	TerminateTaskStub        func(string) error
	terminateTaskMutex       sync.RWMutex
	terminateTaskArgsForCall []struct {
		arg1 string
	}
	terminateTaskReturns struct {
		result1 error
	}
	terminateTaskReturnsOnCall map[int]struct {
		result1 error
	}
	TotalEventsStub        func() (int, error)
	totalEventsMutex       sync.RWMutex
	totalEventsArgsForCall []struct {
	}
	totalEventsReturns struct {
		result1 int
		result2 error
	}
	totalEventsReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	TotalEventsByQueryStub        func(url.Values) (int, error)
	totalEventsByQueryMutex       sync.RWMutex
	totalEventsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	totalEventsByQueryReturns struct {
		result1 int
		result2 error
	}
	totalEventsByQueryReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	UnbindRunningSecGroupStub        func(string) error
	unbindRunningSecGroupMutex       sync.RWMutex
	unbindRunningSecGroupArgsForCall []struct {
		arg1 string
	}
	unbindRunningSecGroupReturns struct {
		result1 error
	}
	unbindRunningSecGroupReturnsOnCall map[int]struct {
		result1 error
	}
	UnbindSecGroupStub        func(string, string) error
	unbindSecGroupMutex       sync.RWMutex
	unbindSecGroupArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unbindSecGroupReturns struct {
		result1 error
	}
	unbindSecGroupReturnsOnCall map[int]struct {
		result1 error
	}
	UnbindStagingSecGroupStub        func(string) error
	unbindStagingSecGroupMutex       sync.RWMutex
	unbindStagingSecGroupArgsForCall []struct {
		arg1 string
	}
	unbindStagingSecGroupReturns struct {
		result1 error
	}
	unbindStagingSecGroupReturnsOnCall map[int]struct {
		result1 error
	}
	UnshareOrgPrivateDomainStub        func(string, string) error
	unshareOrgPrivateDomainMutex       sync.RWMutex
	unshareOrgPrivateDomainArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unshareOrgPrivateDomainReturns struct {
		result1 error
	}
	unshareOrgPrivateDomainReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateAppStub        func(string, cfclient.AppUpdateResource) (cfclient.UpdateResponse, error)
	updateAppMutex       sync.RWMutex
	updateAppArgsForCall []struct {
		arg1 string
		arg2 cfclient.AppUpdateResource
	}
	updateAppReturns struct {
		result1 cfclient.UpdateResponse
		result2 error
	}
	updateAppReturnsOnCall map[int]struct {
		result1 cfclient.UpdateResponse
		result2 error
	}
	UpdateOrgStub        func(string, cfclient.OrgRequest) (cfclient.Org, error)
	updateOrgMutex       sync.RWMutex
	updateOrgArgsForCall []struct {
		arg1 string
		arg2 cfclient.OrgRequest
	}
	updateOrgReturns struct {
		result1 cfclient.Org
		result2 error
	}
	updateOrgReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	UpdateOrgQuotaStub        func(string, cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error)
	updateOrgQuotaMutex       sync.RWMutex
	updateOrgQuotaArgsForCall []struct {
		arg1 string
		arg2 cfclient.OrgQuotaRequest
	}
	updateOrgQuotaReturns struct {
		result1 *cfclient.OrgQuota
		result2 error
	}
	updateOrgQuotaReturnsOnCall map[int]struct {
		result1 *cfclient.OrgQuota
		result2 error
	}
	UpdateSecGroupStub        func(string, string, []cfclient.SecGroupRule, []string) (*cfclient.SecGroup, error)
	updateSecGroupMutex       sync.RWMutex
	updateSecGroupArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []cfclient.SecGroupRule
		arg4 []string
	}
	updateSecGroupReturns struct {
		result1 *cfclient.SecGroup
		result2 error
	}
	updateSecGroupReturnsOnCall map[int]struct {
		result1 *cfclient.SecGroup
		result2 error
	}
	UpdateServiceBrokerStub        func(string, cfclient.UpdateServiceBrokerRequest) (cfclient.ServiceBroker, error)
	updateServiceBrokerMutex       sync.RWMutex
	updateServiceBrokerArgsForCall []struct {
		arg1 string
		arg2 cfclient.UpdateServiceBrokerRequest
	}
	updateServiceBrokerReturns struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	updateServiceBrokerReturnsOnCall map[int]struct {
		result1 cfclient.ServiceBroker
		result2 error
	}
	UpdateServiceInstanceStub        func(string, io.Reader, bool) error
	updateServiceInstanceMutex       sync.RWMutex
	updateServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 io.Reader
		arg3 bool
	}
	updateServiceInstanceReturns struct {
		result1 error
	}
	updateServiceInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateServicePlanVisibilityStub        func(string, string, string) (cfclient.ServicePlanVisibility, error)
	updateServicePlanVisibilityMutex       sync.RWMutex
	updateServicePlanVisibilityArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	updateServicePlanVisibilityReturns struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	updateServicePlanVisibilityReturnsOnCall map[int]struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	UpdateSpaceStub        func(string, cfclient.SpaceRequest) (cfclient.Space, error)
	updateSpaceMutex       sync.RWMutex
	updateSpaceArgsForCall []struct {
		arg1 string
		arg2 cfclient.SpaceRequest
	}
	updateSpaceReturns struct {
		result1 cfclient.Space
		result2 error
	}
	updateSpaceReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	UpdateSpaceQuotaStub        func(string, cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error)
	updateSpaceQuotaMutex       sync.RWMutex
	updateSpaceQuotaArgsForCall []struct {
		arg1 string
		arg2 cfclient.SpaceQuotaRequest
	}
	updateSpaceQuotaReturns struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}
	updateSpaceQuotaReturnsOnCall map[int]struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}
	UpdateUserProvidedServiceInstanceStub        func(string, cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error)
	updateUserProvidedServiceInstanceMutex       sync.RWMutex
	updateUserProvidedServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 cfclient.UserProvidedServiceInstanceRequest
	}
	updateUserProvidedServiceInstanceReturns struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}
	updateUserProvidedServiceInstanceReturnsOnCall map[int]struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}
	UploadAppBitsStub        func(io.Reader, string) error
	uploadAppBitsMutex       sync.RWMutex
	uploadAppBitsArgsForCall []struct {
		arg1 io.Reader
		arg2 string
	}
	uploadAppBitsReturns struct {
		result1 error
	}
	uploadAppBitsReturnsOnCall map[int]struct {
		result1 error
	}
	UserProvidedServiceInstanceByGuidStub        func(string) (cfclient.UserProvidedServiceInstance, error)
	userProvidedServiceInstanceByGuidMutex       sync.RWMutex
	userProvidedServiceInstanceByGuidArgsForCall []struct {
		arg1 string
	}
	userProvidedServiceInstanceByGuidReturns struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}
	userProvidedServiceInstanceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) AddIsolationSegmentToOrg(arg1 string, arg2 string) error {
	fake.addIsolationSegmentToOrgMutex.Lock()
	ret, specificReturn := fake.addIsolationSegmentToOrgReturnsOnCall[len(fake.addIsolationSegmentToOrgArgsForCall)]
	fake.addIsolationSegmentToOrgArgsForCall = append(fake.addIsolationSegmentToOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AddIsolationSegmentToOrg", []interface{}{arg1, arg2})
	fake.addIsolationSegmentToOrgMutex.Unlock()
	if fake.AddIsolationSegmentToOrgStub != nil {
		return fake.AddIsolationSegmentToOrgStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addIsolationSegmentToOrgReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgCallCount() int {
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	return len(fake.addIsolationSegmentToOrgArgsForCall)
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgCalls(stub func(string, string) error) {
	fake.addIsolationSegmentToOrgMutex.Lock()
	defer fake.addIsolationSegmentToOrgMutex.Unlock()
	fake.AddIsolationSegmentToOrgStub = stub
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgArgsForCall(i int) (string, string) {
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	argsForCall := fake.addIsolationSegmentToOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgReturns(result1 error) {
	fake.addIsolationSegmentToOrgMutex.Lock()
	defer fake.addIsolationSegmentToOrgMutex.Unlock()
	fake.AddIsolationSegmentToOrgStub = nil
	fake.addIsolationSegmentToOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgReturnsOnCall(i int, result1 error) {
	fake.addIsolationSegmentToOrgMutex.Lock()
	defer fake.addIsolationSegmentToOrgMutex.Unlock()
	fake.AddIsolationSegmentToOrgStub = nil
	if fake.addIsolationSegmentToOrgReturnsOnCall == nil {
		fake.addIsolationSegmentToOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addIsolationSegmentToOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AddIsolationSegmentToSpace(arg1 string, arg2 string) error {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	ret, specificReturn := fake.addIsolationSegmentToSpaceReturnsOnCall[len(fake.addIsolationSegmentToSpaceArgsForCall)]
	fake.addIsolationSegmentToSpaceArgsForCall = append(fake.addIsolationSegmentToSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AddIsolationSegmentToSpace", []interface{}{arg1, arg2})
	fake.addIsolationSegmentToSpaceMutex.Unlock()
	if fake.AddIsolationSegmentToSpaceStub != nil {
		return fake.AddIsolationSegmentToSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addIsolationSegmentToSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceCallCount() int {
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	return len(fake.addIsolationSegmentToSpaceArgsForCall)
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceCalls(stub func(string, string) error) {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	defer fake.addIsolationSegmentToSpaceMutex.Unlock()
	fake.AddIsolationSegmentToSpaceStub = stub
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceArgsForCall(i int) (string, string) {
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	argsForCall := fake.addIsolationSegmentToSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceReturns(result1 error) {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	defer fake.addIsolationSegmentToSpaceMutex.Unlock()
	fake.AddIsolationSegmentToSpaceStub = nil
	fake.addIsolationSegmentToSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceReturnsOnCall(i int, result1 error) {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	defer fake.addIsolationSegmentToSpaceMutex.Unlock()
	fake.AddIsolationSegmentToSpaceStub = nil
	if fake.addIsolationSegmentToSpaceReturnsOnCall == nil {
		fake.addIsolationSegmentToSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addIsolationSegmentToSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AppByGuid(arg1 string) (cfclient.App, error) {
	fake.appByGuidMutex.Lock()
	ret, specificReturn := fake.appByGuidReturnsOnCall[len(fake.appByGuidArgsForCall)]
	fake.appByGuidArgsForCall = append(fake.appByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("AppByGuid", []interface{}{arg1})
	fake.appByGuidMutex.Unlock()
	if fake.AppByGuidStub != nil {
		return fake.AppByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.appByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AppByGuidCallCount() int {
	fake.appByGuidMutex.RLock()
	defer fake.appByGuidMutex.RUnlock()
	return len(fake.appByGuidArgsForCall)
}

func (fake *FakeCFClient) AppByGuidCalls(stub func(string) (cfclient.App, error)) {
	fake.appByGuidMutex.Lock()
	defer fake.appByGuidMutex.Unlock()
	fake.AppByGuidStub = stub
}

func (fake *FakeCFClient) AppByGuidArgsForCall(i int) string {
	fake.appByGuidMutex.RLock()
	defer fake.appByGuidMutex.RUnlock()
	argsForCall := fake.appByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) AppByGuidReturns(result1 cfclient.App, result2 error) {
	fake.appByGuidMutex.Lock()
	defer fake.appByGuidMutex.Unlock()
	fake.AppByGuidStub = nil
	fake.appByGuidReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AppByGuidReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.appByGuidMutex.Lock()
	defer fake.appByGuidMutex.Unlock()
	fake.AppByGuidStub = nil
	if fake.appByGuidReturnsOnCall == nil {
		fake.appByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.appByGuidReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AppByName(arg1 string, arg2 string, arg3 string) (cfclient.App, error) {
	fake.appByNameMutex.Lock()
	ret, specificReturn := fake.appByNameReturnsOnCall[len(fake.appByNameArgsForCall)]
	fake.appByNameArgsForCall = append(fake.appByNameArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AppByName", []interface{}{arg1, arg2, arg3})
	fake.appByNameMutex.Unlock()
	if fake.AppByNameStub != nil {
		return fake.AppByNameStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.appByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AppByNameCallCount() int {
	fake.appByNameMutex.RLock()
	defer fake.appByNameMutex.RUnlock()
	return len(fake.appByNameArgsForCall)
}

func (fake *FakeCFClient) AppByNameCalls(stub func(string, string, string) (cfclient.App, error)) {
	fake.appByNameMutex.Lock()
	defer fake.appByNameMutex.Unlock()
	fake.AppByNameStub = stub
}

func (fake *FakeCFClient) AppByNameArgsForCall(i int) (string, string, string) {
	fake.appByNameMutex.RLock()
	defer fake.appByNameMutex.RUnlock()
	argsForCall := fake.appByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) AppByNameReturns(result1 cfclient.App, result2 error) {
	fake.appByNameMutex.Lock()
	defer fake.appByNameMutex.Unlock()
	fake.AppByNameStub = nil
	fake.appByNameReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AppByNameReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.appByNameMutex.Lock()
	defer fake.appByNameMutex.Unlock()
	fake.AppByNameStub = nil
	if fake.appByNameReturnsOnCall == nil {
		fake.appByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.appByNameReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssignSpaceQuota(arg1 string, arg2 string) error {
	fake.assignSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.assignSpaceQuotaReturnsOnCall[len(fake.assignSpaceQuotaArgsForCall)]
	fake.assignSpaceQuotaArgsForCall = append(fake.assignSpaceQuotaArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssignSpaceQuota", []interface{}{arg1, arg2})
	fake.assignSpaceQuotaMutex.Unlock()
	if fake.AssignSpaceQuotaStub != nil {
		return fake.AssignSpaceQuotaStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.assignSpaceQuotaReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) AssignSpaceQuotaCallCount() int {
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	return len(fake.assignSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) AssignSpaceQuotaCalls(stub func(string, string) error) {
	fake.assignSpaceQuotaMutex.Lock()
	defer fake.assignSpaceQuotaMutex.Unlock()
	fake.AssignSpaceQuotaStub = stub
}

func (fake *FakeCFClient) AssignSpaceQuotaArgsForCall(i int) (string, string) {
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	argsForCall := fake.assignSpaceQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssignSpaceQuotaReturns(result1 error) {
	fake.assignSpaceQuotaMutex.Lock()
	defer fake.assignSpaceQuotaMutex.Unlock()
	fake.AssignSpaceQuotaStub = nil
	fake.assignSpaceQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AssignSpaceQuotaReturnsOnCall(i int, result1 error) {
	fake.assignSpaceQuotaMutex.Lock()
	defer fake.assignSpaceQuotaMutex.Unlock()
	fake.AssignSpaceQuotaStub = nil
	if fake.assignSpaceQuotaReturnsOnCall == nil {
		fake.assignSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assignSpaceQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AssociateOrgAuditor(arg1 string, arg2 string) (cfclient.Org, error) {
	fake.associateOrgAuditorMutex.Lock()
	ret, specificReturn := fake.associateOrgAuditorReturnsOnCall[len(fake.associateOrgAuditorArgsForCall)]
	fake.associateOrgAuditorArgsForCall = append(fake.associateOrgAuditorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateOrgAuditor", []interface{}{arg1, arg2})
	fake.associateOrgAuditorMutex.Unlock()
	if fake.AssociateOrgAuditorStub != nil {
		return fake.AssociateOrgAuditorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgAuditorReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgAuditorCallCount() int {
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	return len(fake.associateOrgAuditorArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgAuditorCalls(stub func(string, string) (cfclient.Org, error)) {
	fake.associateOrgAuditorMutex.Lock()
	defer fake.associateOrgAuditorMutex.Unlock()
	fake.AssociateOrgAuditorStub = stub
}

func (fake *FakeCFClient) AssociateOrgAuditorArgsForCall(i int) (string, string) {
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	argsForCall := fake.associateOrgAuditorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateOrgAuditorReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgAuditorMutex.Lock()
	defer fake.associateOrgAuditorMutex.Unlock()
	fake.AssociateOrgAuditorStub = nil
	fake.associateOrgAuditorReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgAuditorReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgAuditorMutex.Lock()
	defer fake.associateOrgAuditorMutex.Unlock()
	fake.AssociateOrgAuditorStub = nil
	if fake.associateOrgAuditorReturnsOnCall == nil {
		fake.associateOrgAuditorReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgAuditorReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsername(arg1 string, arg2 string) (cfclient.Org, error) {
	fake.associateOrgAuditorByUsernameMutex.Lock()
	ret, specificReturn := fake.associateOrgAuditorByUsernameReturnsOnCall[len(fake.associateOrgAuditorByUsernameArgsForCall)]
	fake.associateOrgAuditorByUsernameArgsForCall = append(fake.associateOrgAuditorByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateOrgAuditorByUsername", []interface{}{arg1, arg2})
	fake.associateOrgAuditorByUsernameMutex.Unlock()
	if fake.AssociateOrgAuditorByUsernameStub != nil {
		return fake.AssociateOrgAuditorByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgAuditorByUsernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameCallCount() int {
	fake.associateOrgAuditorByUsernameMutex.RLock()
	defer fake.associateOrgAuditorByUsernameMutex.RUnlock()
	return len(fake.associateOrgAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameCalls(stub func(string, string) (cfclient.Org, error)) {
	fake.associateOrgAuditorByUsernameMutex.Lock()
	defer fake.associateOrgAuditorByUsernameMutex.Unlock()
	fake.AssociateOrgAuditorByUsernameStub = stub
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgAuditorByUsernameMutex.RLock()
	defer fake.associateOrgAuditorByUsernameMutex.RUnlock()
	argsForCall := fake.associateOrgAuditorByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgAuditorByUsernameMutex.Lock()
	defer fake.associateOrgAuditorByUsernameMutex.Unlock()
	fake.AssociateOrgAuditorByUsernameStub = nil
	fake.associateOrgAuditorByUsernameReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgAuditorByUsernameMutex.Lock()
	defer fake.associateOrgAuditorByUsernameMutex.Unlock()
	fake.AssociateOrgAuditorByUsernameStub = nil
	if fake.associateOrgAuditorByUsernameReturnsOnCall == nil {
		fake.associateOrgAuditorByUsernameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgAuditorByUsernameReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) (cfclient.Org, error) {
	fake.associateOrgAuditorByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.associateOrgAuditorByUsernameAndOriginReturnsOnCall[len(fake.associateOrgAuditorByUsernameAndOriginArgsForCall)]
	fake.associateOrgAuditorByUsernameAndOriginArgsForCall = append(fake.associateOrgAuditorByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateOrgAuditorByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.associateOrgAuditorByUsernameAndOriginMutex.Unlock()
	if fake.AssociateOrgAuditorByUsernameAndOriginStub != nil {
		return fake.AssociateOrgAuditorByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgAuditorByUsernameAndOriginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOriginCallCount() int {
	fake.associateOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateOrgAuditorByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOriginCalls(stub func(string, string, string) (cfclient.Org, error)) {
	fake.associateOrgAuditorByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgAuditorByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.associateOrgAuditorByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOriginReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgAuditorByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgAuditorByUsernameAndOriginStub = nil
	fake.associateOrgAuditorByUsernameAndOriginReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgAuditorByUsernameAndOriginReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgAuditorByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgAuditorByUsernameAndOriginStub = nil
	if fake.associateOrgAuditorByUsernameAndOriginReturnsOnCall == nil {
		fake.associateOrgAuditorByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgAuditorByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManager(arg1 string, arg2 string) (cfclient.Org, error) {
	fake.associateOrgBillingManagerMutex.Lock()
	ret, specificReturn := fake.associateOrgBillingManagerReturnsOnCall[len(fake.associateOrgBillingManagerArgsForCall)]
	fake.associateOrgBillingManagerArgsForCall = append(fake.associateOrgBillingManagerArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateOrgBillingManager", []interface{}{arg1, arg2})
	fake.associateOrgBillingManagerMutex.Unlock()
	if fake.AssociateOrgBillingManagerStub != nil {
		return fake.AssociateOrgBillingManagerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgBillingManagerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgBillingManagerCallCount() int {
	fake.associateOrgBillingManagerMutex.RLock()
	defer fake.associateOrgBillingManagerMutex.RUnlock()
	return len(fake.associateOrgBillingManagerArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgBillingManagerCalls(stub func(string, string) (cfclient.Org, error)) {
	fake.associateOrgBillingManagerMutex.Lock()
	defer fake.associateOrgBillingManagerMutex.Unlock()
	fake.AssociateOrgBillingManagerStub = stub
}

func (fake *FakeCFClient) AssociateOrgBillingManagerArgsForCall(i int) (string, string) {
	fake.associateOrgBillingManagerMutex.RLock()
	defer fake.associateOrgBillingManagerMutex.RUnlock()
	argsForCall := fake.associateOrgBillingManagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateOrgBillingManagerReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgBillingManagerMutex.Lock()
	defer fake.associateOrgBillingManagerMutex.Unlock()
	fake.AssociateOrgBillingManagerStub = nil
	fake.associateOrgBillingManagerReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgBillingManagerMutex.Lock()
	defer fake.associateOrgBillingManagerMutex.Unlock()
	fake.AssociateOrgBillingManagerStub = nil
	if fake.associateOrgBillingManagerReturnsOnCall == nil {
		fake.associateOrgBillingManagerReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgBillingManagerReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsername(arg1 string, arg2 string) (cfclient.Org, error) {
	fake.associateOrgBillingManagerByUsernameMutex.Lock()
	ret, specificReturn := fake.associateOrgBillingManagerByUsernameReturnsOnCall[len(fake.associateOrgBillingManagerByUsernameArgsForCall)]
	fake.associateOrgBillingManagerByUsernameArgsForCall = append(fake.associateOrgBillingManagerByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateOrgBillingManagerByUsername", []interface{}{arg1, arg2})
	fake.associateOrgBillingManagerByUsernameMutex.Unlock()
	if fake.AssociateOrgBillingManagerByUsernameStub != nil {
		return fake.AssociateOrgBillingManagerByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgBillingManagerByUsernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameCallCount() int {
	fake.associateOrgBillingManagerByUsernameMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameMutex.RUnlock()
	return len(fake.associateOrgBillingManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameCalls(stub func(string, string) (cfclient.Org, error)) {
	fake.associateOrgBillingManagerByUsernameMutex.Lock()
	defer fake.associateOrgBillingManagerByUsernameMutex.Unlock()
	fake.AssociateOrgBillingManagerByUsernameStub = stub
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgBillingManagerByUsernameMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameMutex.RUnlock()
	argsForCall := fake.associateOrgBillingManagerByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgBillingManagerByUsernameMutex.Lock()
	defer fake.associateOrgBillingManagerByUsernameMutex.Unlock()
	fake.AssociateOrgBillingManagerByUsernameStub = nil
	fake.associateOrgBillingManagerByUsernameReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgBillingManagerByUsernameMutex.Lock()
	defer fake.associateOrgBillingManagerByUsernameMutex.Unlock()
	fake.AssociateOrgBillingManagerByUsernameStub = nil
	if fake.associateOrgBillingManagerByUsernameReturnsOnCall == nil {
		fake.associateOrgBillingManagerByUsernameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgBillingManagerByUsernameReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) (cfclient.Org, error) {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.associateOrgBillingManagerByUsernameAndOriginReturnsOnCall[len(fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall)]
	fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall = append(fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateOrgBillingManagerByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	if fake.AssociateOrgBillingManagerByUsernameAndOriginStub != nil {
		return fake.AssociateOrgBillingManagerByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgBillingManagerByUsernameAndOriginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOriginCallCount() int {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOriginCalls(stub func(string, string, string) (cfclient.Org, error)) {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgBillingManagerByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.associateOrgBillingManagerByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOriginReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgBillingManagerByUsernameAndOriginStub = nil
	fake.associateOrgBillingManagerByUsernameAndOriginReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgBillingManagerByUsernameAndOriginReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgBillingManagerByUsernameAndOriginStub = nil
	if fake.associateOrgBillingManagerByUsernameAndOriginReturnsOnCall == nil {
		fake.associateOrgBillingManagerByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgBillingManagerByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManager(arg1 string, arg2 string) (cfclient.Org, error) {
	fake.associateOrgManagerMutex.Lock()
	ret, specificReturn := fake.associateOrgManagerReturnsOnCall[len(fake.associateOrgManagerArgsForCall)]
	fake.associateOrgManagerArgsForCall = append(fake.associateOrgManagerArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateOrgManager", []interface{}{arg1, arg2})
	fake.associateOrgManagerMutex.Unlock()
	if fake.AssociateOrgManagerStub != nil {
		return fake.AssociateOrgManagerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgManagerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgManagerCallCount() int {
	fake.associateOrgManagerMutex.RLock()
	defer fake.associateOrgManagerMutex.RUnlock()
	return len(fake.associateOrgManagerArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgManagerCalls(stub func(string, string) (cfclient.Org, error)) {
	fake.associateOrgManagerMutex.Lock()
	defer fake.associateOrgManagerMutex.Unlock()
	fake.AssociateOrgManagerStub = stub
}

func (fake *FakeCFClient) AssociateOrgManagerArgsForCall(i int) (string, string) {
	fake.associateOrgManagerMutex.RLock()
	defer fake.associateOrgManagerMutex.RUnlock()
	argsForCall := fake.associateOrgManagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateOrgManagerReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgManagerMutex.Lock()
	defer fake.associateOrgManagerMutex.Unlock()
	fake.AssociateOrgManagerStub = nil
	fake.associateOrgManagerReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManagerReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgManagerMutex.Lock()
	defer fake.associateOrgManagerMutex.Unlock()
	fake.AssociateOrgManagerStub = nil
	if fake.associateOrgManagerReturnsOnCall == nil {
		fake.associateOrgManagerReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgManagerReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManagerByUsername(arg1 string, arg2 string) (cfclient.Org, error) {
	fake.associateOrgManagerByUsernameMutex.Lock()
	ret, specificReturn := fake.associateOrgManagerByUsernameReturnsOnCall[len(fake.associateOrgManagerByUsernameArgsForCall)]
	fake.associateOrgManagerByUsernameArgsForCall = append(fake.associateOrgManagerByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateOrgManagerByUsername", []interface{}{arg1, arg2})
	fake.associateOrgManagerByUsernameMutex.Unlock()
	if fake.AssociateOrgManagerByUsernameStub != nil {
		return fake.AssociateOrgManagerByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgManagerByUsernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameCallCount() int {
	fake.associateOrgManagerByUsernameMutex.RLock()
	defer fake.associateOrgManagerByUsernameMutex.RUnlock()
	return len(fake.associateOrgManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameCalls(stub func(string, string) (cfclient.Org, error)) {
	fake.associateOrgManagerByUsernameMutex.Lock()
	defer fake.associateOrgManagerByUsernameMutex.Unlock()
	fake.AssociateOrgManagerByUsernameStub = stub
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgManagerByUsernameMutex.RLock()
	defer fake.associateOrgManagerByUsernameMutex.RUnlock()
	argsForCall := fake.associateOrgManagerByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgManagerByUsernameMutex.Lock()
	defer fake.associateOrgManagerByUsernameMutex.Unlock()
	fake.AssociateOrgManagerByUsernameStub = nil
	fake.associateOrgManagerByUsernameReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgManagerByUsernameMutex.Lock()
	defer fake.associateOrgManagerByUsernameMutex.Unlock()
	fake.AssociateOrgManagerByUsernameStub = nil
	if fake.associateOrgManagerByUsernameReturnsOnCall == nil {
		fake.associateOrgManagerByUsernameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgManagerByUsernameReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) (cfclient.Org, error) {
	fake.associateOrgManagerByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.associateOrgManagerByUsernameAndOriginReturnsOnCall[len(fake.associateOrgManagerByUsernameAndOriginArgsForCall)]
	fake.associateOrgManagerByUsernameAndOriginArgsForCall = append(fake.associateOrgManagerByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateOrgManagerByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.associateOrgManagerByUsernameAndOriginMutex.Unlock()
	if fake.AssociateOrgManagerByUsernameAndOriginStub != nil {
		return fake.AssociateOrgManagerByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgManagerByUsernameAndOriginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOriginCallCount() int {
	fake.associateOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateOrgManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOriginCalls(stub func(string, string, string) (cfclient.Org, error)) {
	fake.associateOrgManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgManagerByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.associateOrgManagerByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOriginReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgManagerByUsernameAndOriginStub = nil
	fake.associateOrgManagerByUsernameAndOriginReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgManagerByUsernameAndOriginReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgManagerByUsernameAndOriginStub = nil
	if fake.associateOrgManagerByUsernameAndOriginReturnsOnCall == nil {
		fake.associateOrgManagerByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgManagerByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUser(arg1 string, arg2 string) (cfclient.Org, error) {
	fake.associateOrgUserMutex.Lock()
	ret, specificReturn := fake.associateOrgUserReturnsOnCall[len(fake.associateOrgUserArgsForCall)]
	fake.associateOrgUserArgsForCall = append(fake.associateOrgUserArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateOrgUser", []interface{}{arg1, arg2})
	fake.associateOrgUserMutex.Unlock()
	if fake.AssociateOrgUserStub != nil {
		return fake.AssociateOrgUserStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgUserCallCount() int {
	fake.associateOrgUserMutex.RLock()
	defer fake.associateOrgUserMutex.RUnlock()
	return len(fake.associateOrgUserArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgUserCalls(stub func(string, string) (cfclient.Org, error)) {
	fake.associateOrgUserMutex.Lock()
	defer fake.associateOrgUserMutex.Unlock()
	fake.AssociateOrgUserStub = stub
}

func (fake *FakeCFClient) AssociateOrgUserArgsForCall(i int) (string, string) {
	fake.associateOrgUserMutex.RLock()
	defer fake.associateOrgUserMutex.RUnlock()
	argsForCall := fake.associateOrgUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateOrgUserReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgUserMutex.Lock()
	defer fake.associateOrgUserMutex.Unlock()
	fake.AssociateOrgUserStub = nil
	fake.associateOrgUserReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUserReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgUserMutex.Lock()
	defer fake.associateOrgUserMutex.Unlock()
	fake.AssociateOrgUserStub = nil
	if fake.associateOrgUserReturnsOnCall == nil {
		fake.associateOrgUserReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgUserReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUserByUsername(arg1 string, arg2 string) (cfclient.Org, error) {
	fake.associateOrgUserByUsernameMutex.Lock()
	ret, specificReturn := fake.associateOrgUserByUsernameReturnsOnCall[len(fake.associateOrgUserByUsernameArgsForCall)]
	fake.associateOrgUserByUsernameArgsForCall = append(fake.associateOrgUserByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateOrgUserByUsername", []interface{}{arg1, arg2})
	fake.associateOrgUserByUsernameMutex.Unlock()
	if fake.AssociateOrgUserByUsernameStub != nil {
		return fake.AssociateOrgUserByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgUserByUsernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameCallCount() int {
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	return len(fake.associateOrgUserByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameCalls(stub func(string, string) (cfclient.Org, error)) {
	fake.associateOrgUserByUsernameMutex.Lock()
	defer fake.associateOrgUserByUsernameMutex.Unlock()
	fake.AssociateOrgUserByUsernameStub = stub
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameArgsForCall(i int) (string, string) {
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	argsForCall := fake.associateOrgUserByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgUserByUsernameMutex.Lock()
	defer fake.associateOrgUserByUsernameMutex.Unlock()
	fake.AssociateOrgUserByUsernameStub = nil
	fake.associateOrgUserByUsernameReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgUserByUsernameMutex.Lock()
	defer fake.associateOrgUserByUsernameMutex.Unlock()
	fake.AssociateOrgUserByUsernameStub = nil
	if fake.associateOrgUserByUsernameReturnsOnCall == nil {
		fake.associateOrgUserByUsernameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgUserByUsernameReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) (cfclient.Org, error) {
	fake.associateOrgUserByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.associateOrgUserByUsernameAndOriginReturnsOnCall[len(fake.associateOrgUserByUsernameAndOriginArgsForCall)]
	fake.associateOrgUserByUsernameAndOriginArgsForCall = append(fake.associateOrgUserByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateOrgUserByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.associateOrgUserByUsernameAndOriginMutex.Unlock()
	if fake.AssociateOrgUserByUsernameAndOriginStub != nil {
		return fake.AssociateOrgUserByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateOrgUserByUsernameAndOriginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOriginCallCount() int {
	fake.associateOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateOrgUserByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOriginCalls(stub func(string, string, string) (cfclient.Org, error)) {
	fake.associateOrgUserByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgUserByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.associateOrgUserByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOriginReturns(result1 cfclient.Org, result2 error) {
	fake.associateOrgUserByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgUserByUsernameAndOriginStub = nil
	fake.associateOrgUserByUsernameAndOriginReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateOrgUserByUsernameAndOriginReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.associateOrgUserByUsernameAndOriginMutex.Lock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.Unlock()
	fake.AssociateOrgUserByUsernameAndOriginStub = nil
	if fake.associateOrgUserByUsernameAndOriginReturnsOnCall == nil {
		fake.associateOrgUserByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.associateOrgUserByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditor(arg1 string, arg2 string) (cfclient.Space, error) {
	fake.associateSpaceAuditorMutex.Lock()
	ret, specificReturn := fake.associateSpaceAuditorReturnsOnCall[len(fake.associateSpaceAuditorArgsForCall)]
	fake.associateSpaceAuditorArgsForCall = append(fake.associateSpaceAuditorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateSpaceAuditor", []interface{}{arg1, arg2})
	fake.associateSpaceAuditorMutex.Unlock()
	if fake.AssociateSpaceAuditorStub != nil {
		return fake.AssociateSpaceAuditorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceAuditorReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceAuditorCallCount() int {
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	return len(fake.associateSpaceAuditorArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceAuditorCalls(stub func(string, string) (cfclient.Space, error)) {
	fake.associateSpaceAuditorMutex.Lock()
	defer fake.associateSpaceAuditorMutex.Unlock()
	fake.AssociateSpaceAuditorStub = stub
}

func (fake *FakeCFClient) AssociateSpaceAuditorArgsForCall(i int) (string, string) {
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	argsForCall := fake.associateSpaceAuditorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateSpaceAuditorReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceAuditorMutex.Lock()
	defer fake.associateSpaceAuditorMutex.Unlock()
	fake.AssociateSpaceAuditorStub = nil
	fake.associateSpaceAuditorReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditorReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceAuditorMutex.Lock()
	defer fake.associateSpaceAuditorMutex.Unlock()
	fake.AssociateSpaceAuditorStub = nil
	if fake.associateSpaceAuditorReturnsOnCall == nil {
		fake.associateSpaceAuditorReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceAuditorReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsername(arg1 string, arg2 string) (cfclient.Space, error) {
	fake.associateSpaceAuditorByUsernameMutex.Lock()
	ret, specificReturn := fake.associateSpaceAuditorByUsernameReturnsOnCall[len(fake.associateSpaceAuditorByUsernameArgsForCall)]
	fake.associateSpaceAuditorByUsernameArgsForCall = append(fake.associateSpaceAuditorByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateSpaceAuditorByUsername", []interface{}{arg1, arg2})
	fake.associateSpaceAuditorByUsernameMutex.Unlock()
	if fake.AssociateSpaceAuditorByUsernameStub != nil {
		return fake.AssociateSpaceAuditorByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceAuditorByUsernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameCallCount() int {
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	return len(fake.associateSpaceAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameCalls(stub func(string, string) (cfclient.Space, error)) {
	fake.associateSpaceAuditorByUsernameMutex.Lock()
	defer fake.associateSpaceAuditorByUsernameMutex.Unlock()
	fake.AssociateSpaceAuditorByUsernameStub = stub
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	argsForCall := fake.associateSpaceAuditorByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceAuditorByUsernameMutex.Lock()
	defer fake.associateSpaceAuditorByUsernameMutex.Unlock()
	fake.AssociateSpaceAuditorByUsernameStub = nil
	fake.associateSpaceAuditorByUsernameReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceAuditorByUsernameMutex.Lock()
	defer fake.associateSpaceAuditorByUsernameMutex.Unlock()
	fake.AssociateSpaceAuditorByUsernameStub = nil
	if fake.associateSpaceAuditorByUsernameReturnsOnCall == nil {
		fake.associateSpaceAuditorByUsernameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceAuditorByUsernameReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) (cfclient.Space, error) {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.associateSpaceAuditorByUsernameAndOriginReturnsOnCall[len(fake.associateSpaceAuditorByUsernameAndOriginArgsForCall)]
	fake.associateSpaceAuditorByUsernameAndOriginArgsForCall = append(fake.associateSpaceAuditorByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateSpaceAuditorByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.associateSpaceAuditorByUsernameAndOriginMutex.Unlock()
	if fake.AssociateSpaceAuditorByUsernameAndOriginStub != nil {
		return fake.AssociateSpaceAuditorByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceAuditorByUsernameAndOriginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOriginCallCount() int {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateSpaceAuditorByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOriginCalls(stub func(string, string, string) (cfclient.Space, error)) {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceAuditorByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.associateSpaceAuditorByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOriginReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceAuditorByUsernameAndOriginStub = nil
	fake.associateSpaceAuditorByUsernameAndOriginReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceAuditorByUsernameAndOriginReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceAuditorByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceAuditorByUsernameAndOriginStub = nil
	if fake.associateSpaceAuditorByUsernameAndOriginReturnsOnCall == nil {
		fake.associateSpaceAuditorByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceAuditorByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloper(arg1 string, arg2 string) (cfclient.Space, error) {
	fake.associateSpaceDeveloperMutex.Lock()
	ret, specificReturn := fake.associateSpaceDeveloperReturnsOnCall[len(fake.associateSpaceDeveloperArgsForCall)]
	fake.associateSpaceDeveloperArgsForCall = append(fake.associateSpaceDeveloperArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateSpaceDeveloper", []interface{}{arg1, arg2})
	fake.associateSpaceDeveloperMutex.Unlock()
	if fake.AssociateSpaceDeveloperStub != nil {
		return fake.AssociateSpaceDeveloperStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceDeveloperReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceDeveloperCallCount() int {
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	return len(fake.associateSpaceDeveloperArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceDeveloperCalls(stub func(string, string) (cfclient.Space, error)) {
	fake.associateSpaceDeveloperMutex.Lock()
	defer fake.associateSpaceDeveloperMutex.Unlock()
	fake.AssociateSpaceDeveloperStub = stub
}

func (fake *FakeCFClient) AssociateSpaceDeveloperArgsForCall(i int) (string, string) {
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	argsForCall := fake.associateSpaceDeveloperArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateSpaceDeveloperReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceDeveloperMutex.Lock()
	defer fake.associateSpaceDeveloperMutex.Unlock()
	fake.AssociateSpaceDeveloperStub = nil
	fake.associateSpaceDeveloperReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceDeveloperMutex.Lock()
	defer fake.associateSpaceDeveloperMutex.Unlock()
	fake.AssociateSpaceDeveloperStub = nil
	if fake.associateSpaceDeveloperReturnsOnCall == nil {
		fake.associateSpaceDeveloperReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceDeveloperReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsername(arg1 string, arg2 string) (cfclient.Space, error) {
	fake.associateSpaceDeveloperByUsernameMutex.Lock()
	ret, specificReturn := fake.associateSpaceDeveloperByUsernameReturnsOnCall[len(fake.associateSpaceDeveloperByUsernameArgsForCall)]
	fake.associateSpaceDeveloperByUsernameArgsForCall = append(fake.associateSpaceDeveloperByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateSpaceDeveloperByUsername", []interface{}{arg1, arg2})
	fake.associateSpaceDeveloperByUsernameMutex.Unlock()
	if fake.AssociateSpaceDeveloperByUsernameStub != nil {
		return fake.AssociateSpaceDeveloperByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceDeveloperByUsernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameCallCount() int {
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	return len(fake.associateSpaceDeveloperByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameCalls(stub func(string, string) (cfclient.Space, error)) {
	fake.associateSpaceDeveloperByUsernameMutex.Lock()
	defer fake.associateSpaceDeveloperByUsernameMutex.Unlock()
	fake.AssociateSpaceDeveloperByUsernameStub = stub
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	argsForCall := fake.associateSpaceDeveloperByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceDeveloperByUsernameMutex.Lock()
	defer fake.associateSpaceDeveloperByUsernameMutex.Unlock()
	fake.AssociateSpaceDeveloperByUsernameStub = nil
	fake.associateSpaceDeveloperByUsernameReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceDeveloperByUsernameMutex.Lock()
	defer fake.associateSpaceDeveloperByUsernameMutex.Unlock()
	fake.AssociateSpaceDeveloperByUsernameStub = nil
	if fake.associateSpaceDeveloperByUsernameReturnsOnCall == nil {
		fake.associateSpaceDeveloperByUsernameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceDeveloperByUsernameReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) (cfclient.Space, error) {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.associateSpaceDeveloperByUsernameAndOriginReturnsOnCall[len(fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall)]
	fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall = append(fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateSpaceDeveloperByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	if fake.AssociateSpaceDeveloperByUsernameAndOriginStub != nil {
		return fake.AssociateSpaceDeveloperByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceDeveloperByUsernameAndOriginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOriginCallCount() int {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOriginCalls(stub func(string, string, string) (cfclient.Space, error)) {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceDeveloperByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.associateSpaceDeveloperByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOriginReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceDeveloperByUsernameAndOriginStub = nil
	fake.associateSpaceDeveloperByUsernameAndOriginReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceDeveloperByUsernameAndOriginReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceDeveloperByUsernameAndOriginStub = nil
	if fake.associateSpaceDeveloperByUsernameAndOriginReturnsOnCall == nil {
		fake.associateSpaceDeveloperByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceDeveloperByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManager(arg1 string, arg2 string) (cfclient.Space, error) {
	fake.associateSpaceManagerMutex.Lock()
	ret, specificReturn := fake.associateSpaceManagerReturnsOnCall[len(fake.associateSpaceManagerArgsForCall)]
	fake.associateSpaceManagerArgsForCall = append(fake.associateSpaceManagerArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateSpaceManager", []interface{}{arg1, arg2})
	fake.associateSpaceManagerMutex.Unlock()
	if fake.AssociateSpaceManagerStub != nil {
		return fake.AssociateSpaceManagerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceManagerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceManagerCallCount() int {
	fake.associateSpaceManagerMutex.RLock()
	defer fake.associateSpaceManagerMutex.RUnlock()
	return len(fake.associateSpaceManagerArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceManagerCalls(stub func(string, string) (cfclient.Space, error)) {
	fake.associateSpaceManagerMutex.Lock()
	defer fake.associateSpaceManagerMutex.Unlock()
	fake.AssociateSpaceManagerStub = stub
}

func (fake *FakeCFClient) AssociateSpaceManagerArgsForCall(i int) (string, string) {
	fake.associateSpaceManagerMutex.RLock()
	defer fake.associateSpaceManagerMutex.RUnlock()
	argsForCall := fake.associateSpaceManagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateSpaceManagerReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceManagerMutex.Lock()
	defer fake.associateSpaceManagerMutex.Unlock()
	fake.AssociateSpaceManagerStub = nil
	fake.associateSpaceManagerReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManagerReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceManagerMutex.Lock()
	defer fake.associateSpaceManagerMutex.Unlock()
	fake.AssociateSpaceManagerStub = nil
	if fake.associateSpaceManagerReturnsOnCall == nil {
		fake.associateSpaceManagerReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceManagerReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsername(arg1 string, arg2 string) (cfclient.Space, error) {
	fake.associateSpaceManagerByUsernameMutex.Lock()
	ret, specificReturn := fake.associateSpaceManagerByUsernameReturnsOnCall[len(fake.associateSpaceManagerByUsernameArgsForCall)]
	fake.associateSpaceManagerByUsernameArgsForCall = append(fake.associateSpaceManagerByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("AssociateSpaceManagerByUsername", []interface{}{arg1, arg2})
	fake.associateSpaceManagerByUsernameMutex.Unlock()
	if fake.AssociateSpaceManagerByUsernameStub != nil {
		return fake.AssociateSpaceManagerByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceManagerByUsernameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameCallCount() int {
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	return len(fake.associateSpaceManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameCalls(stub func(string, string) (cfclient.Space, error)) {
	fake.associateSpaceManagerByUsernameMutex.Lock()
	defer fake.associateSpaceManagerByUsernameMutex.Unlock()
	fake.AssociateSpaceManagerByUsernameStub = stub
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameArgsForCall(i int) (string, string) {
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	argsForCall := fake.associateSpaceManagerByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceManagerByUsernameMutex.Lock()
	defer fake.associateSpaceManagerByUsernameMutex.Unlock()
	fake.AssociateSpaceManagerByUsernameStub = nil
	fake.associateSpaceManagerByUsernameReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceManagerByUsernameMutex.Lock()
	defer fake.associateSpaceManagerByUsernameMutex.Unlock()
	fake.AssociateSpaceManagerByUsernameStub = nil
	if fake.associateSpaceManagerByUsernameReturnsOnCall == nil {
		fake.associateSpaceManagerByUsernameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceManagerByUsernameReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) (cfclient.Space, error) {
	fake.associateSpaceManagerByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.associateSpaceManagerByUsernameAndOriginReturnsOnCall[len(fake.associateSpaceManagerByUsernameAndOriginArgsForCall)]
	fake.associateSpaceManagerByUsernameAndOriginArgsForCall = append(fake.associateSpaceManagerByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("AssociateSpaceManagerByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.associateSpaceManagerByUsernameAndOriginMutex.Unlock()
	if fake.AssociateSpaceManagerByUsernameAndOriginStub != nil {
		return fake.AssociateSpaceManagerByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.associateSpaceManagerByUsernameAndOriginReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOriginCallCount() int {
	fake.associateSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.associateSpaceManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOriginCalls(stub func(string, string, string) (cfclient.Space, error)) {
	fake.associateSpaceManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceManagerByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.associateSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.associateSpaceManagerByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOriginReturns(result1 cfclient.Space, result2 error) {
	fake.associateSpaceManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceManagerByUsernameAndOriginStub = nil
	fake.associateSpaceManagerByUsernameAndOriginReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) AssociateSpaceManagerByUsernameAndOriginReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.associateSpaceManagerByUsernameAndOriginMutex.Lock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.Unlock()
	fake.AssociateSpaceManagerByUsernameAndOriginStub = nil
	if fake.associateSpaceManagerByUsernameAndOriginReturnsOnCall == nil {
		fake.associateSpaceManagerByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.associateSpaceManagerByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) BindRoute(arg1 string, arg2 string) error {
	fake.bindRouteMutex.Lock()
	ret, specificReturn := fake.bindRouteReturnsOnCall[len(fake.bindRouteArgsForCall)]
	fake.bindRouteArgsForCall = append(fake.bindRouteArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("BindRoute", []interface{}{arg1, arg2})
	fake.bindRouteMutex.Unlock()
	if fake.BindRouteStub != nil {
		return fake.BindRouteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bindRouteReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) BindRouteCallCount() int {
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	return len(fake.bindRouteArgsForCall)
}

func (fake *FakeCFClient) BindRouteCalls(stub func(string, string) error) {
	fake.bindRouteMutex.Lock()
	defer fake.bindRouteMutex.Unlock()
	fake.BindRouteStub = stub
}

func (fake *FakeCFClient) BindRouteArgsForCall(i int) (string, string) {
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	argsForCall := fake.bindRouteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) BindRouteReturns(result1 error) {
	fake.bindRouteMutex.Lock()
	defer fake.bindRouteMutex.Unlock()
	fake.BindRouteStub = nil
	fake.bindRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindRouteReturnsOnCall(i int, result1 error) {
	fake.bindRouteMutex.Lock()
	defer fake.bindRouteMutex.Unlock()
	fake.BindRouteStub = nil
	if fake.bindRouteReturnsOnCall == nil {
		fake.bindRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindRunningSecGroup(arg1 string) error {
	fake.bindRunningSecGroupMutex.Lock()
	ret, specificReturn := fake.bindRunningSecGroupReturnsOnCall[len(fake.bindRunningSecGroupArgsForCall)]
	fake.bindRunningSecGroupArgsForCall = append(fake.bindRunningSecGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("BindRunningSecGroup", []interface{}{arg1})
	fake.bindRunningSecGroupMutex.Unlock()
	if fake.BindRunningSecGroupStub != nil {
		return fake.BindRunningSecGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bindRunningSecGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) BindRunningSecGroupCallCount() int {
	fake.bindRunningSecGroupMutex.RLock()
	defer fake.bindRunningSecGroupMutex.RUnlock()
	return len(fake.bindRunningSecGroupArgsForCall)
}

func (fake *FakeCFClient) BindRunningSecGroupCalls(stub func(string) error) {
	fake.bindRunningSecGroupMutex.Lock()
	defer fake.bindRunningSecGroupMutex.Unlock()
	fake.BindRunningSecGroupStub = stub
}

func (fake *FakeCFClient) BindRunningSecGroupArgsForCall(i int) string {
	fake.bindRunningSecGroupMutex.RLock()
	defer fake.bindRunningSecGroupMutex.RUnlock()
	argsForCall := fake.bindRunningSecGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) BindRunningSecGroupReturns(result1 error) {
	fake.bindRunningSecGroupMutex.Lock()
	defer fake.bindRunningSecGroupMutex.Unlock()
	fake.BindRunningSecGroupStub = nil
	fake.bindRunningSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindRunningSecGroupReturnsOnCall(i int, result1 error) {
	fake.bindRunningSecGroupMutex.Lock()
	defer fake.bindRunningSecGroupMutex.Unlock()
	fake.BindRunningSecGroupStub = nil
	if fake.bindRunningSecGroupReturnsOnCall == nil {
		fake.bindRunningSecGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindRunningSecGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindSecGroup(arg1 string, arg2 string) error {
	fake.bindSecGroupMutex.Lock()
	ret, specificReturn := fake.bindSecGroupReturnsOnCall[len(fake.bindSecGroupArgsForCall)]
	fake.bindSecGroupArgsForCall = append(fake.bindSecGroupArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("BindSecGroup", []interface{}{arg1, arg2})
	fake.bindSecGroupMutex.Unlock()
	if fake.BindSecGroupStub != nil {
		return fake.BindSecGroupStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bindSecGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) BindSecGroupCallCount() int {
	fake.bindSecGroupMutex.RLock()
	defer fake.bindSecGroupMutex.RUnlock()
	return len(fake.bindSecGroupArgsForCall)
}

func (fake *FakeCFClient) BindSecGroupCalls(stub func(string, string) error) {
	fake.bindSecGroupMutex.Lock()
	defer fake.bindSecGroupMutex.Unlock()
	fake.BindSecGroupStub = stub
}

func (fake *FakeCFClient) BindSecGroupArgsForCall(i int) (string, string) {
	fake.bindSecGroupMutex.RLock()
	defer fake.bindSecGroupMutex.RUnlock()
	argsForCall := fake.bindSecGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) BindSecGroupReturns(result1 error) {
	fake.bindSecGroupMutex.Lock()
	defer fake.bindSecGroupMutex.Unlock()
	fake.BindSecGroupStub = nil
	fake.bindSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindSecGroupReturnsOnCall(i int, result1 error) {
	fake.bindSecGroupMutex.Lock()
	defer fake.bindSecGroupMutex.Unlock()
	fake.BindSecGroupStub = nil
	if fake.bindSecGroupReturnsOnCall == nil {
		fake.bindSecGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindSecGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindStagingSecGroup(arg1 string) error {
	fake.bindStagingSecGroupMutex.Lock()
	ret, specificReturn := fake.bindStagingSecGroupReturnsOnCall[len(fake.bindStagingSecGroupArgsForCall)]
	fake.bindStagingSecGroupArgsForCall = append(fake.bindStagingSecGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("BindStagingSecGroup", []interface{}{arg1})
	fake.bindStagingSecGroupMutex.Unlock()
	if fake.BindStagingSecGroupStub != nil {
		return fake.BindStagingSecGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bindStagingSecGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) BindStagingSecGroupCallCount() int {
	fake.bindStagingSecGroupMutex.RLock()
	defer fake.bindStagingSecGroupMutex.RUnlock()
	return len(fake.bindStagingSecGroupArgsForCall)
}

func (fake *FakeCFClient) BindStagingSecGroupCalls(stub func(string) error) {
	fake.bindStagingSecGroupMutex.Lock()
	defer fake.bindStagingSecGroupMutex.Unlock()
	fake.BindStagingSecGroupStub = stub
}

func (fake *FakeCFClient) BindStagingSecGroupArgsForCall(i int) string {
	fake.bindStagingSecGroupMutex.RLock()
	defer fake.bindStagingSecGroupMutex.RUnlock()
	argsForCall := fake.bindStagingSecGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) BindStagingSecGroupReturns(result1 error) {
	fake.bindStagingSecGroupMutex.Lock()
	defer fake.bindStagingSecGroupMutex.Unlock()
	fake.BindStagingSecGroupStub = nil
	fake.bindStagingSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindStagingSecGroupReturnsOnCall(i int, result1 error) {
	fake.bindStagingSecGroupMutex.Lock()
	defer fake.bindStagingSecGroupMutex.Unlock()
	fake.BindStagingSecGroupStub = nil
	if fake.bindStagingSecGroupReturnsOnCall == nil {
		fake.bindStagingSecGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindStagingSecGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindStagingSecGroupToSpace(arg1 string, arg2 string) error {
	fake.bindStagingSecGroupToSpaceMutex.Lock()
	ret, specificReturn := fake.bindStagingSecGroupToSpaceReturnsOnCall[len(fake.bindStagingSecGroupToSpaceArgsForCall)]
	fake.bindStagingSecGroupToSpaceArgsForCall = append(fake.bindStagingSecGroupToSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("BindStagingSecGroupToSpace", []interface{}{arg1, arg2})
	fake.bindStagingSecGroupToSpaceMutex.Unlock()
	if fake.BindStagingSecGroupToSpaceStub != nil {
		return fake.BindStagingSecGroupToSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.bindStagingSecGroupToSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) BindStagingSecGroupToSpaceCallCount() int {
	fake.bindStagingSecGroupToSpaceMutex.RLock()
	defer fake.bindStagingSecGroupToSpaceMutex.RUnlock()
	return len(fake.bindStagingSecGroupToSpaceArgsForCall)
}

func (fake *FakeCFClient) BindStagingSecGroupToSpaceCalls(stub func(string, string) error) {
	fake.bindStagingSecGroupToSpaceMutex.Lock()
	defer fake.bindStagingSecGroupToSpaceMutex.Unlock()
	fake.BindStagingSecGroupToSpaceStub = stub
}

func (fake *FakeCFClient) BindStagingSecGroupToSpaceArgsForCall(i int) (string, string) {
	fake.bindStagingSecGroupToSpaceMutex.RLock()
	defer fake.bindStagingSecGroupToSpaceMutex.RUnlock()
	argsForCall := fake.bindStagingSecGroupToSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) BindStagingSecGroupToSpaceReturns(result1 error) {
	fake.bindStagingSecGroupToSpaceMutex.Lock()
	defer fake.bindStagingSecGroupToSpaceMutex.Unlock()
	fake.BindStagingSecGroupToSpaceStub = nil
	fake.bindStagingSecGroupToSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) BindStagingSecGroupToSpaceReturnsOnCall(i int, result1 error) {
	fake.bindStagingSecGroupToSpaceMutex.Lock()
	defer fake.bindStagingSecGroupToSpaceMutex.Unlock()
	fake.BindStagingSecGroupToSpaceStub = nil
	if fake.bindStagingSecGroupToSpaceReturnsOnCall == nil {
		fake.bindStagingSecGroupToSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.bindStagingSecGroupToSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateApp(arg1 cfclient.AppCreateRequest) (cfclient.App, error) {
	fake.createAppMutex.Lock()
	ret, specificReturn := fake.createAppReturnsOnCall[len(fake.createAppArgsForCall)]
	fake.createAppArgsForCall = append(fake.createAppArgsForCall, struct {
		arg1 cfclient.AppCreateRequest
	}{arg1})
	fake.recordInvocation("CreateApp", []interface{}{arg1})
	fake.createAppMutex.Unlock()
	if fake.CreateAppStub != nil {
		return fake.CreateAppStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createAppReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateAppCallCount() int {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return len(fake.createAppArgsForCall)
}

func (fake *FakeCFClient) CreateAppCalls(stub func(cfclient.AppCreateRequest) (cfclient.App, error)) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = stub
}

func (fake *FakeCFClient) CreateAppArgsForCall(i int) cfclient.AppCreateRequest {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	argsForCall := fake.createAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateAppReturns(result1 cfclient.App, result2 error) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = nil
	fake.createAppReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateAppReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = nil
	if fake.createAppReturnsOnCall == nil {
		fake.createAppReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.createAppReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateBuildpack(arg1 *cfclient.BuildpackRequest) (*cfclient.Buildpack, error) {
	fake.createBuildpackMutex.Lock()
	ret, specificReturn := fake.createBuildpackReturnsOnCall[len(fake.createBuildpackArgsForCall)]
	fake.createBuildpackArgsForCall = append(fake.createBuildpackArgsForCall, struct {
		arg1 *cfclient.BuildpackRequest
	}{arg1})
	fake.recordInvocation("CreateBuildpack", []interface{}{arg1})
	fake.createBuildpackMutex.Unlock()
	if fake.CreateBuildpackStub != nil {
		return fake.CreateBuildpackStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createBuildpackReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateBuildpackCallCount() int {
	fake.createBuildpackMutex.RLock()
	defer fake.createBuildpackMutex.RUnlock()
	return len(fake.createBuildpackArgsForCall)
}

func (fake *FakeCFClient) CreateBuildpackCalls(stub func(*cfclient.BuildpackRequest) (*cfclient.Buildpack, error)) {
	fake.createBuildpackMutex.Lock()
	defer fake.createBuildpackMutex.Unlock()
	fake.CreateBuildpackStub = stub
}

func (fake *FakeCFClient) CreateBuildpackArgsForCall(i int) *cfclient.BuildpackRequest {
	fake.createBuildpackMutex.RLock()
	defer fake.createBuildpackMutex.RUnlock()
	argsForCall := fake.createBuildpackArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateBuildpackReturns(result1 *cfclient.Buildpack, result2 error) {
	fake.createBuildpackMutex.Lock()
	defer fake.createBuildpackMutex.Unlock()
	fake.CreateBuildpackStub = nil
	fake.createBuildpackReturns = struct {
		result1 *cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateBuildpackReturnsOnCall(i int, result1 *cfclient.Buildpack, result2 error) {
	fake.createBuildpackMutex.Lock()
	defer fake.createBuildpackMutex.Unlock()
	fake.CreateBuildpackStub = nil
	if fake.createBuildpackReturnsOnCall == nil {
		fake.createBuildpackReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Buildpack
			result2 error
		})
	}
	fake.createBuildpackReturnsOnCall[i] = struct {
		result1 *cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateDomain(arg1 string, arg2 string) (*cfclient.Domain, error) {
	fake.createDomainMutex.Lock()
	ret, specificReturn := fake.createDomainReturnsOnCall[len(fake.createDomainArgsForCall)]
	fake.createDomainArgsForCall = append(fake.createDomainArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateDomain", []interface{}{arg1, arg2})
	fake.createDomainMutex.Unlock()
	if fake.CreateDomainStub != nil {
		return fake.CreateDomainStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createDomainReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateDomainCallCount() int {
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	return len(fake.createDomainArgsForCall)
}

func (fake *FakeCFClient) CreateDomainCalls(stub func(string, string) (*cfclient.Domain, error)) {
	fake.createDomainMutex.Lock()
	defer fake.createDomainMutex.Unlock()
	fake.CreateDomainStub = stub
}

func (fake *FakeCFClient) CreateDomainArgsForCall(i int) (string, string) {
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	argsForCall := fake.createDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) CreateDomainReturns(result1 *cfclient.Domain, result2 error) {
	fake.createDomainMutex.Lock()
	defer fake.createDomainMutex.Unlock()
	fake.CreateDomainStub = nil
	fake.createDomainReturns = struct {
		result1 *cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateDomainReturnsOnCall(i int, result1 *cfclient.Domain, result2 error) {
	fake.createDomainMutex.Lock()
	defer fake.createDomainMutex.Unlock()
	fake.CreateDomainStub = nil
	if fake.createDomainReturnsOnCall == nil {
		fake.createDomainReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Domain
			result2 error
		})
	}
	fake.createDomainReturnsOnCall[i] = struct {
		result1 *cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateIsolationSegment(arg1 string) (*cfclient.IsolationSegment, error) {
	fake.createIsolationSegmentMutex.Lock()
	ret, specificReturn := fake.createIsolationSegmentReturnsOnCall[len(fake.createIsolationSegmentArgsForCall)]
	fake.createIsolationSegmentArgsForCall = append(fake.createIsolationSegmentArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CreateIsolationSegment", []interface{}{arg1})
	fake.createIsolationSegmentMutex.Unlock()
	if fake.CreateIsolationSegmentStub != nil {
		return fake.CreateIsolationSegmentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createIsolationSegmentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateIsolationSegmentCallCount() int {
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	return len(fake.createIsolationSegmentArgsForCall)
}

func (fake *FakeCFClient) CreateIsolationSegmentCalls(stub func(string) (*cfclient.IsolationSegment, error)) {
	fake.createIsolationSegmentMutex.Lock()
	defer fake.createIsolationSegmentMutex.Unlock()
	fake.CreateIsolationSegmentStub = stub
}

func (fake *FakeCFClient) CreateIsolationSegmentArgsForCall(i int) string {
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	argsForCall := fake.createIsolationSegmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateIsolationSegmentReturns(result1 *cfclient.IsolationSegment, result2 error) {
	fake.createIsolationSegmentMutex.Lock()
	defer fake.createIsolationSegmentMutex.Unlock()
	fake.CreateIsolationSegmentStub = nil
	fake.createIsolationSegmentReturns = struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateIsolationSegmentReturnsOnCall(i int, result1 *cfclient.IsolationSegment, result2 error) {
	fake.createIsolationSegmentMutex.Lock()
	defer fake.createIsolationSegmentMutex.Unlock()
	fake.CreateIsolationSegmentStub = nil
	if fake.createIsolationSegmentReturnsOnCall == nil {
		fake.createIsolationSegmentReturnsOnCall = make(map[int]struct {
			result1 *cfclient.IsolationSegment
			result2 error
		})
	}
	fake.createIsolationSegmentReturnsOnCall[i] = struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateOrg(arg1 cfclient.OrgRequest) (cfclient.Org, error) {
	fake.createOrgMutex.Lock()
	ret, specificReturn := fake.createOrgReturnsOnCall[len(fake.createOrgArgsForCall)]
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		arg1 cfclient.OrgRequest
	}{arg1})
	fake.recordInvocation("CreateOrg", []interface{}{arg1})
	fake.createOrgMutex.Unlock()
	if fake.CreateOrgStub != nil {
		return fake.CreateOrgStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeCFClient) CreateOrgCalls(stub func(cfclient.OrgRequest) (cfclient.Org, error)) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = stub
}

func (fake *FakeCFClient) CreateOrgArgsForCall(i int) cfclient.OrgRequest {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	argsForCall := fake.createOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateOrgReturns(result1 cfclient.Org, result2 error) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateOrgReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = nil
	if fake.createOrgReturnsOnCall == nil {
		fake.createOrgReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.createOrgReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateOrgQuota(arg1 cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error) {
	fake.createOrgQuotaMutex.Lock()
	ret, specificReturn := fake.createOrgQuotaReturnsOnCall[len(fake.createOrgQuotaArgsForCall)]
	fake.createOrgQuotaArgsForCall = append(fake.createOrgQuotaArgsForCall, struct {
		arg1 cfclient.OrgQuotaRequest
	}{arg1})
	fake.recordInvocation("CreateOrgQuota", []interface{}{arg1})
	fake.createOrgQuotaMutex.Unlock()
	if fake.CreateOrgQuotaStub != nil {
		return fake.CreateOrgQuotaStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createOrgQuotaReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateOrgQuotaCallCount() int {
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	return len(fake.createOrgQuotaArgsForCall)
}

func (fake *FakeCFClient) CreateOrgQuotaCalls(stub func(cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error)) {
	fake.createOrgQuotaMutex.Lock()
	defer fake.createOrgQuotaMutex.Unlock()
	fake.CreateOrgQuotaStub = stub
}

func (fake *FakeCFClient) CreateOrgQuotaArgsForCall(i int) cfclient.OrgQuotaRequest {
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	argsForCall := fake.createOrgQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateOrgQuotaReturns(result1 *cfclient.OrgQuota, result2 error) {
	fake.createOrgQuotaMutex.Lock()
	defer fake.createOrgQuotaMutex.Unlock()
	fake.CreateOrgQuotaStub = nil
	fake.createOrgQuotaReturns = struct {
		result1 *cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateOrgQuotaReturnsOnCall(i int, result1 *cfclient.OrgQuota, result2 error) {
	fake.createOrgQuotaMutex.Lock()
	defer fake.createOrgQuotaMutex.Unlock()
	fake.CreateOrgQuotaStub = nil
	if fake.createOrgQuotaReturnsOnCall == nil {
		fake.createOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 *cfclient.OrgQuota
			result2 error
		})
	}
	fake.createOrgQuotaReturnsOnCall[i] = struct {
		result1 *cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateRoute(arg1 cfclient.RouteRequest) (cfclient.Route, error) {
	fake.createRouteMutex.Lock()
	ret, specificReturn := fake.createRouteReturnsOnCall[len(fake.createRouteArgsForCall)]
	fake.createRouteArgsForCall = append(fake.createRouteArgsForCall, struct {
		arg1 cfclient.RouteRequest
	}{arg1})
	fake.recordInvocation("CreateRoute", []interface{}{arg1})
	fake.createRouteMutex.Unlock()
	if fake.CreateRouteStub != nil {
		return fake.CreateRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateRouteCallCount() int {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	return len(fake.createRouteArgsForCall)
}

func (fake *FakeCFClient) CreateRouteCalls(stub func(cfclient.RouteRequest) (cfclient.Route, error)) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = stub
}

func (fake *FakeCFClient) CreateRouteArgsForCall(i int) cfclient.RouteRequest {
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	argsForCall := fake.createRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateRouteReturns(result1 cfclient.Route, result2 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	fake.createRouteReturns = struct {
		result1 cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateRouteReturnsOnCall(i int, result1 cfclient.Route, result2 error) {
	fake.createRouteMutex.Lock()
	defer fake.createRouteMutex.Unlock()
	fake.CreateRouteStub = nil
	if fake.createRouteReturnsOnCall == nil {
		fake.createRouteReturnsOnCall = make(map[int]struct {
			result1 cfclient.Route
			result2 error
		})
	}
	fake.createRouteReturnsOnCall[i] = struct {
		result1 cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateRouteServiceBinding(arg1 string, arg2 string) error {
	fake.createRouteServiceBindingMutex.Lock()
	ret, specificReturn := fake.createRouteServiceBindingReturnsOnCall[len(fake.createRouteServiceBindingArgsForCall)]
	fake.createRouteServiceBindingArgsForCall = append(fake.createRouteServiceBindingArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateRouteServiceBinding", []interface{}{arg1, arg2})
	fake.createRouteServiceBindingMutex.Unlock()
	if fake.CreateRouteServiceBindingStub != nil {
		return fake.CreateRouteServiceBindingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createRouteServiceBindingReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) CreateRouteServiceBindingCallCount() int {
	fake.createRouteServiceBindingMutex.RLock()
	defer fake.createRouteServiceBindingMutex.RUnlock()
	return len(fake.createRouteServiceBindingArgsForCall)
}

func (fake *FakeCFClient) CreateRouteServiceBindingCalls(stub func(string, string) error) {
	fake.createRouteServiceBindingMutex.Lock()
	defer fake.createRouteServiceBindingMutex.Unlock()
	fake.CreateRouteServiceBindingStub = stub
}

func (fake *FakeCFClient) CreateRouteServiceBindingArgsForCall(i int) (string, string) {
	fake.createRouteServiceBindingMutex.RLock()
	defer fake.createRouteServiceBindingMutex.RUnlock()
	argsForCall := fake.createRouteServiceBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) CreateRouteServiceBindingReturns(result1 error) {
	fake.createRouteServiceBindingMutex.Lock()
	defer fake.createRouteServiceBindingMutex.Unlock()
	fake.CreateRouteServiceBindingStub = nil
	fake.createRouteServiceBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateRouteServiceBindingReturnsOnCall(i int, result1 error) {
	fake.createRouteServiceBindingMutex.Lock()
	defer fake.createRouteServiceBindingMutex.Unlock()
	fake.CreateRouteServiceBindingStub = nil
	if fake.createRouteServiceBindingReturnsOnCall == nil {
		fake.createRouteServiceBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createRouteServiceBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateSecGroup(arg1 string, arg2 []cfclient.SecGroupRule, arg3 []string) (*cfclient.SecGroup, error) {
	var arg2Copy []cfclient.SecGroupRule
	if arg2 != nil {
		arg2Copy = make([]cfclient.SecGroupRule, len(arg2))
		copy(arg2Copy, arg2)
	}
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.createSecGroupMutex.Lock()
	ret, specificReturn := fake.createSecGroupReturnsOnCall[len(fake.createSecGroupArgsForCall)]
	fake.createSecGroupArgsForCall = append(fake.createSecGroupArgsForCall, struct {
		arg1 string
		arg2 []cfclient.SecGroupRule
		arg3 []string
	}{arg1, arg2Copy, arg3Copy})
	fake.recordInvocation("CreateSecGroup", []interface{}{arg1, arg2Copy, arg3Copy})
	fake.createSecGroupMutex.Unlock()
	if fake.CreateSecGroupStub != nil {
		return fake.CreateSecGroupStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSecGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateSecGroupCallCount() int {
	fake.createSecGroupMutex.RLock()
	defer fake.createSecGroupMutex.RUnlock()
	return len(fake.createSecGroupArgsForCall)
}

func (fake *FakeCFClient) CreateSecGroupCalls(stub func(string, []cfclient.SecGroupRule, []string) (*cfclient.SecGroup, error)) {
	fake.createSecGroupMutex.Lock()
	defer fake.createSecGroupMutex.Unlock()
	fake.CreateSecGroupStub = stub
}

func (fake *FakeCFClient) CreateSecGroupArgsForCall(i int) (string, []cfclient.SecGroupRule, []string) {
	fake.createSecGroupMutex.RLock()
	defer fake.createSecGroupMutex.RUnlock()
	argsForCall := fake.createSecGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) CreateSecGroupReturns(result1 *cfclient.SecGroup, result2 error) {
	fake.createSecGroupMutex.Lock()
	defer fake.createSecGroupMutex.Unlock()
	fake.CreateSecGroupStub = nil
	fake.createSecGroupReturns = struct {
		result1 *cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSecGroupReturnsOnCall(i int, result1 *cfclient.SecGroup, result2 error) {
	fake.createSecGroupMutex.Lock()
	defer fake.createSecGroupMutex.Unlock()
	fake.CreateSecGroupStub = nil
	if fake.createSecGroupReturnsOnCall == nil {
		fake.createSecGroupReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SecGroup
			result2 error
		})
	}
	fake.createSecGroupReturnsOnCall[i] = struct {
		result1 *cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServiceBinding(arg1 string, arg2 string) (*cfclient.ServiceBinding, error) {
	fake.createServiceBindingMutex.Lock()
	ret, specificReturn := fake.createServiceBindingReturnsOnCall[len(fake.createServiceBindingArgsForCall)]
	fake.createServiceBindingArgsForCall = append(fake.createServiceBindingArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateServiceBinding", []interface{}{arg1, arg2})
	fake.createServiceBindingMutex.Unlock()
	if fake.CreateServiceBindingStub != nil {
		return fake.CreateServiceBindingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceBindingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateServiceBindingCallCount() int {
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	return len(fake.createServiceBindingArgsForCall)
}

func (fake *FakeCFClient) CreateServiceBindingCalls(stub func(string, string) (*cfclient.ServiceBinding, error)) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = stub
}

func (fake *FakeCFClient) CreateServiceBindingArgsForCall(i int) (string, string) {
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	argsForCall := fake.createServiceBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) CreateServiceBindingReturns(result1 *cfclient.ServiceBinding, result2 error) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = nil
	fake.createServiceBindingReturns = struct {
		result1 *cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServiceBindingReturnsOnCall(i int, result1 *cfclient.ServiceBinding, result2 error) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = nil
	if fake.createServiceBindingReturnsOnCall == nil {
		fake.createServiceBindingReturnsOnCall = make(map[int]struct {
			result1 *cfclient.ServiceBinding
			result2 error
		})
	}
	fake.createServiceBindingReturnsOnCall[i] = struct {
		result1 *cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServiceBroker(arg1 cfclient.CreateServiceBrokerRequest) (cfclient.ServiceBroker, error) {
	fake.createServiceBrokerMutex.Lock()
	ret, specificReturn := fake.createServiceBrokerReturnsOnCall[len(fake.createServiceBrokerArgsForCall)]
	fake.createServiceBrokerArgsForCall = append(fake.createServiceBrokerArgsForCall, struct {
		arg1 cfclient.CreateServiceBrokerRequest
	}{arg1})
	fake.recordInvocation("CreateServiceBroker", []interface{}{arg1})
	fake.createServiceBrokerMutex.Unlock()
	if fake.CreateServiceBrokerStub != nil {
		return fake.CreateServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateServiceBrokerCallCount() int {
	fake.createServiceBrokerMutex.RLock()
	defer fake.createServiceBrokerMutex.RUnlock()
	return len(fake.createServiceBrokerArgsForCall)
}

func (fake *FakeCFClient) CreateServiceBrokerCalls(stub func(cfclient.CreateServiceBrokerRequest) (cfclient.ServiceBroker, error)) {
	fake.createServiceBrokerMutex.Lock()
	defer fake.createServiceBrokerMutex.Unlock()
	fake.CreateServiceBrokerStub = stub
}

func (fake *FakeCFClient) CreateServiceBrokerArgsForCall(i int) cfclient.CreateServiceBrokerRequest {
	fake.createServiceBrokerMutex.RLock()
	defer fake.createServiceBrokerMutex.RUnlock()
	argsForCall := fake.createServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateServiceBrokerReturns(result1 cfclient.ServiceBroker, result2 error) {
	fake.createServiceBrokerMutex.Lock()
	defer fake.createServiceBrokerMutex.Unlock()
	fake.CreateServiceBrokerStub = nil
	fake.createServiceBrokerReturns = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServiceBrokerReturnsOnCall(i int, result1 cfclient.ServiceBroker, result2 error) {
	fake.createServiceBrokerMutex.Lock()
	defer fake.createServiceBrokerMutex.Unlock()
	fake.CreateServiceBrokerStub = nil
	if fake.createServiceBrokerReturnsOnCall == nil {
		fake.createServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceBroker
			result2 error
		})
	}
	fake.createServiceBrokerReturnsOnCall[i] = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServiceInstance(arg1 cfclient.ServiceInstanceRequest) (cfclient.ServiceInstance, error) {
	fake.createServiceInstanceMutex.Lock()
	ret, specificReturn := fake.createServiceInstanceReturnsOnCall[len(fake.createServiceInstanceArgsForCall)]
	fake.createServiceInstanceArgsForCall = append(fake.createServiceInstanceArgsForCall, struct {
		arg1 cfclient.ServiceInstanceRequest
	}{arg1})
	fake.recordInvocation("CreateServiceInstance", []interface{}{arg1})
	fake.createServiceInstanceMutex.Unlock()
	if fake.CreateServiceInstanceStub != nil {
		return fake.CreateServiceInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateServiceInstanceCallCount() int {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	return len(fake.createServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) CreateServiceInstanceCalls(stub func(cfclient.ServiceInstanceRequest) (cfclient.ServiceInstance, error)) {
	fake.createServiceInstanceMutex.Lock()
	defer fake.createServiceInstanceMutex.Unlock()
	fake.CreateServiceInstanceStub = stub
}

func (fake *FakeCFClient) CreateServiceInstanceArgsForCall(i int) cfclient.ServiceInstanceRequest {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	argsForCall := fake.createServiceInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateServiceInstanceReturns(result1 cfclient.ServiceInstance, result2 error) {
	fake.createServiceInstanceMutex.Lock()
	defer fake.createServiceInstanceMutex.Unlock()
	fake.CreateServiceInstanceStub = nil
	fake.createServiceInstanceReturns = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServiceInstanceReturnsOnCall(i int, result1 cfclient.ServiceInstance, result2 error) {
	fake.createServiceInstanceMutex.Lock()
	defer fake.createServiceInstanceMutex.Unlock()
	fake.CreateServiceInstanceStub = nil
	if fake.createServiceInstanceReturnsOnCall == nil {
		fake.createServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceInstance
			result2 error
		})
	}
	fake.createServiceInstanceReturnsOnCall[i] = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServiceKey(arg1 cfclient.CreateServiceKeyRequest) (cfclient.ServiceKey, error) {
	fake.createServiceKeyMutex.Lock()
	ret, specificReturn := fake.createServiceKeyReturnsOnCall[len(fake.createServiceKeyArgsForCall)]
	fake.createServiceKeyArgsForCall = append(fake.createServiceKeyArgsForCall, struct {
		arg1 cfclient.CreateServiceKeyRequest
	}{arg1})
	fake.recordInvocation("CreateServiceKey", []interface{}{arg1})
	fake.createServiceKeyMutex.Unlock()
	if fake.CreateServiceKeyStub != nil {
		return fake.CreateServiceKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceKeyReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateServiceKeyCallCount() int {
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	return len(fake.createServiceKeyArgsForCall)
}

func (fake *FakeCFClient) CreateServiceKeyCalls(stub func(cfclient.CreateServiceKeyRequest) (cfclient.ServiceKey, error)) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = stub
}

func (fake *FakeCFClient) CreateServiceKeyArgsForCall(i int) cfclient.CreateServiceKeyRequest {
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	argsForCall := fake.createServiceKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateServiceKeyReturns(result1 cfclient.ServiceKey, result2 error) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = nil
	fake.createServiceKeyReturns = struct {
		result1 cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServiceKeyReturnsOnCall(i int, result1 cfclient.ServiceKey, result2 error) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = nil
	if fake.createServiceKeyReturnsOnCall == nil {
		fake.createServiceKeyReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceKey
			result2 error
		})
	}
	fake.createServiceKeyReturnsOnCall[i] = struct {
		result1 cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServicePlanVisibility(arg1 string, arg2 string) (cfclient.ServicePlanVisibility, error) {
	fake.createServicePlanVisibilityMutex.Lock()
	ret, specificReturn := fake.createServicePlanVisibilityReturnsOnCall[len(fake.createServicePlanVisibilityArgsForCall)]
	fake.createServicePlanVisibilityArgsForCall = append(fake.createServicePlanVisibilityArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateServicePlanVisibility", []interface{}{arg1, arg2})
	fake.createServicePlanVisibilityMutex.Unlock()
	if fake.CreateServicePlanVisibilityStub != nil {
		return fake.CreateServicePlanVisibilityStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServicePlanVisibilityReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateServicePlanVisibilityCallCount() int {
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	return len(fake.createServicePlanVisibilityArgsForCall)
}

func (fake *FakeCFClient) CreateServicePlanVisibilityCalls(stub func(string, string) (cfclient.ServicePlanVisibility, error)) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = stub
}

func (fake *FakeCFClient) CreateServicePlanVisibilityArgsForCall(i int) (string, string) {
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	argsForCall := fake.createServicePlanVisibilityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) CreateServicePlanVisibilityReturns(result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = nil
	fake.createServicePlanVisibilityReturns = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServicePlanVisibilityReturnsOnCall(i int, result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = nil
	if fake.createServicePlanVisibilityReturnsOnCall == nil {
		fake.createServicePlanVisibilityReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.createServicePlanVisibilityReturnsOnCall[i] = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServicePlanVisibilityByUniqueId(arg1 string, arg2 string) (cfclient.ServicePlanVisibility, error) {
	fake.createServicePlanVisibilityByUniqueIdMutex.Lock()
	ret, specificReturn := fake.createServicePlanVisibilityByUniqueIdReturnsOnCall[len(fake.createServicePlanVisibilityByUniqueIdArgsForCall)]
	fake.createServicePlanVisibilityByUniqueIdArgsForCall = append(fake.createServicePlanVisibilityByUniqueIdArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateServicePlanVisibilityByUniqueId", []interface{}{arg1, arg2})
	fake.createServicePlanVisibilityByUniqueIdMutex.Unlock()
	if fake.CreateServicePlanVisibilityByUniqueIdStub != nil {
		return fake.CreateServicePlanVisibilityByUniqueIdStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServicePlanVisibilityByUniqueIdReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateServicePlanVisibilityByUniqueIdCallCount() int {
	fake.createServicePlanVisibilityByUniqueIdMutex.RLock()
	defer fake.createServicePlanVisibilityByUniqueIdMutex.RUnlock()
	return len(fake.createServicePlanVisibilityByUniqueIdArgsForCall)
}

func (fake *FakeCFClient) CreateServicePlanVisibilityByUniqueIdCalls(stub func(string, string) (cfclient.ServicePlanVisibility, error)) {
	fake.createServicePlanVisibilityByUniqueIdMutex.Lock()
	defer fake.createServicePlanVisibilityByUniqueIdMutex.Unlock()
	fake.CreateServicePlanVisibilityByUniqueIdStub = stub
}

func (fake *FakeCFClient) CreateServicePlanVisibilityByUniqueIdArgsForCall(i int) (string, string) {
	fake.createServicePlanVisibilityByUniqueIdMutex.RLock()
	defer fake.createServicePlanVisibilityByUniqueIdMutex.RUnlock()
	argsForCall := fake.createServicePlanVisibilityByUniqueIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) CreateServicePlanVisibilityByUniqueIdReturns(result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.createServicePlanVisibilityByUniqueIdMutex.Lock()
	defer fake.createServicePlanVisibilityByUniqueIdMutex.Unlock()
	fake.CreateServicePlanVisibilityByUniqueIdStub = nil
	fake.createServicePlanVisibilityByUniqueIdReturns = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServicePlanVisibilityByUniqueIdReturnsOnCall(i int, result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.createServicePlanVisibilityByUniqueIdMutex.Lock()
	defer fake.createServicePlanVisibilityByUniqueIdMutex.Unlock()
	fake.CreateServicePlanVisibilityByUniqueIdStub = nil
	if fake.createServicePlanVisibilityByUniqueIdReturnsOnCall == nil {
		fake.createServicePlanVisibilityByUniqueIdReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.createServicePlanVisibilityByUniqueIdReturnsOnCall[i] = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSharedDomain(arg1 string, arg2 bool, arg3 string) (*cfclient.SharedDomain, error) {
	fake.createSharedDomainMutex.Lock()
	ret, specificReturn := fake.createSharedDomainReturnsOnCall[len(fake.createSharedDomainArgsForCall)]
	fake.createSharedDomainArgsForCall = append(fake.createSharedDomainArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateSharedDomain", []interface{}{arg1, arg2, arg3})
	fake.createSharedDomainMutex.Unlock()
	if fake.CreateSharedDomainStub != nil {
		return fake.CreateSharedDomainStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSharedDomainReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateSharedDomainCallCount() int {
	fake.createSharedDomainMutex.RLock()
	defer fake.createSharedDomainMutex.RUnlock()
	return len(fake.createSharedDomainArgsForCall)
}

func (fake *FakeCFClient) CreateSharedDomainCalls(stub func(string, bool, string) (*cfclient.SharedDomain, error)) {
	fake.createSharedDomainMutex.Lock()
	defer fake.createSharedDomainMutex.Unlock()
	fake.CreateSharedDomainStub = stub
}

func (fake *FakeCFClient) CreateSharedDomainArgsForCall(i int) (string, bool, string) {
	fake.createSharedDomainMutex.RLock()
	defer fake.createSharedDomainMutex.RUnlock()
	argsForCall := fake.createSharedDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) CreateSharedDomainReturns(result1 *cfclient.SharedDomain, result2 error) {
	fake.createSharedDomainMutex.Lock()
	defer fake.createSharedDomainMutex.Unlock()
	fake.CreateSharedDomainStub = nil
	fake.createSharedDomainReturns = struct {
		result1 *cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSharedDomainReturnsOnCall(i int, result1 *cfclient.SharedDomain, result2 error) {
	fake.createSharedDomainMutex.Lock()
	defer fake.createSharedDomainMutex.Unlock()
	fake.CreateSharedDomainStub = nil
	if fake.createSharedDomainReturnsOnCall == nil {
		fake.createSharedDomainReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SharedDomain
			result2 error
		})
	}
	fake.createSharedDomainReturnsOnCall[i] = struct {
		result1 *cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSpace(arg1 cfclient.SpaceRequest) (cfclient.Space, error) {
	fake.createSpaceMutex.Lock()
	ret, specificReturn := fake.createSpaceReturnsOnCall[len(fake.createSpaceArgsForCall)]
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		arg1 cfclient.SpaceRequest
	}{arg1})
	fake.recordInvocation("CreateSpace", []interface{}{arg1})
	fake.createSpaceMutex.Unlock()
	if fake.CreateSpaceStub != nil {
		return fake.CreateSpaceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSpaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeCFClient) CreateSpaceCalls(stub func(cfclient.SpaceRequest) (cfclient.Space, error)) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = stub
}

func (fake *FakeCFClient) CreateSpaceArgsForCall(i int) cfclient.SpaceRequest {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	argsForCall := fake.createSpaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateSpaceReturns(result1 cfclient.Space, result2 error) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSpaceReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = nil
	if fake.createSpaceReturnsOnCall == nil {
		fake.createSpaceReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.createSpaceReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSpaceQuota(arg1 cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error) {
	fake.createSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.createSpaceQuotaReturnsOnCall[len(fake.createSpaceQuotaArgsForCall)]
	fake.createSpaceQuotaArgsForCall = append(fake.createSpaceQuotaArgsForCall, struct {
		arg1 cfclient.SpaceQuotaRequest
	}{arg1})
	fake.recordInvocation("CreateSpaceQuota", []interface{}{arg1})
	fake.createSpaceQuotaMutex.Unlock()
	if fake.CreateSpaceQuotaStub != nil {
		return fake.CreateSpaceQuotaStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createSpaceQuotaReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateSpaceQuotaCallCount() int {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	return len(fake.createSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) CreateSpaceQuotaCalls(stub func(cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error)) {
	fake.createSpaceQuotaMutex.Lock()
	defer fake.createSpaceQuotaMutex.Unlock()
	fake.CreateSpaceQuotaStub = stub
}

func (fake *FakeCFClient) CreateSpaceQuotaArgsForCall(i int) cfclient.SpaceQuotaRequest {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	argsForCall := fake.createSpaceQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateSpaceQuotaReturns(result1 *cfclient.SpaceQuota, result2 error) {
	fake.createSpaceQuotaMutex.Lock()
	defer fake.createSpaceQuotaMutex.Unlock()
	fake.CreateSpaceQuotaStub = nil
	fake.createSpaceQuotaReturns = struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSpaceQuotaReturnsOnCall(i int, result1 *cfclient.SpaceQuota, result2 error) {
	fake.createSpaceQuotaMutex.Lock()
	defer fake.createSpaceQuotaMutex.Unlock()
	fake.CreateSpaceQuotaStub = nil
	if fake.createSpaceQuotaReturnsOnCall == nil {
		fake.createSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SpaceQuota
			result2 error
		})
	}
	fake.createSpaceQuotaReturnsOnCall[i] = struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateTask(arg1 cfclient.TaskRequest) (cfclient.Task, error) {
	fake.createTaskMutex.Lock()
	ret, specificReturn := fake.createTaskReturnsOnCall[len(fake.createTaskArgsForCall)]
	fake.createTaskArgsForCall = append(fake.createTaskArgsForCall, struct {
		arg1 cfclient.TaskRequest
	}{arg1})
	fake.recordInvocation("CreateTask", []interface{}{arg1})
	fake.createTaskMutex.Unlock()
	if fake.CreateTaskStub != nil {
		return fake.CreateTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateTaskCallCount() int {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	return len(fake.createTaskArgsForCall)
}

func (fake *FakeCFClient) CreateTaskCalls(stub func(cfclient.TaskRequest) (cfclient.Task, error)) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = stub
}

func (fake *FakeCFClient) CreateTaskArgsForCall(i int) cfclient.TaskRequest {
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	argsForCall := fake.createTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateTaskReturns(result1 cfclient.Task, result2 error) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = nil
	fake.createTaskReturns = struct {
		result1 cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateTaskReturnsOnCall(i int, result1 cfclient.Task, result2 error) {
	fake.createTaskMutex.Lock()
	defer fake.createTaskMutex.Unlock()
	fake.CreateTaskStub = nil
	if fake.createTaskReturnsOnCall == nil {
		fake.createTaskReturnsOnCall = make(map[int]struct {
			result1 cfclient.Task
			result2 error
		})
	}
	fake.createTaskReturnsOnCall[i] = struct {
		result1 cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateTcpRoute(arg1 cfclient.RouteRequest) (cfclient.Route, error) {
	fake.createTcpRouteMutex.Lock()
	ret, specificReturn := fake.createTcpRouteReturnsOnCall[len(fake.createTcpRouteArgsForCall)]
	fake.createTcpRouteArgsForCall = append(fake.createTcpRouteArgsForCall, struct {
		arg1 cfclient.RouteRequest
	}{arg1})
	fake.recordInvocation("CreateTcpRoute", []interface{}{arg1})
	fake.createTcpRouteMutex.Unlock()
	if fake.CreateTcpRouteStub != nil {
		return fake.CreateTcpRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTcpRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateTcpRouteCallCount() int {
	fake.createTcpRouteMutex.RLock()
	defer fake.createTcpRouteMutex.RUnlock()
	return len(fake.createTcpRouteArgsForCall)
}

func (fake *FakeCFClient) CreateTcpRouteCalls(stub func(cfclient.RouteRequest) (cfclient.Route, error)) {
	fake.createTcpRouteMutex.Lock()
	defer fake.createTcpRouteMutex.Unlock()
	fake.CreateTcpRouteStub = stub
}

func (fake *FakeCFClient) CreateTcpRouteArgsForCall(i int) cfclient.RouteRequest {
	fake.createTcpRouteMutex.RLock()
	defer fake.createTcpRouteMutex.RUnlock()
	argsForCall := fake.createTcpRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateTcpRouteReturns(result1 cfclient.Route, result2 error) {
	fake.createTcpRouteMutex.Lock()
	defer fake.createTcpRouteMutex.Unlock()
	fake.CreateTcpRouteStub = nil
	fake.createTcpRouteReturns = struct {
		result1 cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateTcpRouteReturnsOnCall(i int, result1 cfclient.Route, result2 error) {
	fake.createTcpRouteMutex.Lock()
	defer fake.createTcpRouteMutex.Unlock()
	fake.CreateTcpRouteStub = nil
	if fake.createTcpRouteReturnsOnCall == nil {
		fake.createTcpRouteReturnsOnCall = make(map[int]struct {
			result1 cfclient.Route
			result2 error
		})
	}
	fake.createTcpRouteReturnsOnCall[i] = struct {
		result1 cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateUser(arg1 cfclient.UserRequest) (cfclient.User, error) {
	fake.createUserMutex.Lock()
	ret, specificReturn := fake.createUserReturnsOnCall[len(fake.createUserArgsForCall)]
	fake.createUserArgsForCall = append(fake.createUserArgsForCall, struct {
		arg1 cfclient.UserRequest
	}{arg1})
	fake.recordInvocation("CreateUser", []interface{}{arg1})
	fake.createUserMutex.Unlock()
	if fake.CreateUserStub != nil {
		return fake.CreateUserStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createUserReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateUserCallCount() int {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	return len(fake.createUserArgsForCall)
}

func (fake *FakeCFClient) CreateUserCalls(stub func(cfclient.UserRequest) (cfclient.User, error)) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = stub
}

func (fake *FakeCFClient) CreateUserArgsForCall(i int) cfclient.UserRequest {
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	argsForCall := fake.createUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateUserReturns(result1 cfclient.User, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	fake.createUserReturns = struct {
		result1 cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateUserReturnsOnCall(i int, result1 cfclient.User, result2 error) {
	fake.createUserMutex.Lock()
	defer fake.createUserMutex.Unlock()
	fake.CreateUserStub = nil
	if fake.createUserReturnsOnCall == nil {
		fake.createUserReturnsOnCall = make(map[int]struct {
			result1 cfclient.User
			result2 error
		})
	}
	fake.createUserReturnsOnCall[i] = struct {
		result1 cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateUserProvidedServiceInstance(arg1 cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error) {
	fake.createUserProvidedServiceInstanceMutex.Lock()
	ret, specificReturn := fake.createUserProvidedServiceInstanceReturnsOnCall[len(fake.createUserProvidedServiceInstanceArgsForCall)]
	fake.createUserProvidedServiceInstanceArgsForCall = append(fake.createUserProvidedServiceInstanceArgsForCall, struct {
		arg1 cfclient.UserProvidedServiceInstanceRequest
	}{arg1})
	fake.recordInvocation("CreateUserProvidedServiceInstance", []interface{}{arg1})
	fake.createUserProvidedServiceInstanceMutex.Unlock()
	if fake.CreateUserProvidedServiceInstanceStub != nil {
		return fake.CreateUserProvidedServiceInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createUserProvidedServiceInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateUserProvidedServiceInstanceCallCount() int {
	fake.createUserProvidedServiceInstanceMutex.RLock()
	defer fake.createUserProvidedServiceInstanceMutex.RUnlock()
	return len(fake.createUserProvidedServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) CreateUserProvidedServiceInstanceCalls(stub func(cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error)) {
	fake.createUserProvidedServiceInstanceMutex.Lock()
	defer fake.createUserProvidedServiceInstanceMutex.Unlock()
	fake.CreateUserProvidedServiceInstanceStub = stub
}

func (fake *FakeCFClient) CreateUserProvidedServiceInstanceArgsForCall(i int) cfclient.UserProvidedServiceInstanceRequest {
	fake.createUserProvidedServiceInstanceMutex.RLock()
	defer fake.createUserProvidedServiceInstanceMutex.RUnlock()
	argsForCall := fake.createUserProvidedServiceInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateUserProvidedServiceInstanceReturns(result1 *cfclient.UserProvidedServiceInstance, result2 error) {
	fake.createUserProvidedServiceInstanceMutex.Lock()
	defer fake.createUserProvidedServiceInstanceMutex.Unlock()
	fake.CreateUserProvidedServiceInstanceStub = nil
	fake.createUserProvidedServiceInstanceReturns = struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateUserProvidedServiceInstanceReturnsOnCall(i int, result1 *cfclient.UserProvidedServiceInstance, result2 error) {
	fake.createUserProvidedServiceInstanceMutex.Lock()
	defer fake.createUserProvidedServiceInstanceMutex.Unlock()
	fake.CreateUserProvidedServiceInstanceStub = nil
	if fake.createUserProvidedServiceInstanceReturnsOnCall == nil {
		fake.createUserProvidedServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 *cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.createUserProvidedServiceInstanceReturnsOnCall[i] = struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrg(arg1 string, arg2 string) error {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	ret, specificReturn := fake.defaultIsolationSegmentForOrgReturnsOnCall[len(fake.defaultIsolationSegmentForOrgArgsForCall)]
	fake.defaultIsolationSegmentForOrgArgsForCall = append(fake.defaultIsolationSegmentForOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DefaultIsolationSegmentForOrg", []interface{}{arg1, arg2})
	fake.defaultIsolationSegmentForOrgMutex.Unlock()
	if fake.DefaultIsolationSegmentForOrgStub != nil {
		return fake.DefaultIsolationSegmentForOrgStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.defaultIsolationSegmentForOrgReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgCallCount() int {
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	return len(fake.defaultIsolationSegmentForOrgArgsForCall)
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgCalls(stub func(string, string) error) {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	defer fake.defaultIsolationSegmentForOrgMutex.Unlock()
	fake.DefaultIsolationSegmentForOrgStub = stub
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgArgsForCall(i int) (string, string) {
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	argsForCall := fake.defaultIsolationSegmentForOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgReturns(result1 error) {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	defer fake.defaultIsolationSegmentForOrgMutex.Unlock()
	fake.DefaultIsolationSegmentForOrgStub = nil
	fake.defaultIsolationSegmentForOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgReturnsOnCall(i int, result1 error) {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	defer fake.defaultIsolationSegmentForOrgMutex.Unlock()
	fake.DefaultIsolationSegmentForOrgStub = nil
	if fake.defaultIsolationSegmentForOrgReturnsOnCall == nil {
		fake.defaultIsolationSegmentForOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.defaultIsolationSegmentForOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteApp(arg1 string) error {
	fake.deleteAppMutex.Lock()
	ret, specificReturn := fake.deleteAppReturnsOnCall[len(fake.deleteAppArgsForCall)]
	fake.deleteAppArgsForCall = append(fake.deleteAppArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteApp", []interface{}{arg1})
	fake.deleteAppMutex.Unlock()
	if fake.DeleteAppStub != nil {
		return fake.DeleteAppStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteAppReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteAppCallCount() int {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	return len(fake.deleteAppArgsForCall)
}

func (fake *FakeCFClient) DeleteAppCalls(stub func(string) error) {
	fake.deleteAppMutex.Lock()
	defer fake.deleteAppMutex.Unlock()
	fake.DeleteAppStub = stub
}

func (fake *FakeCFClient) DeleteAppArgsForCall(i int) string {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	argsForCall := fake.deleteAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteAppReturns(result1 error) {
	fake.deleteAppMutex.Lock()
	defer fake.deleteAppMutex.Unlock()
	fake.DeleteAppStub = nil
	fake.deleteAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteAppReturnsOnCall(i int, result1 error) {
	fake.deleteAppMutex.Lock()
	defer fake.deleteAppMutex.Unlock()
	fake.DeleteAppStub = nil
	if fake.deleteAppReturnsOnCall == nil {
		fake.deleteAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteBuildpack(arg1 string, arg2 bool) error {
	fake.deleteBuildpackMutex.Lock()
	ret, specificReturn := fake.deleteBuildpackReturnsOnCall[len(fake.deleteBuildpackArgsForCall)]
	fake.deleteBuildpackArgsForCall = append(fake.deleteBuildpackArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("DeleteBuildpack", []interface{}{arg1, arg2})
	fake.deleteBuildpackMutex.Unlock()
	if fake.DeleteBuildpackStub != nil {
		return fake.DeleteBuildpackStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteBuildpackReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteBuildpackCallCount() int {
	fake.deleteBuildpackMutex.RLock()
	defer fake.deleteBuildpackMutex.RUnlock()
	return len(fake.deleteBuildpackArgsForCall)
}

func (fake *FakeCFClient) DeleteBuildpackCalls(stub func(string, bool) error) {
	fake.deleteBuildpackMutex.Lock()
	defer fake.deleteBuildpackMutex.Unlock()
	fake.DeleteBuildpackStub = stub
}

func (fake *FakeCFClient) DeleteBuildpackArgsForCall(i int) (string, bool) {
	fake.deleteBuildpackMutex.RLock()
	defer fake.deleteBuildpackMutex.RUnlock()
	argsForCall := fake.deleteBuildpackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) DeleteBuildpackReturns(result1 error) {
	fake.deleteBuildpackMutex.Lock()
	defer fake.deleteBuildpackMutex.Unlock()
	fake.DeleteBuildpackStub = nil
	fake.deleteBuildpackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteBuildpackReturnsOnCall(i int, result1 error) {
	fake.deleteBuildpackMutex.Lock()
	defer fake.deleteBuildpackMutex.Unlock()
	fake.DeleteBuildpackStub = nil
	if fake.deleteBuildpackReturnsOnCall == nil {
		fake.deleteBuildpackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBuildpackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteDomain(arg1 string) error {
	fake.deleteDomainMutex.Lock()
	ret, specificReturn := fake.deleteDomainReturnsOnCall[len(fake.deleteDomainArgsForCall)]
	fake.deleteDomainArgsForCall = append(fake.deleteDomainArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteDomain", []interface{}{arg1})
	fake.deleteDomainMutex.Unlock()
	if fake.DeleteDomainStub != nil {
		return fake.DeleteDomainStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteDomainReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteDomainCallCount() int {
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	return len(fake.deleteDomainArgsForCall)
}

func (fake *FakeCFClient) DeleteDomainCalls(stub func(string) error) {
	fake.deleteDomainMutex.Lock()
	defer fake.deleteDomainMutex.Unlock()
	fake.DeleteDomainStub = stub
}

func (fake *FakeCFClient) DeleteDomainArgsForCall(i int) string {
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	argsForCall := fake.deleteDomainArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteDomainReturns(result1 error) {
	fake.deleteDomainMutex.Lock()
	defer fake.deleteDomainMutex.Unlock()
	fake.DeleteDomainStub = nil
	fake.deleteDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteDomainReturnsOnCall(i int, result1 error) {
	fake.deleteDomainMutex.Lock()
	defer fake.deleteDomainMutex.Unlock()
	fake.DeleteDomainStub = nil
	if fake.deleteDomainReturnsOnCall == nil {
		fake.deleteDomainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteDomainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUID(arg1 string) error {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	ret, specificReturn := fake.deleteIsolationSegmentByGUIDReturnsOnCall[len(fake.deleteIsolationSegmentByGUIDArgsForCall)]
	fake.deleteIsolationSegmentByGUIDArgsForCall = append(fake.deleteIsolationSegmentByGUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteIsolationSegmentByGUID", []interface{}{arg1})
	fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	if fake.DeleteIsolationSegmentByGUIDStub != nil {
		return fake.DeleteIsolationSegmentByGUIDStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteIsolationSegmentByGUIDReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDCallCount() int {
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	return len(fake.deleteIsolationSegmentByGUIDArgsForCall)
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDCalls(stub func(string) error) {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	defer fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	fake.DeleteIsolationSegmentByGUIDStub = stub
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDArgsForCall(i int) string {
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	argsForCall := fake.deleteIsolationSegmentByGUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDReturns(result1 error) {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	defer fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	fake.DeleteIsolationSegmentByGUIDStub = nil
	fake.deleteIsolationSegmentByGUIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDReturnsOnCall(i int, result1 error) {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	defer fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	fake.DeleteIsolationSegmentByGUIDStub = nil
	if fake.deleteIsolationSegmentByGUIDReturnsOnCall == nil {
		fake.deleteIsolationSegmentByGUIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteIsolationSegmentByGUIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteOrg(arg1 string, arg2 bool, arg3 bool) error {
	fake.deleteOrgMutex.Lock()
	ret, specificReturn := fake.deleteOrgReturnsOnCall[len(fake.deleteOrgArgsForCall)]
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteOrg", []interface{}{arg1, arg2, arg3})
	fake.deleteOrgMutex.Unlock()
	if fake.DeleteOrgStub != nil {
		return fake.DeleteOrgStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteOrgReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *FakeCFClient) DeleteOrgCalls(stub func(string, bool, bool) error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = stub
}

func (fake *FakeCFClient) DeleteOrgArgsForCall(i int) (string, bool, bool) {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	argsForCall := fake.deleteOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) DeleteOrgReturns(result1 error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteOrgReturnsOnCall(i int, result1 error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	if fake.deleteOrgReturnsOnCall == nil {
		fake.deleteOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteOrgQuota(arg1 string, arg2 bool) error {
	fake.deleteOrgQuotaMutex.Lock()
	ret, specificReturn := fake.deleteOrgQuotaReturnsOnCall[len(fake.deleteOrgQuotaArgsForCall)]
	fake.deleteOrgQuotaArgsForCall = append(fake.deleteOrgQuotaArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("DeleteOrgQuota", []interface{}{arg1, arg2})
	fake.deleteOrgQuotaMutex.Unlock()
	if fake.DeleteOrgQuotaStub != nil {
		return fake.DeleteOrgQuotaStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteOrgQuotaReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteOrgQuotaCallCount() int {
	fake.deleteOrgQuotaMutex.RLock()
	defer fake.deleteOrgQuotaMutex.RUnlock()
	return len(fake.deleteOrgQuotaArgsForCall)
}

func (fake *FakeCFClient) DeleteOrgQuotaCalls(stub func(string, bool) error) {
	fake.deleteOrgQuotaMutex.Lock()
	defer fake.deleteOrgQuotaMutex.Unlock()
	fake.DeleteOrgQuotaStub = stub
}

func (fake *FakeCFClient) DeleteOrgQuotaArgsForCall(i int) (string, bool) {
	fake.deleteOrgQuotaMutex.RLock()
	defer fake.deleteOrgQuotaMutex.RUnlock()
	argsForCall := fake.deleteOrgQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) DeleteOrgQuotaReturns(result1 error) {
	fake.deleteOrgQuotaMutex.Lock()
	defer fake.deleteOrgQuotaMutex.Unlock()
	fake.DeleteOrgQuotaStub = nil
	fake.deleteOrgQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteOrgQuotaReturnsOnCall(i int, result1 error) {
	fake.deleteOrgQuotaMutex.Lock()
	defer fake.deleteOrgQuotaMutex.Unlock()
	fake.DeleteOrgQuotaStub = nil
	if fake.deleteOrgQuotaReturnsOnCall == nil {
		fake.deleteOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOrgQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteRoute(arg1 string) error {
	fake.deleteRouteMutex.Lock()
	ret, specificReturn := fake.deleteRouteReturnsOnCall[len(fake.deleteRouteArgsForCall)]
	fake.deleteRouteArgsForCall = append(fake.deleteRouteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteRoute", []interface{}{arg1})
	fake.deleteRouteMutex.Unlock()
	if fake.DeleteRouteStub != nil {
		return fake.DeleteRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteRouteReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteRouteCallCount() int {
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	return len(fake.deleteRouteArgsForCall)
}

func (fake *FakeCFClient) DeleteRouteCalls(stub func(string) error) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = stub
}

func (fake *FakeCFClient) DeleteRouteArgsForCall(i int) string {
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	argsForCall := fake.deleteRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteRouteReturns(result1 error) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = nil
	fake.deleteRouteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteRouteReturnsOnCall(i int, result1 error) {
	fake.deleteRouteMutex.Lock()
	defer fake.deleteRouteMutex.Unlock()
	fake.DeleteRouteStub = nil
	if fake.deleteRouteReturnsOnCall == nil {
		fake.deleteRouteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRouteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteRouteMapping(arg1 string) error {
	fake.deleteRouteMappingMutex.Lock()
	ret, specificReturn := fake.deleteRouteMappingReturnsOnCall[len(fake.deleteRouteMappingArgsForCall)]
	fake.deleteRouteMappingArgsForCall = append(fake.deleteRouteMappingArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteRouteMapping", []interface{}{arg1})
	fake.deleteRouteMappingMutex.Unlock()
	if fake.DeleteRouteMappingStub != nil {
		return fake.DeleteRouteMappingStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteRouteMappingReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteRouteMappingCallCount() int {
	fake.deleteRouteMappingMutex.RLock()
	defer fake.deleteRouteMappingMutex.RUnlock()
	return len(fake.deleteRouteMappingArgsForCall)
}

func (fake *FakeCFClient) DeleteRouteMappingCalls(stub func(string) error) {
	fake.deleteRouteMappingMutex.Lock()
	defer fake.deleteRouteMappingMutex.Unlock()
	fake.DeleteRouteMappingStub = stub
}

func (fake *FakeCFClient) DeleteRouteMappingArgsForCall(i int) string {
	fake.deleteRouteMappingMutex.RLock()
	defer fake.deleteRouteMappingMutex.RUnlock()
	argsForCall := fake.deleteRouteMappingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteRouteMappingReturns(result1 error) {
	fake.deleteRouteMappingMutex.Lock()
	defer fake.deleteRouteMappingMutex.Unlock()
	fake.DeleteRouteMappingStub = nil
	fake.deleteRouteMappingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteRouteMappingReturnsOnCall(i int, result1 error) {
	fake.deleteRouteMappingMutex.Lock()
	defer fake.deleteRouteMappingMutex.Unlock()
	fake.DeleteRouteMappingStub = nil
	if fake.deleteRouteMappingReturnsOnCall == nil {
		fake.deleteRouteMappingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRouteMappingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteRouteServiceBinding(arg1 string, arg2 string) error {
	fake.deleteRouteServiceBindingMutex.Lock()
	ret, specificReturn := fake.deleteRouteServiceBindingReturnsOnCall[len(fake.deleteRouteServiceBindingArgsForCall)]
	fake.deleteRouteServiceBindingArgsForCall = append(fake.deleteRouteServiceBindingArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteRouteServiceBinding", []interface{}{arg1, arg2})
	fake.deleteRouteServiceBindingMutex.Unlock()
	if fake.DeleteRouteServiceBindingStub != nil {
		return fake.DeleteRouteServiceBindingStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteRouteServiceBindingReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteRouteServiceBindingCallCount() int {
	fake.deleteRouteServiceBindingMutex.RLock()
	defer fake.deleteRouteServiceBindingMutex.RUnlock()
	return len(fake.deleteRouteServiceBindingArgsForCall)
}

func (fake *FakeCFClient) DeleteRouteServiceBindingCalls(stub func(string, string) error) {
	fake.deleteRouteServiceBindingMutex.Lock()
	defer fake.deleteRouteServiceBindingMutex.Unlock()
	fake.DeleteRouteServiceBindingStub = stub
}

func (fake *FakeCFClient) DeleteRouteServiceBindingArgsForCall(i int) (string, string) {
	fake.deleteRouteServiceBindingMutex.RLock()
	defer fake.deleteRouteServiceBindingMutex.RUnlock()
	argsForCall := fake.deleteRouteServiceBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) DeleteRouteServiceBindingReturns(result1 error) {
	fake.deleteRouteServiceBindingMutex.Lock()
	defer fake.deleteRouteServiceBindingMutex.Unlock()
	fake.DeleteRouteServiceBindingStub = nil
	fake.deleteRouteServiceBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteRouteServiceBindingReturnsOnCall(i int, result1 error) {
	fake.deleteRouteServiceBindingMutex.Lock()
	defer fake.deleteRouteServiceBindingMutex.Unlock()
	fake.DeleteRouteServiceBindingStub = nil
	if fake.deleteRouteServiceBindingReturnsOnCall == nil {
		fake.deleteRouteServiceBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteRouteServiceBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteSecGroup(arg1 string) error {
	fake.deleteSecGroupMutex.Lock()
	ret, specificReturn := fake.deleteSecGroupReturnsOnCall[len(fake.deleteSecGroupArgsForCall)]
	fake.deleteSecGroupArgsForCall = append(fake.deleteSecGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteSecGroup", []interface{}{arg1})
	fake.deleteSecGroupMutex.Unlock()
	if fake.DeleteSecGroupStub != nil {
		return fake.DeleteSecGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteSecGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteSecGroupCallCount() int {
	fake.deleteSecGroupMutex.RLock()
	defer fake.deleteSecGroupMutex.RUnlock()
	return len(fake.deleteSecGroupArgsForCall)
}

func (fake *FakeCFClient) DeleteSecGroupCalls(stub func(string) error) {
	fake.deleteSecGroupMutex.Lock()
	defer fake.deleteSecGroupMutex.Unlock()
	fake.DeleteSecGroupStub = stub
}

func (fake *FakeCFClient) DeleteSecGroupArgsForCall(i int) string {
	fake.deleteSecGroupMutex.RLock()
	defer fake.deleteSecGroupMutex.RUnlock()
	argsForCall := fake.deleteSecGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteSecGroupReturns(result1 error) {
	fake.deleteSecGroupMutex.Lock()
	defer fake.deleteSecGroupMutex.Unlock()
	fake.DeleteSecGroupStub = nil
	fake.deleteSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteSecGroupReturnsOnCall(i int, result1 error) {
	fake.deleteSecGroupMutex.Lock()
	defer fake.deleteSecGroupMutex.Unlock()
	fake.DeleteSecGroupStub = nil
	if fake.deleteSecGroupReturnsOnCall == nil {
		fake.deleteSecGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSecGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServiceBinding(arg1 string) error {
	fake.deleteServiceBindingMutex.Lock()
	ret, specificReturn := fake.deleteServiceBindingReturnsOnCall[len(fake.deleteServiceBindingArgsForCall)]
	fake.deleteServiceBindingArgsForCall = append(fake.deleteServiceBindingArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteServiceBinding", []interface{}{arg1})
	fake.deleteServiceBindingMutex.Unlock()
	if fake.DeleteServiceBindingStub != nil {
		return fake.DeleteServiceBindingStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServiceBindingReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteServiceBindingCallCount() int {
	fake.deleteServiceBindingMutex.RLock()
	defer fake.deleteServiceBindingMutex.RUnlock()
	return len(fake.deleteServiceBindingArgsForCall)
}

func (fake *FakeCFClient) DeleteServiceBindingCalls(stub func(string) error) {
	fake.deleteServiceBindingMutex.Lock()
	defer fake.deleteServiceBindingMutex.Unlock()
	fake.DeleteServiceBindingStub = stub
}

func (fake *FakeCFClient) DeleteServiceBindingArgsForCall(i int) string {
	fake.deleteServiceBindingMutex.RLock()
	defer fake.deleteServiceBindingMutex.RUnlock()
	argsForCall := fake.deleteServiceBindingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteServiceBindingReturns(result1 error) {
	fake.deleteServiceBindingMutex.Lock()
	defer fake.deleteServiceBindingMutex.Unlock()
	fake.DeleteServiceBindingStub = nil
	fake.deleteServiceBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServiceBindingReturnsOnCall(i int, result1 error) {
	fake.deleteServiceBindingMutex.Lock()
	defer fake.deleteServiceBindingMutex.Unlock()
	fake.DeleteServiceBindingStub = nil
	if fake.deleteServiceBindingReturnsOnCall == nil {
		fake.deleteServiceBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServiceBroker(arg1 string) error {
	fake.deleteServiceBrokerMutex.Lock()
	ret, specificReturn := fake.deleteServiceBrokerReturnsOnCall[len(fake.deleteServiceBrokerArgsForCall)]
	fake.deleteServiceBrokerArgsForCall = append(fake.deleteServiceBrokerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteServiceBroker", []interface{}{arg1})
	fake.deleteServiceBrokerMutex.Unlock()
	if fake.DeleteServiceBrokerStub != nil {
		return fake.DeleteServiceBrokerStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServiceBrokerReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteServiceBrokerCallCount() int {
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	return len(fake.deleteServiceBrokerArgsForCall)
}

func (fake *FakeCFClient) DeleteServiceBrokerCalls(stub func(string) error) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = stub
}

func (fake *FakeCFClient) DeleteServiceBrokerArgsForCall(i int) string {
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	argsForCall := fake.deleteServiceBrokerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteServiceBrokerReturns(result1 error) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = nil
	fake.deleteServiceBrokerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServiceBrokerReturnsOnCall(i int, result1 error) {
	fake.deleteServiceBrokerMutex.Lock()
	defer fake.deleteServiceBrokerMutex.Unlock()
	fake.DeleteServiceBrokerStub = nil
	if fake.deleteServiceBrokerReturnsOnCall == nil {
		fake.deleteServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceBrokerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServiceInstance(arg1 string, arg2 bool, arg3 bool) error {
	fake.deleteServiceInstanceMutex.Lock()
	ret, specificReturn := fake.deleteServiceInstanceReturnsOnCall[len(fake.deleteServiceInstanceArgsForCall)]
	fake.deleteServiceInstanceArgsForCall = append(fake.deleteServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteServiceInstance", []interface{}{arg1, arg2, arg3})
	fake.deleteServiceInstanceMutex.Unlock()
	if fake.DeleteServiceInstanceStub != nil {
		return fake.DeleteServiceInstanceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServiceInstanceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteServiceInstanceCallCount() int {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	return len(fake.deleteServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) DeleteServiceInstanceCalls(stub func(string, bool, bool) error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = stub
}

func (fake *FakeCFClient) DeleteServiceInstanceArgsForCall(i int) (string, bool, bool) {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	argsForCall := fake.deleteServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) DeleteServiceInstanceReturns(result1 error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = nil
	fake.deleteServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServiceInstanceReturnsOnCall(i int, result1 error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = nil
	if fake.deleteServiceInstanceReturnsOnCall == nil {
		fake.deleteServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServiceKey(arg1 string) error {
	fake.deleteServiceKeyMutex.Lock()
	ret, specificReturn := fake.deleteServiceKeyReturnsOnCall[len(fake.deleteServiceKeyArgsForCall)]
	fake.deleteServiceKeyArgsForCall = append(fake.deleteServiceKeyArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteServiceKey", []interface{}{arg1})
	fake.deleteServiceKeyMutex.Unlock()
	if fake.DeleteServiceKeyStub != nil {
		return fake.DeleteServiceKeyStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServiceKeyReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteServiceKeyCallCount() int {
	fake.deleteServiceKeyMutex.RLock()
	defer fake.deleteServiceKeyMutex.RUnlock()
	return len(fake.deleteServiceKeyArgsForCall)
}

func (fake *FakeCFClient) DeleteServiceKeyCalls(stub func(string) error) {
	fake.deleteServiceKeyMutex.Lock()
	defer fake.deleteServiceKeyMutex.Unlock()
	fake.DeleteServiceKeyStub = stub
}

func (fake *FakeCFClient) DeleteServiceKeyArgsForCall(i int) string {
	fake.deleteServiceKeyMutex.RLock()
	defer fake.deleteServiceKeyMutex.RUnlock()
	argsForCall := fake.deleteServiceKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteServiceKeyReturns(result1 error) {
	fake.deleteServiceKeyMutex.Lock()
	defer fake.deleteServiceKeyMutex.Unlock()
	fake.DeleteServiceKeyStub = nil
	fake.deleteServiceKeyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServiceKeyReturnsOnCall(i int, result1 error) {
	fake.deleteServiceKeyMutex.Lock()
	defer fake.deleteServiceKeyMutex.Unlock()
	fake.DeleteServiceKeyStub = nil
	if fake.deleteServiceKeyReturnsOnCall == nil {
		fake.deleteServiceKeyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceKeyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServicePlanVisibility(arg1 string, arg2 bool) error {
	fake.deleteServicePlanVisibilityMutex.Lock()
	ret, specificReturn := fake.deleteServicePlanVisibilityReturnsOnCall[len(fake.deleteServicePlanVisibilityArgsForCall)]
	fake.deleteServicePlanVisibilityArgsForCall = append(fake.deleteServicePlanVisibilityArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("DeleteServicePlanVisibility", []interface{}{arg1, arg2})
	fake.deleteServicePlanVisibilityMutex.Unlock()
	if fake.DeleteServicePlanVisibilityStub != nil {
		return fake.DeleteServicePlanVisibilityStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServicePlanVisibilityReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityCallCount() int {
	fake.deleteServicePlanVisibilityMutex.RLock()
	defer fake.deleteServicePlanVisibilityMutex.RUnlock()
	return len(fake.deleteServicePlanVisibilityArgsForCall)
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityCalls(stub func(string, bool) error) {
	fake.deleteServicePlanVisibilityMutex.Lock()
	defer fake.deleteServicePlanVisibilityMutex.Unlock()
	fake.DeleteServicePlanVisibilityStub = stub
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityArgsForCall(i int) (string, bool) {
	fake.deleteServicePlanVisibilityMutex.RLock()
	defer fake.deleteServicePlanVisibilityMutex.RUnlock()
	argsForCall := fake.deleteServicePlanVisibilityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityReturns(result1 error) {
	fake.deleteServicePlanVisibilityMutex.Lock()
	defer fake.deleteServicePlanVisibilityMutex.Unlock()
	fake.DeleteServicePlanVisibilityStub = nil
	fake.deleteServicePlanVisibilityReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityReturnsOnCall(i int, result1 error) {
	fake.deleteServicePlanVisibilityMutex.Lock()
	defer fake.deleteServicePlanVisibilityMutex.Unlock()
	fake.DeleteServicePlanVisibilityStub = nil
	if fake.deleteServicePlanVisibilityReturnsOnCall == nil {
		fake.deleteServicePlanVisibilityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServicePlanVisibilityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrg(arg1 string, arg2 string, arg3 bool) error {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	ret, specificReturn := fake.deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall[len(fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall)]
	fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall = append(fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteServicePlanVisibilityByPlanAndOrg", []interface{}{arg1, arg2, arg3})
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	if fake.DeleteServicePlanVisibilityByPlanAndOrgStub != nil {
		return fake.DeleteServicePlanVisibilityByPlanAndOrgStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteServicePlanVisibilityByPlanAndOrgReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgCallCount() int {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	return len(fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall)
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgCalls(stub func(string, string, bool) error) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	fake.DeleteServicePlanVisibilityByPlanAndOrgStub = stub
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgArgsForCall(i int) (string, string, bool) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	argsForCall := fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgReturns(result1 error) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	fake.DeleteServicePlanVisibilityByPlanAndOrgStub = nil
	fake.deleteServicePlanVisibilityByPlanAndOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgReturnsOnCall(i int, result1 error) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	fake.DeleteServicePlanVisibilityByPlanAndOrgStub = nil
	if fake.deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall == nil {
		fake.deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteSharedDomain(arg1 string, arg2 bool) error {
	fake.deleteSharedDomainMutex.Lock()
	ret, specificReturn := fake.deleteSharedDomainReturnsOnCall[len(fake.deleteSharedDomainArgsForCall)]
	fake.deleteSharedDomainArgsForCall = append(fake.deleteSharedDomainArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	fake.recordInvocation("DeleteSharedDomain", []interface{}{arg1, arg2})
	fake.deleteSharedDomainMutex.Unlock()
	if fake.DeleteSharedDomainStub != nil {
		return fake.DeleteSharedDomainStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteSharedDomainReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteSharedDomainCallCount() int {
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	return len(fake.deleteSharedDomainArgsForCall)
}

func (fake *FakeCFClient) DeleteSharedDomainCalls(stub func(string, bool) error) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = stub
}

func (fake *FakeCFClient) DeleteSharedDomainArgsForCall(i int) (string, bool) {
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	argsForCall := fake.deleteSharedDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) DeleteSharedDomainReturns(result1 error) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = nil
	fake.deleteSharedDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteSharedDomainReturnsOnCall(i int, result1 error) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = nil
	if fake.deleteSharedDomainReturnsOnCall == nil {
		fake.deleteSharedDomainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSharedDomainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteSpace(arg1 string, arg2 bool, arg3 bool) error {
	fake.deleteSpaceMutex.Lock()
	ret, specificReturn := fake.deleteSpaceReturnsOnCall[len(fake.deleteSpaceArgsForCall)]
	fake.deleteSpaceArgsForCall = append(fake.deleteSpaceArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteSpace", []interface{}{arg1, arg2, arg3})
	fake.deleteSpaceMutex.Unlock()
	if fake.DeleteSpaceStub != nil {
		return fake.DeleteSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteSpaceCallCount() int {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	return len(fake.deleteSpaceArgsForCall)
}

func (fake *FakeCFClient) DeleteSpaceCalls(stub func(string, bool, bool) error) {
	fake.deleteSpaceMutex.Lock()
	defer fake.deleteSpaceMutex.Unlock()
	fake.DeleteSpaceStub = stub
}

func (fake *FakeCFClient) DeleteSpaceArgsForCall(i int) (string, bool, bool) {
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	argsForCall := fake.deleteSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) DeleteSpaceReturns(result1 error) {
	fake.deleteSpaceMutex.Lock()
	defer fake.deleteSpaceMutex.Unlock()
	fake.DeleteSpaceStub = nil
	fake.deleteSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteSpaceReturnsOnCall(i int, result1 error) {
	fake.deleteSpaceMutex.Lock()
	defer fake.deleteSpaceMutex.Unlock()
	fake.DeleteSpaceStub = nil
	if fake.deleteSpaceReturnsOnCall == nil {
		fake.deleteSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteUser(arg1 string) error {
	fake.deleteUserMutex.Lock()
	ret, specificReturn := fake.deleteUserReturnsOnCall[len(fake.deleteUserArgsForCall)]
	fake.deleteUserArgsForCall = append(fake.deleteUserArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteUser", []interface{}{arg1})
	fake.deleteUserMutex.Unlock()
	if fake.DeleteUserStub != nil {
		return fake.DeleteUserStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteUserReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteUserCallCount() int {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	return len(fake.deleteUserArgsForCall)
}

func (fake *FakeCFClient) DeleteUserCalls(stub func(string) error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = stub
}

func (fake *FakeCFClient) DeleteUserArgsForCall(i int) string {
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	argsForCall := fake.deleteUserArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteUserReturns(result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	fake.deleteUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteUserReturnsOnCall(i int, result1 error) {
	fake.deleteUserMutex.Lock()
	defer fake.deleteUserMutex.Unlock()
	fake.DeleteUserStub = nil
	if fake.deleteUserReturnsOnCall == nil {
		fake.deleteUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteUserProvidedServiceInstance(arg1 string) error {
	fake.deleteUserProvidedServiceInstanceMutex.Lock()
	ret, specificReturn := fake.deleteUserProvidedServiceInstanceReturnsOnCall[len(fake.deleteUserProvidedServiceInstanceArgsForCall)]
	fake.deleteUserProvidedServiceInstanceArgsForCall = append(fake.deleteUserProvidedServiceInstanceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeleteUserProvidedServiceInstance", []interface{}{arg1})
	fake.deleteUserProvidedServiceInstanceMutex.Unlock()
	if fake.DeleteUserProvidedServiceInstanceStub != nil {
		return fake.DeleteUserProvidedServiceInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteUserProvidedServiceInstanceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteUserProvidedServiceInstanceCallCount() int {
	fake.deleteUserProvidedServiceInstanceMutex.RLock()
	defer fake.deleteUserProvidedServiceInstanceMutex.RUnlock()
	return len(fake.deleteUserProvidedServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) DeleteUserProvidedServiceInstanceCalls(stub func(string) error) {
	fake.deleteUserProvidedServiceInstanceMutex.Lock()
	defer fake.deleteUserProvidedServiceInstanceMutex.Unlock()
	fake.DeleteUserProvidedServiceInstanceStub = stub
}

func (fake *FakeCFClient) DeleteUserProvidedServiceInstanceArgsForCall(i int) string {
	fake.deleteUserProvidedServiceInstanceMutex.RLock()
	defer fake.deleteUserProvidedServiceInstanceMutex.RUnlock()
	argsForCall := fake.deleteUserProvidedServiceInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteUserProvidedServiceInstanceReturns(result1 error) {
	fake.deleteUserProvidedServiceInstanceMutex.Lock()
	defer fake.deleteUserProvidedServiceInstanceMutex.Unlock()
	fake.DeleteUserProvidedServiceInstanceStub = nil
	fake.deleteUserProvidedServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteUserProvidedServiceInstanceReturnsOnCall(i int, result1 error) {
	fake.deleteUserProvidedServiceInstanceMutex.Lock()
	defer fake.deleteUserProvidedServiceInstanceMutex.Unlock()
	fake.DeleteUserProvidedServiceInstanceStub = nil
	if fake.deleteUserProvidedServiceInstanceReturnsOnCall == nil {
		fake.deleteUserProvidedServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteUserProvidedServiceInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Do(arg1 *http.Request) (*http.Response, error) {
	fake.doMutex.Lock()
	ret, specificReturn := fake.doReturnsOnCall[len(fake.doArgsForCall)]
	fake.doArgsForCall = append(fake.doArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("Do", []interface{}{arg1})
	fake.doMutex.Unlock()
	if fake.DoStub != nil {
		return fake.DoStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.doReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) DoCallCount() int {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return len(fake.doArgsForCall)
}

func (fake *FakeCFClient) DoCalls(stub func(*http.Request) (*http.Response, error)) {
	fake.doMutex.Lock()
	defer fake.doMutex.Unlock()
	fake.DoStub = stub
}

func (fake *FakeCFClient) DoArgsForCall(i int) *http.Request {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	argsForCall := fake.doArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DoReturns(result1 *http.Response, result2 error) {
	fake.doMutex.Lock()
	defer fake.doMutex.Unlock()
	fake.DoStub = nil
	fake.doReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DoReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.doMutex.Lock()
	defer fake.doMutex.Unlock()
	fake.DoStub = nil
	if fake.doReturnsOnCall == nil {
		fake.doReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.doReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DoRequest(arg1 *cfclient.Request) (*http.Response, error) {
	fake.doRequestMutex.Lock()
	ret, specificReturn := fake.doRequestReturnsOnCall[len(fake.doRequestArgsForCall)]
	fake.doRequestArgsForCall = append(fake.doRequestArgsForCall, struct {
		arg1 *cfclient.Request
	}{arg1})
	fake.recordInvocation("DoRequest", []interface{}{arg1})
	fake.doRequestMutex.Unlock()
	if fake.DoRequestStub != nil {
		return fake.DoRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.doRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) DoRequestCallCount() int {
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	return len(fake.doRequestArgsForCall)
}

func (fake *FakeCFClient) DoRequestCalls(stub func(*cfclient.Request) (*http.Response, error)) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = stub
}

func (fake *FakeCFClient) DoRequestArgsForCall(i int) *cfclient.Request {
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	argsForCall := fake.doRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DoRequestReturns(result1 *http.Response, result2 error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = nil
	fake.doRequestReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DoRequestReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = nil
	if fake.doRequestReturnsOnCall == nil {
		fake.doRequestReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.doRequestReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DoRequestWithoutRedirects(arg1 *cfclient.Request) (*http.Response, error) {
	fake.doRequestWithoutRedirectsMutex.Lock()
	ret, specificReturn := fake.doRequestWithoutRedirectsReturnsOnCall[len(fake.doRequestWithoutRedirectsArgsForCall)]
	fake.doRequestWithoutRedirectsArgsForCall = append(fake.doRequestWithoutRedirectsArgsForCall, struct {
		arg1 *cfclient.Request
	}{arg1})
	fake.recordInvocation("DoRequestWithoutRedirects", []interface{}{arg1})
	fake.doRequestWithoutRedirectsMutex.Unlock()
	if fake.DoRequestWithoutRedirectsStub != nil {
		return fake.DoRequestWithoutRedirectsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.doRequestWithoutRedirectsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) DoRequestWithoutRedirectsCallCount() int {
	fake.doRequestWithoutRedirectsMutex.RLock()
	defer fake.doRequestWithoutRedirectsMutex.RUnlock()
	return len(fake.doRequestWithoutRedirectsArgsForCall)
}

func (fake *FakeCFClient) DoRequestWithoutRedirectsCalls(stub func(*cfclient.Request) (*http.Response, error)) {
	fake.doRequestWithoutRedirectsMutex.Lock()
	defer fake.doRequestWithoutRedirectsMutex.Unlock()
	fake.DoRequestWithoutRedirectsStub = stub
}

func (fake *FakeCFClient) DoRequestWithoutRedirectsArgsForCall(i int) *cfclient.Request {
	fake.doRequestWithoutRedirectsMutex.RLock()
	defer fake.doRequestWithoutRedirectsMutex.RUnlock()
	argsForCall := fake.doRequestWithoutRedirectsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DoRequestWithoutRedirectsReturns(result1 *http.Response, result2 error) {
	fake.doRequestWithoutRedirectsMutex.Lock()
	defer fake.doRequestWithoutRedirectsMutex.Unlock()
	fake.DoRequestWithoutRedirectsStub = nil
	fake.doRequestWithoutRedirectsReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DoRequestWithoutRedirectsReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.doRequestWithoutRedirectsMutex.Lock()
	defer fake.doRequestWithoutRedirectsMutex.Unlock()
	fake.DoRequestWithoutRedirectsStub = nil
	if fake.doRequestWithoutRedirectsReturnsOnCall == nil {
		fake.doRequestWithoutRedirectsReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.doRequestWithoutRedirectsReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppBits(arg1 string) (io.ReadCloser, error) {
	fake.getAppBitsMutex.Lock()
	ret, specificReturn := fake.getAppBitsReturnsOnCall[len(fake.getAppBitsArgsForCall)]
	fake.getAppBitsArgsForCall = append(fake.getAppBitsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppBits", []interface{}{arg1})
	fake.getAppBitsMutex.Unlock()
	if fake.GetAppBitsStub != nil {
		return fake.GetAppBitsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppBitsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetAppBitsCallCount() int {
	fake.getAppBitsMutex.RLock()
	defer fake.getAppBitsMutex.RUnlock()
	return len(fake.getAppBitsArgsForCall)
}

func (fake *FakeCFClient) GetAppBitsCalls(stub func(string) (io.ReadCloser, error)) {
	fake.getAppBitsMutex.Lock()
	defer fake.getAppBitsMutex.Unlock()
	fake.GetAppBitsStub = stub
}

func (fake *FakeCFClient) GetAppBitsArgsForCall(i int) string {
	fake.getAppBitsMutex.RLock()
	defer fake.getAppBitsMutex.RUnlock()
	argsForCall := fake.getAppBitsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetAppBitsReturns(result1 io.ReadCloser, result2 error) {
	fake.getAppBitsMutex.Lock()
	defer fake.getAppBitsMutex.Unlock()
	fake.GetAppBitsStub = nil
	fake.getAppBitsReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppBitsReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.getAppBitsMutex.Lock()
	defer fake.getAppBitsMutex.Unlock()
	fake.GetAppBitsStub = nil
	if fake.getAppBitsReturnsOnCall == nil {
		fake.getAppBitsReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.getAppBitsReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppByGuid(arg1 string) (cfclient.App, error) {
	fake.getAppByGuidMutex.Lock()
	ret, specificReturn := fake.getAppByGuidReturnsOnCall[len(fake.getAppByGuidArgsForCall)]
	fake.getAppByGuidArgsForCall = append(fake.getAppByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppByGuid", []interface{}{arg1})
	fake.getAppByGuidMutex.Unlock()
	if fake.GetAppByGuidStub != nil {
		return fake.GetAppByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetAppByGuidCallCount() int {
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	return len(fake.getAppByGuidArgsForCall)
}

func (fake *FakeCFClient) GetAppByGuidCalls(stub func(string) (cfclient.App, error)) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = stub
}

func (fake *FakeCFClient) GetAppByGuidArgsForCall(i int) string {
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	argsForCall := fake.getAppByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetAppByGuidReturns(result1 cfclient.App, result2 error) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = nil
	fake.getAppByGuidReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppByGuidReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = nil
	if fake.getAppByGuidReturnsOnCall == nil {
		fake.getAppByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.getAppByGuidReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppByGuidNoInlineCall(arg1 string) (cfclient.App, error) {
	fake.getAppByGuidNoInlineCallMutex.Lock()
	ret, specificReturn := fake.getAppByGuidNoInlineCallReturnsOnCall[len(fake.getAppByGuidNoInlineCallArgsForCall)]
	fake.getAppByGuidNoInlineCallArgsForCall = append(fake.getAppByGuidNoInlineCallArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppByGuidNoInlineCall", []interface{}{arg1})
	fake.getAppByGuidNoInlineCallMutex.Unlock()
	if fake.GetAppByGuidNoInlineCallStub != nil {
		return fake.GetAppByGuidNoInlineCallStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppByGuidNoInlineCallReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetAppByGuidNoInlineCallCallCount() int {
	fake.getAppByGuidNoInlineCallMutex.RLock()
	defer fake.getAppByGuidNoInlineCallMutex.RUnlock()
	return len(fake.getAppByGuidNoInlineCallArgsForCall)
}

func (fake *FakeCFClient) GetAppByGuidNoInlineCallCalls(stub func(string) (cfclient.App, error)) {
	fake.getAppByGuidNoInlineCallMutex.Lock()
	defer fake.getAppByGuidNoInlineCallMutex.Unlock()
	fake.GetAppByGuidNoInlineCallStub = stub
}

func (fake *FakeCFClient) GetAppByGuidNoInlineCallArgsForCall(i int) string {
	fake.getAppByGuidNoInlineCallMutex.RLock()
	defer fake.getAppByGuidNoInlineCallMutex.RUnlock()
	argsForCall := fake.getAppByGuidNoInlineCallArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetAppByGuidNoInlineCallReturns(result1 cfclient.App, result2 error) {
	fake.getAppByGuidNoInlineCallMutex.Lock()
	defer fake.getAppByGuidNoInlineCallMutex.Unlock()
	fake.GetAppByGuidNoInlineCallStub = nil
	fake.getAppByGuidNoInlineCallReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppByGuidNoInlineCallReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.getAppByGuidNoInlineCallMutex.Lock()
	defer fake.getAppByGuidNoInlineCallMutex.Unlock()
	fake.GetAppByGuidNoInlineCallStub = nil
	if fake.getAppByGuidNoInlineCallReturnsOnCall == nil {
		fake.getAppByGuidNoInlineCallReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.getAppByGuidNoInlineCallReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppEnv(arg1 string) (cfclient.AppEnv, error) {
	fake.getAppEnvMutex.Lock()
	ret, specificReturn := fake.getAppEnvReturnsOnCall[len(fake.getAppEnvArgsForCall)]
	fake.getAppEnvArgsForCall = append(fake.getAppEnvArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppEnv", []interface{}{arg1})
	fake.getAppEnvMutex.Unlock()
	if fake.GetAppEnvStub != nil {
		return fake.GetAppEnvStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppEnvReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetAppEnvCallCount() int {
	fake.getAppEnvMutex.RLock()
	defer fake.getAppEnvMutex.RUnlock()
	return len(fake.getAppEnvArgsForCall)
}

func (fake *FakeCFClient) GetAppEnvCalls(stub func(string) (cfclient.AppEnv, error)) {
	fake.getAppEnvMutex.Lock()
	defer fake.getAppEnvMutex.Unlock()
	fake.GetAppEnvStub = stub
}

func (fake *FakeCFClient) GetAppEnvArgsForCall(i int) string {
	fake.getAppEnvMutex.RLock()
	defer fake.getAppEnvMutex.RUnlock()
	argsForCall := fake.getAppEnvArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetAppEnvReturns(result1 cfclient.AppEnv, result2 error) {
	fake.getAppEnvMutex.Lock()
	defer fake.getAppEnvMutex.Unlock()
	fake.GetAppEnvStub = nil
	fake.getAppEnvReturns = struct {
		result1 cfclient.AppEnv
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppEnvReturnsOnCall(i int, result1 cfclient.AppEnv, result2 error) {
	fake.getAppEnvMutex.Lock()
	defer fake.getAppEnvMutex.Unlock()
	fake.GetAppEnvStub = nil
	if fake.getAppEnvReturnsOnCall == nil {
		fake.getAppEnvReturnsOnCall = make(map[int]struct {
			result1 cfclient.AppEnv
			result2 error
		})
	}
	fake.getAppEnvReturnsOnCall[i] = struct {
		result1 cfclient.AppEnv
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppInstances(arg1 string) (map[string]cfclient.AppInstance, error) {
	fake.getAppInstancesMutex.Lock()
	ret, specificReturn := fake.getAppInstancesReturnsOnCall[len(fake.getAppInstancesArgsForCall)]
	fake.getAppInstancesArgsForCall = append(fake.getAppInstancesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppInstances", []interface{}{arg1})
	fake.getAppInstancesMutex.Unlock()
	if fake.GetAppInstancesStub != nil {
		return fake.GetAppInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetAppInstancesCallCount() int {
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	return len(fake.getAppInstancesArgsForCall)
}

func (fake *FakeCFClient) GetAppInstancesCalls(stub func(string) (map[string]cfclient.AppInstance, error)) {
	fake.getAppInstancesMutex.Lock()
	defer fake.getAppInstancesMutex.Unlock()
	fake.GetAppInstancesStub = stub
}

func (fake *FakeCFClient) GetAppInstancesArgsForCall(i int) string {
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	argsForCall := fake.getAppInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetAppInstancesReturns(result1 map[string]cfclient.AppInstance, result2 error) {
	fake.getAppInstancesMutex.Lock()
	defer fake.getAppInstancesMutex.Unlock()
	fake.GetAppInstancesStub = nil
	fake.getAppInstancesReturns = struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppInstancesReturnsOnCall(i int, result1 map[string]cfclient.AppInstance, result2 error) {
	fake.getAppInstancesMutex.Lock()
	defer fake.getAppInstancesMutex.Unlock()
	fake.GetAppInstancesStub = nil
	if fake.getAppInstancesReturnsOnCall == nil {
		fake.getAppInstancesReturnsOnCall = make(map[int]struct {
			result1 map[string]cfclient.AppInstance
			result2 error
		})
	}
	fake.getAppInstancesReturnsOnCall[i] = struct {
		result1 map[string]cfclient.AppInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppRoutes(arg1 string) ([]cfclient.Route, error) {
	fake.getAppRoutesMutex.Lock()
	ret, specificReturn := fake.getAppRoutesReturnsOnCall[len(fake.getAppRoutesArgsForCall)]
	fake.getAppRoutesArgsForCall = append(fake.getAppRoutesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppRoutes", []interface{}{arg1})
	fake.getAppRoutesMutex.Unlock()
	if fake.GetAppRoutesStub != nil {
		return fake.GetAppRoutesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppRoutesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetAppRoutesCallCount() int {
	fake.getAppRoutesMutex.RLock()
	defer fake.getAppRoutesMutex.RUnlock()
	return len(fake.getAppRoutesArgsForCall)
}

func (fake *FakeCFClient) GetAppRoutesCalls(stub func(string) ([]cfclient.Route, error)) {
	fake.getAppRoutesMutex.Lock()
	defer fake.getAppRoutesMutex.Unlock()
	fake.GetAppRoutesStub = stub
}

func (fake *FakeCFClient) GetAppRoutesArgsForCall(i int) string {
	fake.getAppRoutesMutex.RLock()
	defer fake.getAppRoutesMutex.RUnlock()
	argsForCall := fake.getAppRoutesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetAppRoutesReturns(result1 []cfclient.Route, result2 error) {
	fake.getAppRoutesMutex.Lock()
	defer fake.getAppRoutesMutex.Unlock()
	fake.GetAppRoutesStub = nil
	fake.getAppRoutesReturns = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppRoutesReturnsOnCall(i int, result1 []cfclient.Route, result2 error) {
	fake.getAppRoutesMutex.Lock()
	defer fake.getAppRoutesMutex.Unlock()
	fake.GetAppRoutesStub = nil
	if fake.getAppRoutesReturnsOnCall == nil {
		fake.getAppRoutesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Route
			result2 error
		})
	}
	fake.getAppRoutesReturnsOnCall[i] = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppStats(arg1 string) (map[string]cfclient.AppStats, error) {
	fake.getAppStatsMutex.Lock()
	ret, specificReturn := fake.getAppStatsReturnsOnCall[len(fake.getAppStatsArgsForCall)]
	fake.getAppStatsArgsForCall = append(fake.getAppStatsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetAppStats", []interface{}{arg1})
	fake.getAppStatsMutex.Unlock()
	if fake.GetAppStatsStub != nil {
		return fake.GetAppStatsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAppStatsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetAppStatsCallCount() int {
	fake.getAppStatsMutex.RLock()
	defer fake.getAppStatsMutex.RUnlock()
	return len(fake.getAppStatsArgsForCall)
}

func (fake *FakeCFClient) GetAppStatsCalls(stub func(string) (map[string]cfclient.AppStats, error)) {
	fake.getAppStatsMutex.Lock()
	defer fake.getAppStatsMutex.Unlock()
	fake.GetAppStatsStub = stub
}

func (fake *FakeCFClient) GetAppStatsArgsForCall(i int) string {
	fake.getAppStatsMutex.RLock()
	defer fake.getAppStatsMutex.RUnlock()
	argsForCall := fake.getAppStatsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetAppStatsReturns(result1 map[string]cfclient.AppStats, result2 error) {
	fake.getAppStatsMutex.Lock()
	defer fake.getAppStatsMutex.Unlock()
	fake.GetAppStatsStub = nil
	fake.getAppStatsReturns = struct {
		result1 map[string]cfclient.AppStats
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetAppStatsReturnsOnCall(i int, result1 map[string]cfclient.AppStats, result2 error) {
	fake.getAppStatsMutex.Lock()
	defer fake.getAppStatsMutex.Unlock()
	fake.GetAppStatsStub = nil
	if fake.getAppStatsReturnsOnCall == nil {
		fake.getAppStatsReturnsOnCall = make(map[int]struct {
			result1 map[string]cfclient.AppStats
			result2 error
		})
	}
	fake.getAppStatsReturnsOnCall[i] = struct {
		result1 map[string]cfclient.AppStats
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetBuildpackByGuid(arg1 string) (cfclient.Buildpack, error) {
	fake.getBuildpackByGuidMutex.Lock()
	ret, specificReturn := fake.getBuildpackByGuidReturnsOnCall[len(fake.getBuildpackByGuidArgsForCall)]
	fake.getBuildpackByGuidArgsForCall = append(fake.getBuildpackByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetBuildpackByGuid", []interface{}{arg1})
	fake.getBuildpackByGuidMutex.Unlock()
	if fake.GetBuildpackByGuidStub != nil {
		return fake.GetBuildpackByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBuildpackByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetBuildpackByGuidCallCount() int {
	fake.getBuildpackByGuidMutex.RLock()
	defer fake.getBuildpackByGuidMutex.RUnlock()
	return len(fake.getBuildpackByGuidArgsForCall)
}

func (fake *FakeCFClient) GetBuildpackByGuidCalls(stub func(string) (cfclient.Buildpack, error)) {
	fake.getBuildpackByGuidMutex.Lock()
	defer fake.getBuildpackByGuidMutex.Unlock()
	fake.GetBuildpackByGuidStub = stub
}

func (fake *FakeCFClient) GetBuildpackByGuidArgsForCall(i int) string {
	fake.getBuildpackByGuidMutex.RLock()
	defer fake.getBuildpackByGuidMutex.RUnlock()
	argsForCall := fake.getBuildpackByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetBuildpackByGuidReturns(result1 cfclient.Buildpack, result2 error) {
	fake.getBuildpackByGuidMutex.Lock()
	defer fake.getBuildpackByGuidMutex.Unlock()
	fake.GetBuildpackByGuidStub = nil
	fake.getBuildpackByGuidReturns = struct {
		result1 cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetBuildpackByGuidReturnsOnCall(i int, result1 cfclient.Buildpack, result2 error) {
	fake.getBuildpackByGuidMutex.Lock()
	defer fake.getBuildpackByGuidMutex.Unlock()
	fake.GetBuildpackByGuidStub = nil
	if fake.getBuildpackByGuidReturnsOnCall == nil {
		fake.getBuildpackByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Buildpack
			result2 error
		})
	}
	fake.getBuildpackByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetDomainByName(arg1 string) (cfclient.Domain, error) {
	fake.getDomainByNameMutex.Lock()
	ret, specificReturn := fake.getDomainByNameReturnsOnCall[len(fake.getDomainByNameArgsForCall)]
	fake.getDomainByNameArgsForCall = append(fake.getDomainByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetDomainByName", []interface{}{arg1})
	fake.getDomainByNameMutex.Unlock()
	if fake.GetDomainByNameStub != nil {
		return fake.GetDomainByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDomainByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetDomainByNameCallCount() int {
	fake.getDomainByNameMutex.RLock()
	defer fake.getDomainByNameMutex.RUnlock()
	return len(fake.getDomainByNameArgsForCall)
}

func (fake *FakeCFClient) GetDomainByNameCalls(stub func(string) (cfclient.Domain, error)) {
	fake.getDomainByNameMutex.Lock()
	defer fake.getDomainByNameMutex.Unlock()
	fake.GetDomainByNameStub = stub
}

func (fake *FakeCFClient) GetDomainByNameArgsForCall(i int) string {
	fake.getDomainByNameMutex.RLock()
	defer fake.getDomainByNameMutex.RUnlock()
	argsForCall := fake.getDomainByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetDomainByNameReturns(result1 cfclient.Domain, result2 error) {
	fake.getDomainByNameMutex.Lock()
	defer fake.getDomainByNameMutex.Unlock()
	fake.GetDomainByNameStub = nil
	fake.getDomainByNameReturns = struct {
		result1 cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetDomainByNameReturnsOnCall(i int, result1 cfclient.Domain, result2 error) {
	fake.getDomainByNameMutex.Lock()
	defer fake.getDomainByNameMutex.Unlock()
	fake.GetDomainByNameStub = nil
	if fake.getDomainByNameReturnsOnCall == nil {
		fake.getDomainByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Domain
			result2 error
		})
	}
	fake.getDomainByNameReturnsOnCall[i] = struct {
		result1 cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetInfo() (*cfclient.Info, error) {
	fake.getInfoMutex.Lock()
	ret, specificReturn := fake.getInfoReturnsOnCall[len(fake.getInfoArgsForCall)]
	fake.getInfoArgsForCall = append(fake.getInfoArgsForCall, struct {
	}{})
	fake.recordInvocation("GetInfo", []interface{}{})
	fake.getInfoMutex.Unlock()
	if fake.GetInfoStub != nil {
		return fake.GetInfoStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getInfoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetInfoCallCount() int {
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	return len(fake.getInfoArgsForCall)
}

func (fake *FakeCFClient) GetInfoCalls(stub func() (*cfclient.Info, error)) {
	fake.getInfoMutex.Lock()
	defer fake.getInfoMutex.Unlock()
	fake.GetInfoStub = stub
}

func (fake *FakeCFClient) GetInfoReturns(result1 *cfclient.Info, result2 error) {
	fake.getInfoMutex.Lock()
	defer fake.getInfoMutex.Unlock()
	fake.GetInfoStub = nil
	fake.getInfoReturns = struct {
		result1 *cfclient.Info
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetInfoReturnsOnCall(i int, result1 *cfclient.Info, result2 error) {
	fake.getInfoMutex.Lock()
	defer fake.getInfoMutex.Unlock()
	fake.GetInfoStub = nil
	if fake.getInfoReturnsOnCall == nil {
		fake.getInfoReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Info
			result2 error
		})
	}
	fake.getInfoReturnsOnCall[i] = struct {
		result1 *cfclient.Info
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetIsolationSegmentByGUID(arg1 string) (*cfclient.IsolationSegment, error) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	ret, specificReturn := fake.getIsolationSegmentByGUIDReturnsOnCall[len(fake.getIsolationSegmentByGUIDArgsForCall)]
	fake.getIsolationSegmentByGUIDArgsForCall = append(fake.getIsolationSegmentByGUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetIsolationSegmentByGUID", []interface{}{arg1})
	fake.getIsolationSegmentByGUIDMutex.Unlock()
	if fake.GetIsolationSegmentByGUIDStub != nil {
		return fake.GetIsolationSegmentByGUIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getIsolationSegmentByGUIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDCallCount() int {
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	return len(fake.getIsolationSegmentByGUIDArgsForCall)
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDCalls(stub func(string) (*cfclient.IsolationSegment, error)) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	defer fake.getIsolationSegmentByGUIDMutex.Unlock()
	fake.GetIsolationSegmentByGUIDStub = stub
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDArgsForCall(i int) string {
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	argsForCall := fake.getIsolationSegmentByGUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDReturns(result1 *cfclient.IsolationSegment, result2 error) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	defer fake.getIsolationSegmentByGUIDMutex.Unlock()
	fake.GetIsolationSegmentByGUIDStub = nil
	fake.getIsolationSegmentByGUIDReturns = struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDReturnsOnCall(i int, result1 *cfclient.IsolationSegment, result2 error) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	defer fake.getIsolationSegmentByGUIDMutex.Unlock()
	fake.GetIsolationSegmentByGUIDStub = nil
	if fake.getIsolationSegmentByGUIDReturnsOnCall == nil {
		fake.getIsolationSegmentByGUIDReturnsOnCall = make(map[int]struct {
			result1 *cfclient.IsolationSegment
			result2 error
		})
	}
	fake.getIsolationSegmentByGUIDReturnsOnCall[i] = struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgByGuid(arg1 string) (cfclient.Org, error) {
	fake.getOrgByGuidMutex.Lock()
	ret, specificReturn := fake.getOrgByGuidReturnsOnCall[len(fake.getOrgByGuidArgsForCall)]
	fake.getOrgByGuidArgsForCall = append(fake.getOrgByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrgByGuid", []interface{}{arg1})
	fake.getOrgByGuidMutex.Unlock()
	if fake.GetOrgByGuidStub != nil {
		return fake.GetOrgByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOrgByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetOrgByGuidCallCount() int {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	return len(fake.getOrgByGuidArgsForCall)
}

func (fake *FakeCFClient) GetOrgByGuidCalls(stub func(string) (cfclient.Org, error)) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = stub
}

func (fake *FakeCFClient) GetOrgByGuidArgsForCall(i int) string {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	argsForCall := fake.getOrgByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetOrgByGuidReturns(result1 cfclient.Org, result2 error) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = nil
	fake.getOrgByGuidReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgByGuidReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = nil
	if fake.getOrgByGuidReturnsOnCall == nil {
		fake.getOrgByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.getOrgByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgByName(arg1 string) (cfclient.Org, error) {
	fake.getOrgByNameMutex.Lock()
	ret, specificReturn := fake.getOrgByNameReturnsOnCall[len(fake.getOrgByNameArgsForCall)]
	fake.getOrgByNameArgsForCall = append(fake.getOrgByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrgByName", []interface{}{arg1})
	fake.getOrgByNameMutex.Unlock()
	if fake.GetOrgByNameStub != nil {
		return fake.GetOrgByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOrgByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetOrgByNameCallCount() int {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	return len(fake.getOrgByNameArgsForCall)
}

func (fake *FakeCFClient) GetOrgByNameCalls(stub func(string) (cfclient.Org, error)) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = stub
}

func (fake *FakeCFClient) GetOrgByNameArgsForCall(i int) string {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	argsForCall := fake.getOrgByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetOrgByNameReturns(result1 cfclient.Org, result2 error) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = nil
	fake.getOrgByNameReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgByNameReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = nil
	if fake.getOrgByNameReturnsOnCall == nil {
		fake.getOrgByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.getOrgByNameReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgQuotaByName(arg1 string) (cfclient.OrgQuota, error) {
	fake.getOrgQuotaByNameMutex.Lock()
	ret, specificReturn := fake.getOrgQuotaByNameReturnsOnCall[len(fake.getOrgQuotaByNameArgsForCall)]
	fake.getOrgQuotaByNameArgsForCall = append(fake.getOrgQuotaByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetOrgQuotaByName", []interface{}{arg1})
	fake.getOrgQuotaByNameMutex.Unlock()
	if fake.GetOrgQuotaByNameStub != nil {
		return fake.GetOrgQuotaByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getOrgQuotaByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetOrgQuotaByNameCallCount() int {
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	return len(fake.getOrgQuotaByNameArgsForCall)
}

func (fake *FakeCFClient) GetOrgQuotaByNameCalls(stub func(string) (cfclient.OrgQuota, error)) {
	fake.getOrgQuotaByNameMutex.Lock()
	defer fake.getOrgQuotaByNameMutex.Unlock()
	fake.GetOrgQuotaByNameStub = stub
}

func (fake *FakeCFClient) GetOrgQuotaByNameArgsForCall(i int) string {
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	argsForCall := fake.getOrgQuotaByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetOrgQuotaByNameReturns(result1 cfclient.OrgQuota, result2 error) {
	fake.getOrgQuotaByNameMutex.Lock()
	defer fake.getOrgQuotaByNameMutex.Unlock()
	fake.GetOrgQuotaByNameStub = nil
	fake.getOrgQuotaByNameReturns = struct {
		result1 cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgQuotaByNameReturnsOnCall(i int, result1 cfclient.OrgQuota, result2 error) {
	fake.getOrgQuotaByNameMutex.Lock()
	defer fake.getOrgQuotaByNameMutex.Unlock()
	fake.GetOrgQuotaByNameStub = nil
	if fake.getOrgQuotaByNameReturnsOnCall == nil {
		fake.getOrgQuotaByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.OrgQuota
			result2 error
		})
	}
	fake.getOrgQuotaByNameReturnsOnCall[i] = struct {
		result1 cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetRouteMappingByGuid(arg1 string) (*cfclient.RouteMapping, error) {
	fake.getRouteMappingByGuidMutex.Lock()
	ret, specificReturn := fake.getRouteMappingByGuidReturnsOnCall[len(fake.getRouteMappingByGuidArgsForCall)]
	fake.getRouteMappingByGuidArgsForCall = append(fake.getRouteMappingByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetRouteMappingByGuid", []interface{}{arg1})
	fake.getRouteMappingByGuidMutex.Unlock()
	if fake.GetRouteMappingByGuidStub != nil {
		return fake.GetRouteMappingByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRouteMappingByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetRouteMappingByGuidCallCount() int {
	fake.getRouteMappingByGuidMutex.RLock()
	defer fake.getRouteMappingByGuidMutex.RUnlock()
	return len(fake.getRouteMappingByGuidArgsForCall)
}

func (fake *FakeCFClient) GetRouteMappingByGuidCalls(stub func(string) (*cfclient.RouteMapping, error)) {
	fake.getRouteMappingByGuidMutex.Lock()
	defer fake.getRouteMappingByGuidMutex.Unlock()
	fake.GetRouteMappingByGuidStub = stub
}

func (fake *FakeCFClient) GetRouteMappingByGuidArgsForCall(i int) string {
	fake.getRouteMappingByGuidMutex.RLock()
	defer fake.getRouteMappingByGuidMutex.RUnlock()
	argsForCall := fake.getRouteMappingByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetRouteMappingByGuidReturns(result1 *cfclient.RouteMapping, result2 error) {
	fake.getRouteMappingByGuidMutex.Lock()
	defer fake.getRouteMappingByGuidMutex.Unlock()
	fake.GetRouteMappingByGuidStub = nil
	fake.getRouteMappingByGuidReturns = struct {
		result1 *cfclient.RouteMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetRouteMappingByGuidReturnsOnCall(i int, result1 *cfclient.RouteMapping, result2 error) {
	fake.getRouteMappingByGuidMutex.Lock()
	defer fake.getRouteMappingByGuidMutex.Unlock()
	fake.GetRouteMappingByGuidStub = nil
	if fake.getRouteMappingByGuidReturnsOnCall == nil {
		fake.getRouteMappingByGuidReturnsOnCall = make(map[int]struct {
			result1 *cfclient.RouteMapping
			result2 error
		})
	}
	fake.getRouteMappingByGuidReturnsOnCall[i] = struct {
		result1 *cfclient.RouteMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroup() (cfclient.EnvironmentVariableGroup, error) {
	fake.getRunningEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.getRunningEnvironmentVariableGroupReturnsOnCall[len(fake.getRunningEnvironmentVariableGroupArgsForCall)]
	fake.getRunningEnvironmentVariableGroupArgsForCall = append(fake.getRunningEnvironmentVariableGroupArgsForCall, struct {
	}{})
	fake.recordInvocation("GetRunningEnvironmentVariableGroup", []interface{}{})
	fake.getRunningEnvironmentVariableGroupMutex.Unlock()
	if fake.GetRunningEnvironmentVariableGroupStub != nil {
		return fake.GetRunningEnvironmentVariableGroupStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRunningEnvironmentVariableGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroupCallCount() int {
	fake.getRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.getRunningEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.getRunningEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroupCalls(stub func() (cfclient.EnvironmentVariableGroup, error)) {
	fake.getRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.getRunningEnvironmentVariableGroupMutex.Unlock()
	fake.GetRunningEnvironmentVariableGroupStub = stub
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroupReturns(result1 cfclient.EnvironmentVariableGroup, result2 error) {
	fake.getRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.getRunningEnvironmentVariableGroupMutex.Unlock()
	fake.GetRunningEnvironmentVariableGroupStub = nil
	fake.getRunningEnvironmentVariableGroupReturns = struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetRunningEnvironmentVariableGroupReturnsOnCall(i int, result1 cfclient.EnvironmentVariableGroup, result2 error) {
	fake.getRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.getRunningEnvironmentVariableGroupMutex.Unlock()
	fake.GetRunningEnvironmentVariableGroupStub = nil
	if fake.getRunningEnvironmentVariableGroupReturnsOnCall == nil {
		fake.getRunningEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 cfclient.EnvironmentVariableGroup
			result2 error
		})
	}
	fake.getRunningEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSecGroup(arg1 string) (*cfclient.SecGroup, error) {
	fake.getSecGroupMutex.Lock()
	ret, specificReturn := fake.getSecGroupReturnsOnCall[len(fake.getSecGroupArgsForCall)]
	fake.getSecGroupArgsForCall = append(fake.getSecGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSecGroup", []interface{}{arg1})
	fake.getSecGroupMutex.Unlock()
	if fake.GetSecGroupStub != nil {
		return fake.GetSecGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSecGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetSecGroupCallCount() int {
	fake.getSecGroupMutex.RLock()
	defer fake.getSecGroupMutex.RUnlock()
	return len(fake.getSecGroupArgsForCall)
}

func (fake *FakeCFClient) GetSecGroupCalls(stub func(string) (*cfclient.SecGroup, error)) {
	fake.getSecGroupMutex.Lock()
	defer fake.getSecGroupMutex.Unlock()
	fake.GetSecGroupStub = stub
}

func (fake *FakeCFClient) GetSecGroupArgsForCall(i int) string {
	fake.getSecGroupMutex.RLock()
	defer fake.getSecGroupMutex.RUnlock()
	argsForCall := fake.getSecGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetSecGroupReturns(result1 *cfclient.SecGroup, result2 error) {
	fake.getSecGroupMutex.Lock()
	defer fake.getSecGroupMutex.Unlock()
	fake.GetSecGroupStub = nil
	fake.getSecGroupReturns = struct {
		result1 *cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSecGroupReturnsOnCall(i int, result1 *cfclient.SecGroup, result2 error) {
	fake.getSecGroupMutex.Lock()
	defer fake.getSecGroupMutex.Unlock()
	fake.GetSecGroupStub = nil
	if fake.getSecGroupReturnsOnCall == nil {
		fake.getSecGroupReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SecGroup
			result2 error
		})
	}
	fake.getSecGroupReturnsOnCall[i] = struct {
		result1 *cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSecGroupByName(arg1 string) (cfclient.SecGroup, error) {
	fake.getSecGroupByNameMutex.Lock()
	ret, specificReturn := fake.getSecGroupByNameReturnsOnCall[len(fake.getSecGroupByNameArgsForCall)]
	fake.getSecGroupByNameArgsForCall = append(fake.getSecGroupByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSecGroupByName", []interface{}{arg1})
	fake.getSecGroupByNameMutex.Unlock()
	if fake.GetSecGroupByNameStub != nil {
		return fake.GetSecGroupByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSecGroupByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetSecGroupByNameCallCount() int {
	fake.getSecGroupByNameMutex.RLock()
	defer fake.getSecGroupByNameMutex.RUnlock()
	return len(fake.getSecGroupByNameArgsForCall)
}

func (fake *FakeCFClient) GetSecGroupByNameCalls(stub func(string) (cfclient.SecGroup, error)) {
	fake.getSecGroupByNameMutex.Lock()
	defer fake.getSecGroupByNameMutex.Unlock()
	fake.GetSecGroupByNameStub = stub
}

func (fake *FakeCFClient) GetSecGroupByNameArgsForCall(i int) string {
	fake.getSecGroupByNameMutex.RLock()
	defer fake.getSecGroupByNameMutex.RUnlock()
	argsForCall := fake.getSecGroupByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetSecGroupByNameReturns(result1 cfclient.SecGroup, result2 error) {
	fake.getSecGroupByNameMutex.Lock()
	defer fake.getSecGroupByNameMutex.Unlock()
	fake.GetSecGroupByNameStub = nil
	fake.getSecGroupByNameReturns = struct {
		result1 cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSecGroupByNameReturnsOnCall(i int, result1 cfclient.SecGroup, result2 error) {
	fake.getSecGroupByNameMutex.Lock()
	defer fake.getSecGroupByNameMutex.Unlock()
	fake.GetSecGroupByNameStub = nil
	if fake.getSecGroupByNameReturnsOnCall == nil {
		fake.getSecGroupByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.SecGroup
			result2 error
		})
	}
	fake.getSecGroupByNameReturnsOnCall[i] = struct {
		result1 cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceBindingByGuid(arg1 string) (cfclient.ServiceBinding, error) {
	fake.getServiceBindingByGuidMutex.Lock()
	ret, specificReturn := fake.getServiceBindingByGuidReturnsOnCall[len(fake.getServiceBindingByGuidArgsForCall)]
	fake.getServiceBindingByGuidArgsForCall = append(fake.getServiceBindingByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceBindingByGuid", []interface{}{arg1})
	fake.getServiceBindingByGuidMutex.Unlock()
	if fake.GetServiceBindingByGuidStub != nil {
		return fake.GetServiceBindingByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceBindingByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceBindingByGuidCallCount() int {
	fake.getServiceBindingByGuidMutex.RLock()
	defer fake.getServiceBindingByGuidMutex.RUnlock()
	return len(fake.getServiceBindingByGuidArgsForCall)
}

func (fake *FakeCFClient) GetServiceBindingByGuidCalls(stub func(string) (cfclient.ServiceBinding, error)) {
	fake.getServiceBindingByGuidMutex.Lock()
	defer fake.getServiceBindingByGuidMutex.Unlock()
	fake.GetServiceBindingByGuidStub = stub
}

func (fake *FakeCFClient) GetServiceBindingByGuidArgsForCall(i int) string {
	fake.getServiceBindingByGuidMutex.RLock()
	defer fake.getServiceBindingByGuidMutex.RUnlock()
	argsForCall := fake.getServiceBindingByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServiceBindingByGuidReturns(result1 cfclient.ServiceBinding, result2 error) {
	fake.getServiceBindingByGuidMutex.Lock()
	defer fake.getServiceBindingByGuidMutex.Unlock()
	fake.GetServiceBindingByGuidStub = nil
	fake.getServiceBindingByGuidReturns = struct {
		result1 cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceBindingByGuidReturnsOnCall(i int, result1 cfclient.ServiceBinding, result2 error) {
	fake.getServiceBindingByGuidMutex.Lock()
	defer fake.getServiceBindingByGuidMutex.Unlock()
	fake.GetServiceBindingByGuidStub = nil
	if fake.getServiceBindingByGuidReturnsOnCall == nil {
		fake.getServiceBindingByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceBinding
			result2 error
		})
	}
	fake.getServiceBindingByGuidReturnsOnCall[i] = struct {
		result1 cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceBrokerByGuid(arg1 string) (cfclient.ServiceBroker, error) {
	fake.getServiceBrokerByGuidMutex.Lock()
	ret, specificReturn := fake.getServiceBrokerByGuidReturnsOnCall[len(fake.getServiceBrokerByGuidArgsForCall)]
	fake.getServiceBrokerByGuidArgsForCall = append(fake.getServiceBrokerByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceBrokerByGuid", []interface{}{arg1})
	fake.getServiceBrokerByGuidMutex.Unlock()
	if fake.GetServiceBrokerByGuidStub != nil {
		return fake.GetServiceBrokerByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceBrokerByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceBrokerByGuidCallCount() int {
	fake.getServiceBrokerByGuidMutex.RLock()
	defer fake.getServiceBrokerByGuidMutex.RUnlock()
	return len(fake.getServiceBrokerByGuidArgsForCall)
}

func (fake *FakeCFClient) GetServiceBrokerByGuidCalls(stub func(string) (cfclient.ServiceBroker, error)) {
	fake.getServiceBrokerByGuidMutex.Lock()
	defer fake.getServiceBrokerByGuidMutex.Unlock()
	fake.GetServiceBrokerByGuidStub = stub
}

func (fake *FakeCFClient) GetServiceBrokerByGuidArgsForCall(i int) string {
	fake.getServiceBrokerByGuidMutex.RLock()
	defer fake.getServiceBrokerByGuidMutex.RUnlock()
	argsForCall := fake.getServiceBrokerByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServiceBrokerByGuidReturns(result1 cfclient.ServiceBroker, result2 error) {
	fake.getServiceBrokerByGuidMutex.Lock()
	defer fake.getServiceBrokerByGuidMutex.Unlock()
	fake.GetServiceBrokerByGuidStub = nil
	fake.getServiceBrokerByGuidReturns = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceBrokerByGuidReturnsOnCall(i int, result1 cfclient.ServiceBroker, result2 error) {
	fake.getServiceBrokerByGuidMutex.Lock()
	defer fake.getServiceBrokerByGuidMutex.Unlock()
	fake.GetServiceBrokerByGuidStub = nil
	if fake.getServiceBrokerByGuidReturnsOnCall == nil {
		fake.getServiceBrokerByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceBroker
			result2 error
		})
	}
	fake.getServiceBrokerByGuidReturnsOnCall[i] = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceBrokerByName(arg1 string) (cfclient.ServiceBroker, error) {
	fake.getServiceBrokerByNameMutex.Lock()
	ret, specificReturn := fake.getServiceBrokerByNameReturnsOnCall[len(fake.getServiceBrokerByNameArgsForCall)]
	fake.getServiceBrokerByNameArgsForCall = append(fake.getServiceBrokerByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceBrokerByName", []interface{}{arg1})
	fake.getServiceBrokerByNameMutex.Unlock()
	if fake.GetServiceBrokerByNameStub != nil {
		return fake.GetServiceBrokerByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceBrokerByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceBrokerByNameCallCount() int {
	fake.getServiceBrokerByNameMutex.RLock()
	defer fake.getServiceBrokerByNameMutex.RUnlock()
	return len(fake.getServiceBrokerByNameArgsForCall)
}

func (fake *FakeCFClient) GetServiceBrokerByNameCalls(stub func(string) (cfclient.ServiceBroker, error)) {
	fake.getServiceBrokerByNameMutex.Lock()
	defer fake.getServiceBrokerByNameMutex.Unlock()
	fake.GetServiceBrokerByNameStub = stub
}

func (fake *FakeCFClient) GetServiceBrokerByNameArgsForCall(i int) string {
	fake.getServiceBrokerByNameMutex.RLock()
	defer fake.getServiceBrokerByNameMutex.RUnlock()
	argsForCall := fake.getServiceBrokerByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServiceBrokerByNameReturns(result1 cfclient.ServiceBroker, result2 error) {
	fake.getServiceBrokerByNameMutex.Lock()
	defer fake.getServiceBrokerByNameMutex.Unlock()
	fake.GetServiceBrokerByNameStub = nil
	fake.getServiceBrokerByNameReturns = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceBrokerByNameReturnsOnCall(i int, result1 cfclient.ServiceBroker, result2 error) {
	fake.getServiceBrokerByNameMutex.Lock()
	defer fake.getServiceBrokerByNameMutex.Unlock()
	fake.GetServiceBrokerByNameStub = nil
	if fake.getServiceBrokerByNameReturnsOnCall == nil {
		fake.getServiceBrokerByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceBroker
			result2 error
		})
	}
	fake.getServiceBrokerByNameReturnsOnCall[i] = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceByGuid(arg1 string) (cfclient.Service, error) {
	fake.getServiceByGuidMutex.Lock()
	ret, specificReturn := fake.getServiceByGuidReturnsOnCall[len(fake.getServiceByGuidArgsForCall)]
	fake.getServiceByGuidArgsForCall = append(fake.getServiceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceByGuid", []interface{}{arg1})
	fake.getServiceByGuidMutex.Unlock()
	if fake.GetServiceByGuidStub != nil {
		return fake.GetServiceByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceByGuidCallCount() int {
	fake.getServiceByGuidMutex.RLock()
	defer fake.getServiceByGuidMutex.RUnlock()
	return len(fake.getServiceByGuidArgsForCall)
}

func (fake *FakeCFClient) GetServiceByGuidCalls(stub func(string) (cfclient.Service, error)) {
	fake.getServiceByGuidMutex.Lock()
	defer fake.getServiceByGuidMutex.Unlock()
	fake.GetServiceByGuidStub = stub
}

func (fake *FakeCFClient) GetServiceByGuidArgsForCall(i int) string {
	fake.getServiceByGuidMutex.RLock()
	defer fake.getServiceByGuidMutex.RUnlock()
	argsForCall := fake.getServiceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServiceByGuidReturns(result1 cfclient.Service, result2 error) {
	fake.getServiceByGuidMutex.Lock()
	defer fake.getServiceByGuidMutex.Unlock()
	fake.GetServiceByGuidStub = nil
	fake.getServiceByGuidReturns = struct {
		result1 cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceByGuidReturnsOnCall(i int, result1 cfclient.Service, result2 error) {
	fake.getServiceByGuidMutex.Lock()
	defer fake.getServiceByGuidMutex.Unlock()
	fake.GetServiceByGuidStub = nil
	if fake.getServiceByGuidReturnsOnCall == nil {
		fake.getServiceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Service
			result2 error
		})
	}
	fake.getServiceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceInstanceByGuid(arg1 string) (cfclient.ServiceInstance, error) {
	fake.getServiceInstanceByGuidMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceByGuidReturnsOnCall[len(fake.getServiceInstanceByGuidArgsForCall)]
	fake.getServiceInstanceByGuidArgsForCall = append(fake.getServiceInstanceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceInstanceByGuid", []interface{}{arg1})
	fake.getServiceInstanceByGuidMutex.Unlock()
	if fake.GetServiceInstanceByGuidStub != nil {
		return fake.GetServiceInstanceByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceInstanceByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceInstanceByGuidCallCount() int {
	fake.getServiceInstanceByGuidMutex.RLock()
	defer fake.getServiceInstanceByGuidMutex.RUnlock()
	return len(fake.getServiceInstanceByGuidArgsForCall)
}

func (fake *FakeCFClient) GetServiceInstanceByGuidCalls(stub func(string) (cfclient.ServiceInstance, error)) {
	fake.getServiceInstanceByGuidMutex.Lock()
	defer fake.getServiceInstanceByGuidMutex.Unlock()
	fake.GetServiceInstanceByGuidStub = stub
}

func (fake *FakeCFClient) GetServiceInstanceByGuidArgsForCall(i int) string {
	fake.getServiceInstanceByGuidMutex.RLock()
	defer fake.getServiceInstanceByGuidMutex.RUnlock()
	argsForCall := fake.getServiceInstanceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServiceInstanceByGuidReturns(result1 cfclient.ServiceInstance, result2 error) {
	fake.getServiceInstanceByGuidMutex.Lock()
	defer fake.getServiceInstanceByGuidMutex.Unlock()
	fake.GetServiceInstanceByGuidStub = nil
	fake.getServiceInstanceByGuidReturns = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceInstanceByGuidReturnsOnCall(i int, result1 cfclient.ServiceInstance, result2 error) {
	fake.getServiceInstanceByGuidMutex.Lock()
	defer fake.getServiceInstanceByGuidMutex.Unlock()
	fake.GetServiceInstanceByGuidStub = nil
	if fake.getServiceInstanceByGuidReturnsOnCall == nil {
		fake.getServiceInstanceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceInstance
			result2 error
		})
	}
	fake.getServiceInstanceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceKeyByInstanceGuid(arg1 string) (cfclient.ServiceKey, error) {
	fake.getServiceKeyByInstanceGuidMutex.Lock()
	ret, specificReturn := fake.getServiceKeyByInstanceGuidReturnsOnCall[len(fake.getServiceKeyByInstanceGuidArgsForCall)]
	fake.getServiceKeyByInstanceGuidArgsForCall = append(fake.getServiceKeyByInstanceGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceKeyByInstanceGuid", []interface{}{arg1})
	fake.getServiceKeyByInstanceGuidMutex.Unlock()
	if fake.GetServiceKeyByInstanceGuidStub != nil {
		return fake.GetServiceKeyByInstanceGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceKeyByInstanceGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceKeyByInstanceGuidCallCount() int {
	fake.getServiceKeyByInstanceGuidMutex.RLock()
	defer fake.getServiceKeyByInstanceGuidMutex.RUnlock()
	return len(fake.getServiceKeyByInstanceGuidArgsForCall)
}

func (fake *FakeCFClient) GetServiceKeyByInstanceGuidCalls(stub func(string) (cfclient.ServiceKey, error)) {
	fake.getServiceKeyByInstanceGuidMutex.Lock()
	defer fake.getServiceKeyByInstanceGuidMutex.Unlock()
	fake.GetServiceKeyByInstanceGuidStub = stub
}

func (fake *FakeCFClient) GetServiceKeyByInstanceGuidArgsForCall(i int) string {
	fake.getServiceKeyByInstanceGuidMutex.RLock()
	defer fake.getServiceKeyByInstanceGuidMutex.RUnlock()
	argsForCall := fake.getServiceKeyByInstanceGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServiceKeyByInstanceGuidReturns(result1 cfclient.ServiceKey, result2 error) {
	fake.getServiceKeyByInstanceGuidMutex.Lock()
	defer fake.getServiceKeyByInstanceGuidMutex.Unlock()
	fake.GetServiceKeyByInstanceGuidStub = nil
	fake.getServiceKeyByInstanceGuidReturns = struct {
		result1 cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceKeyByInstanceGuidReturnsOnCall(i int, result1 cfclient.ServiceKey, result2 error) {
	fake.getServiceKeyByInstanceGuidMutex.Lock()
	defer fake.getServiceKeyByInstanceGuidMutex.Unlock()
	fake.GetServiceKeyByInstanceGuidStub = nil
	if fake.getServiceKeyByInstanceGuidReturnsOnCall == nil {
		fake.getServiceKeyByInstanceGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceKey
			result2 error
		})
	}
	fake.getServiceKeyByInstanceGuidReturnsOnCall[i] = struct {
		result1 cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceKeyByName(arg1 string) (cfclient.ServiceKey, error) {
	fake.getServiceKeyByNameMutex.Lock()
	ret, specificReturn := fake.getServiceKeyByNameReturnsOnCall[len(fake.getServiceKeyByNameArgsForCall)]
	fake.getServiceKeyByNameArgsForCall = append(fake.getServiceKeyByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceKeyByName", []interface{}{arg1})
	fake.getServiceKeyByNameMutex.Unlock()
	if fake.GetServiceKeyByNameStub != nil {
		return fake.GetServiceKeyByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceKeyByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceKeyByNameCallCount() int {
	fake.getServiceKeyByNameMutex.RLock()
	defer fake.getServiceKeyByNameMutex.RUnlock()
	return len(fake.getServiceKeyByNameArgsForCall)
}

func (fake *FakeCFClient) GetServiceKeyByNameCalls(stub func(string) (cfclient.ServiceKey, error)) {
	fake.getServiceKeyByNameMutex.Lock()
	defer fake.getServiceKeyByNameMutex.Unlock()
	fake.GetServiceKeyByNameStub = stub
}

func (fake *FakeCFClient) GetServiceKeyByNameArgsForCall(i int) string {
	fake.getServiceKeyByNameMutex.RLock()
	defer fake.getServiceKeyByNameMutex.RUnlock()
	argsForCall := fake.getServiceKeyByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServiceKeyByNameReturns(result1 cfclient.ServiceKey, result2 error) {
	fake.getServiceKeyByNameMutex.Lock()
	defer fake.getServiceKeyByNameMutex.Unlock()
	fake.GetServiceKeyByNameStub = nil
	fake.getServiceKeyByNameReturns = struct {
		result1 cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceKeyByNameReturnsOnCall(i int, result1 cfclient.ServiceKey, result2 error) {
	fake.getServiceKeyByNameMutex.Lock()
	defer fake.getServiceKeyByNameMutex.Unlock()
	fake.GetServiceKeyByNameStub = nil
	if fake.getServiceKeyByNameReturnsOnCall == nil {
		fake.getServiceKeyByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceKey
			result2 error
		})
	}
	fake.getServiceKeyByNameReturnsOnCall[i] = struct {
		result1 cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceKeysByInstanceGuid(arg1 string) ([]cfclient.ServiceKey, error) {
	fake.getServiceKeysByInstanceGuidMutex.Lock()
	ret, specificReturn := fake.getServiceKeysByInstanceGuidReturnsOnCall[len(fake.getServiceKeysByInstanceGuidArgsForCall)]
	fake.getServiceKeysByInstanceGuidArgsForCall = append(fake.getServiceKeysByInstanceGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServiceKeysByInstanceGuid", []interface{}{arg1})
	fake.getServiceKeysByInstanceGuidMutex.Unlock()
	if fake.GetServiceKeysByInstanceGuidStub != nil {
		return fake.GetServiceKeysByInstanceGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServiceKeysByInstanceGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServiceKeysByInstanceGuidCallCount() int {
	fake.getServiceKeysByInstanceGuidMutex.RLock()
	defer fake.getServiceKeysByInstanceGuidMutex.RUnlock()
	return len(fake.getServiceKeysByInstanceGuidArgsForCall)
}

func (fake *FakeCFClient) GetServiceKeysByInstanceGuidCalls(stub func(string) ([]cfclient.ServiceKey, error)) {
	fake.getServiceKeysByInstanceGuidMutex.Lock()
	defer fake.getServiceKeysByInstanceGuidMutex.Unlock()
	fake.GetServiceKeysByInstanceGuidStub = stub
}

func (fake *FakeCFClient) GetServiceKeysByInstanceGuidArgsForCall(i int) string {
	fake.getServiceKeysByInstanceGuidMutex.RLock()
	defer fake.getServiceKeysByInstanceGuidMutex.RUnlock()
	argsForCall := fake.getServiceKeysByInstanceGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServiceKeysByInstanceGuidReturns(result1 []cfclient.ServiceKey, result2 error) {
	fake.getServiceKeysByInstanceGuidMutex.Lock()
	defer fake.getServiceKeysByInstanceGuidMutex.Unlock()
	fake.GetServiceKeysByInstanceGuidStub = nil
	fake.getServiceKeysByInstanceGuidReturns = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServiceKeysByInstanceGuidReturnsOnCall(i int, result1 []cfclient.ServiceKey, result2 error) {
	fake.getServiceKeysByInstanceGuidMutex.Lock()
	defer fake.getServiceKeysByInstanceGuidMutex.Unlock()
	fake.GetServiceKeysByInstanceGuidStub = nil
	if fake.getServiceKeysByInstanceGuidReturnsOnCall == nil {
		fake.getServiceKeysByInstanceGuidReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceKey
			result2 error
		})
	}
	fake.getServiceKeysByInstanceGuidReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServicePlanByGUID(arg1 string) (*cfclient.ServicePlan, error) {
	fake.getServicePlanByGUIDMutex.Lock()
	ret, specificReturn := fake.getServicePlanByGUIDReturnsOnCall[len(fake.getServicePlanByGUIDArgsForCall)]
	fake.getServicePlanByGUIDArgsForCall = append(fake.getServicePlanByGUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServicePlanByGUID", []interface{}{arg1})
	fake.getServicePlanByGUIDMutex.Unlock()
	if fake.GetServicePlanByGUIDStub != nil {
		return fake.GetServicePlanByGUIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServicePlanByGUIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServicePlanByGUIDCallCount() int {
	fake.getServicePlanByGUIDMutex.RLock()
	defer fake.getServicePlanByGUIDMutex.RUnlock()
	return len(fake.getServicePlanByGUIDArgsForCall)
}

func (fake *FakeCFClient) GetServicePlanByGUIDCalls(stub func(string) (*cfclient.ServicePlan, error)) {
	fake.getServicePlanByGUIDMutex.Lock()
	defer fake.getServicePlanByGUIDMutex.Unlock()
	fake.GetServicePlanByGUIDStub = stub
}

func (fake *FakeCFClient) GetServicePlanByGUIDArgsForCall(i int) string {
	fake.getServicePlanByGUIDMutex.RLock()
	defer fake.getServicePlanByGUIDMutex.RUnlock()
	argsForCall := fake.getServicePlanByGUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServicePlanByGUIDReturns(result1 *cfclient.ServicePlan, result2 error) {
	fake.getServicePlanByGUIDMutex.Lock()
	defer fake.getServicePlanByGUIDMutex.Unlock()
	fake.GetServicePlanByGUIDStub = nil
	fake.getServicePlanByGUIDReturns = struct {
		result1 *cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServicePlanByGUIDReturnsOnCall(i int, result1 *cfclient.ServicePlan, result2 error) {
	fake.getServicePlanByGUIDMutex.Lock()
	defer fake.getServicePlanByGUIDMutex.Unlock()
	fake.GetServicePlanByGUIDStub = nil
	if fake.getServicePlanByGUIDReturnsOnCall == nil {
		fake.getServicePlanByGUIDReturnsOnCall = make(map[int]struct {
			result1 *cfclient.ServicePlan
			result2 error
		})
	}
	fake.getServicePlanByGUIDReturnsOnCall[i] = struct {
		result1 *cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServicePlanVisibilityByGuid(arg1 string) (cfclient.ServicePlanVisibility, error) {
	fake.getServicePlanVisibilityByGuidMutex.Lock()
	ret, specificReturn := fake.getServicePlanVisibilityByGuidReturnsOnCall[len(fake.getServicePlanVisibilityByGuidArgsForCall)]
	fake.getServicePlanVisibilityByGuidArgsForCall = append(fake.getServicePlanVisibilityByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetServicePlanVisibilityByGuid", []interface{}{arg1})
	fake.getServicePlanVisibilityByGuidMutex.Unlock()
	if fake.GetServicePlanVisibilityByGuidStub != nil {
		return fake.GetServicePlanVisibilityByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getServicePlanVisibilityByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetServicePlanVisibilityByGuidCallCount() int {
	fake.getServicePlanVisibilityByGuidMutex.RLock()
	defer fake.getServicePlanVisibilityByGuidMutex.RUnlock()
	return len(fake.getServicePlanVisibilityByGuidArgsForCall)
}

func (fake *FakeCFClient) GetServicePlanVisibilityByGuidCalls(stub func(string) (cfclient.ServicePlanVisibility, error)) {
	fake.getServicePlanVisibilityByGuidMutex.Lock()
	defer fake.getServicePlanVisibilityByGuidMutex.Unlock()
	fake.GetServicePlanVisibilityByGuidStub = stub
}

func (fake *FakeCFClient) GetServicePlanVisibilityByGuidArgsForCall(i int) string {
	fake.getServicePlanVisibilityByGuidMutex.RLock()
	defer fake.getServicePlanVisibilityByGuidMutex.RUnlock()
	argsForCall := fake.getServicePlanVisibilityByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetServicePlanVisibilityByGuidReturns(result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.getServicePlanVisibilityByGuidMutex.Lock()
	defer fake.getServicePlanVisibilityByGuidMutex.Unlock()
	fake.GetServicePlanVisibilityByGuidStub = nil
	fake.getServicePlanVisibilityByGuidReturns = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetServicePlanVisibilityByGuidReturnsOnCall(i int, result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.getServicePlanVisibilityByGuidMutex.Lock()
	defer fake.getServicePlanVisibilityByGuidMutex.Unlock()
	fake.GetServicePlanVisibilityByGuidStub = nil
	if fake.getServicePlanVisibilityByGuidReturnsOnCall == nil {
		fake.getServicePlanVisibilityByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.getServicePlanVisibilityByGuidReturnsOnCall[i] = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSharedDomainByGuid(arg1 string) (cfclient.SharedDomain, error) {
	fake.getSharedDomainByGuidMutex.Lock()
	ret, specificReturn := fake.getSharedDomainByGuidReturnsOnCall[len(fake.getSharedDomainByGuidArgsForCall)]
	fake.getSharedDomainByGuidArgsForCall = append(fake.getSharedDomainByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSharedDomainByGuid", []interface{}{arg1})
	fake.getSharedDomainByGuidMutex.Unlock()
	if fake.GetSharedDomainByGuidStub != nil {
		return fake.GetSharedDomainByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSharedDomainByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetSharedDomainByGuidCallCount() int {
	fake.getSharedDomainByGuidMutex.RLock()
	defer fake.getSharedDomainByGuidMutex.RUnlock()
	return len(fake.getSharedDomainByGuidArgsForCall)
}

func (fake *FakeCFClient) GetSharedDomainByGuidCalls(stub func(string) (cfclient.SharedDomain, error)) {
	fake.getSharedDomainByGuidMutex.Lock()
	defer fake.getSharedDomainByGuidMutex.Unlock()
	fake.GetSharedDomainByGuidStub = stub
}

func (fake *FakeCFClient) GetSharedDomainByGuidArgsForCall(i int) string {
	fake.getSharedDomainByGuidMutex.RLock()
	defer fake.getSharedDomainByGuidMutex.RUnlock()
	argsForCall := fake.getSharedDomainByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetSharedDomainByGuidReturns(result1 cfclient.SharedDomain, result2 error) {
	fake.getSharedDomainByGuidMutex.Lock()
	defer fake.getSharedDomainByGuidMutex.Unlock()
	fake.GetSharedDomainByGuidStub = nil
	fake.getSharedDomainByGuidReturns = struct {
		result1 cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSharedDomainByGuidReturnsOnCall(i int, result1 cfclient.SharedDomain, result2 error) {
	fake.getSharedDomainByGuidMutex.Lock()
	defer fake.getSharedDomainByGuidMutex.Unlock()
	fake.GetSharedDomainByGuidStub = nil
	if fake.getSharedDomainByGuidReturnsOnCall == nil {
		fake.getSharedDomainByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.SharedDomain
			result2 error
		})
	}
	fake.getSharedDomainByGuidReturnsOnCall[i] = struct {
		result1 cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSharedDomainByName(arg1 string) (cfclient.SharedDomain, error) {
	fake.getSharedDomainByNameMutex.Lock()
	ret, specificReturn := fake.getSharedDomainByNameReturnsOnCall[len(fake.getSharedDomainByNameArgsForCall)]
	fake.getSharedDomainByNameArgsForCall = append(fake.getSharedDomainByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSharedDomainByName", []interface{}{arg1})
	fake.getSharedDomainByNameMutex.Unlock()
	if fake.GetSharedDomainByNameStub != nil {
		return fake.GetSharedDomainByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSharedDomainByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetSharedDomainByNameCallCount() int {
	fake.getSharedDomainByNameMutex.RLock()
	defer fake.getSharedDomainByNameMutex.RUnlock()
	return len(fake.getSharedDomainByNameArgsForCall)
}

func (fake *FakeCFClient) GetSharedDomainByNameCalls(stub func(string) (cfclient.SharedDomain, error)) {
	fake.getSharedDomainByNameMutex.Lock()
	defer fake.getSharedDomainByNameMutex.Unlock()
	fake.GetSharedDomainByNameStub = stub
}

func (fake *FakeCFClient) GetSharedDomainByNameArgsForCall(i int) string {
	fake.getSharedDomainByNameMutex.RLock()
	defer fake.getSharedDomainByNameMutex.RUnlock()
	argsForCall := fake.getSharedDomainByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetSharedDomainByNameReturns(result1 cfclient.SharedDomain, result2 error) {
	fake.getSharedDomainByNameMutex.Lock()
	defer fake.getSharedDomainByNameMutex.Unlock()
	fake.GetSharedDomainByNameStub = nil
	fake.getSharedDomainByNameReturns = struct {
		result1 cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSharedDomainByNameReturnsOnCall(i int, result1 cfclient.SharedDomain, result2 error) {
	fake.getSharedDomainByNameMutex.Lock()
	defer fake.getSharedDomainByNameMutex.Unlock()
	fake.GetSharedDomainByNameStub = nil
	if fake.getSharedDomainByNameReturnsOnCall == nil {
		fake.getSharedDomainByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.SharedDomain
			result2 error
		})
	}
	fake.getSharedDomainByNameReturnsOnCall[i] = struct {
		result1 cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceByGuid(arg1 string) (cfclient.Space, error) {
	fake.getSpaceByGuidMutex.Lock()
	ret, specificReturn := fake.getSpaceByGuidReturnsOnCall[len(fake.getSpaceByGuidArgsForCall)]
	fake.getSpaceByGuidArgsForCall = append(fake.getSpaceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSpaceByGuid", []interface{}{arg1})
	fake.getSpaceByGuidMutex.Unlock()
	if fake.GetSpaceByGuidStub != nil {
		return fake.GetSpaceByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSpaceByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetSpaceByGuidCallCount() int {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	return len(fake.getSpaceByGuidArgsForCall)
}

func (fake *FakeCFClient) GetSpaceByGuidCalls(stub func(string) (cfclient.Space, error)) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = stub
}

func (fake *FakeCFClient) GetSpaceByGuidArgsForCall(i int) string {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	argsForCall := fake.getSpaceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetSpaceByGuidReturns(result1 cfclient.Space, result2 error) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = nil
	fake.getSpaceByGuidReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceByGuidReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = nil
	if fake.getSpaceByGuidReturnsOnCall == nil {
		fake.getSpaceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.getSpaceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceByName(arg1 string, arg2 string) (cfclient.Space, error) {
	fake.getSpaceByNameMutex.Lock()
	ret, specificReturn := fake.getSpaceByNameReturnsOnCall[len(fake.getSpaceByNameArgsForCall)]
	fake.getSpaceByNameArgsForCall = append(fake.getSpaceByNameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetSpaceByName", []interface{}{arg1, arg2})
	fake.getSpaceByNameMutex.Unlock()
	if fake.GetSpaceByNameStub != nil {
		return fake.GetSpaceByNameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSpaceByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetSpaceByNameCallCount() int {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	return len(fake.getSpaceByNameArgsForCall)
}

func (fake *FakeCFClient) GetSpaceByNameCalls(stub func(string, string) (cfclient.Space, error)) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = stub
}

func (fake *FakeCFClient) GetSpaceByNameArgsForCall(i int) (string, string) {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	argsForCall := fake.getSpaceByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) GetSpaceByNameReturns(result1 cfclient.Space, result2 error) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = nil
	fake.getSpaceByNameReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceByNameReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = nil
	if fake.getSpaceByNameReturnsOnCall == nil {
		fake.getSpaceByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.getSpaceByNameReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceQuotaByName(arg1 string) (cfclient.SpaceQuota, error) {
	fake.getSpaceQuotaByNameMutex.Lock()
	ret, specificReturn := fake.getSpaceQuotaByNameReturnsOnCall[len(fake.getSpaceQuotaByNameArgsForCall)]
	fake.getSpaceQuotaByNameArgsForCall = append(fake.getSpaceQuotaByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSpaceQuotaByName", []interface{}{arg1})
	fake.getSpaceQuotaByNameMutex.Unlock()
	if fake.GetSpaceQuotaByNameStub != nil {
		return fake.GetSpaceQuotaByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSpaceQuotaByNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetSpaceQuotaByNameCallCount() int {
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	return len(fake.getSpaceQuotaByNameArgsForCall)
}

func (fake *FakeCFClient) GetSpaceQuotaByNameCalls(stub func(string) (cfclient.SpaceQuota, error)) {
	fake.getSpaceQuotaByNameMutex.Lock()
	defer fake.getSpaceQuotaByNameMutex.Unlock()
	fake.GetSpaceQuotaByNameStub = stub
}

func (fake *FakeCFClient) GetSpaceQuotaByNameArgsForCall(i int) string {
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	argsForCall := fake.getSpaceQuotaByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetSpaceQuotaByNameReturns(result1 cfclient.SpaceQuota, result2 error) {
	fake.getSpaceQuotaByNameMutex.Lock()
	defer fake.getSpaceQuotaByNameMutex.Unlock()
	fake.GetSpaceQuotaByNameStub = nil
	fake.getSpaceQuotaByNameReturns = struct {
		result1 cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceQuotaByNameReturnsOnCall(i int, result1 cfclient.SpaceQuota, result2 error) {
	fake.getSpaceQuotaByNameMutex.Lock()
	defer fake.getSpaceQuotaByNameMutex.Unlock()
	fake.GetSpaceQuotaByNameStub = nil
	if fake.getSpaceQuotaByNameReturnsOnCall == nil {
		fake.getSpaceQuotaByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.SpaceQuota
			result2 error
		})
	}
	fake.getSpaceQuotaByNameReturnsOnCall[i] = struct {
		result1 cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroup() (cfclient.EnvironmentVariableGroup, error) {
	fake.getStagingEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.getStagingEnvironmentVariableGroupReturnsOnCall[len(fake.getStagingEnvironmentVariableGroupArgsForCall)]
	fake.getStagingEnvironmentVariableGroupArgsForCall = append(fake.getStagingEnvironmentVariableGroupArgsForCall, struct {
	}{})
	fake.recordInvocation("GetStagingEnvironmentVariableGroup", []interface{}{})
	fake.getStagingEnvironmentVariableGroupMutex.Unlock()
	if fake.GetStagingEnvironmentVariableGroupStub != nil {
		return fake.GetStagingEnvironmentVariableGroupStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getStagingEnvironmentVariableGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroupCallCount() int {
	fake.getStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.getStagingEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.getStagingEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroupCalls(stub func() (cfclient.EnvironmentVariableGroup, error)) {
	fake.getStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.getStagingEnvironmentVariableGroupMutex.Unlock()
	fake.GetStagingEnvironmentVariableGroupStub = stub
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroupReturns(result1 cfclient.EnvironmentVariableGroup, result2 error) {
	fake.getStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.getStagingEnvironmentVariableGroupMutex.Unlock()
	fake.GetStagingEnvironmentVariableGroupStub = nil
	fake.getStagingEnvironmentVariableGroupReturns = struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetStagingEnvironmentVariableGroupReturnsOnCall(i int, result1 cfclient.EnvironmentVariableGroup, result2 error) {
	fake.getStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.getStagingEnvironmentVariableGroupMutex.Unlock()
	fake.GetStagingEnvironmentVariableGroupStub = nil
	if fake.getStagingEnvironmentVariableGroupReturnsOnCall == nil {
		fake.getStagingEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 cfclient.EnvironmentVariableGroup
			result2 error
		})
	}
	fake.getStagingEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 cfclient.EnvironmentVariableGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetTaskByGuid(arg1 string) (cfclient.Task, error) {
	fake.getTaskByGuidMutex.Lock()
	ret, specificReturn := fake.getTaskByGuidReturnsOnCall[len(fake.getTaskByGuidArgsForCall)]
	fake.getTaskByGuidArgsForCall = append(fake.getTaskByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetTaskByGuid", []interface{}{arg1})
	fake.getTaskByGuidMutex.Unlock()
	if fake.GetTaskByGuidStub != nil {
		return fake.GetTaskByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTaskByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetTaskByGuidCallCount() int {
	fake.getTaskByGuidMutex.RLock()
	defer fake.getTaskByGuidMutex.RUnlock()
	return len(fake.getTaskByGuidArgsForCall)
}

func (fake *FakeCFClient) GetTaskByGuidCalls(stub func(string) (cfclient.Task, error)) {
	fake.getTaskByGuidMutex.Lock()
	defer fake.getTaskByGuidMutex.Unlock()
	fake.GetTaskByGuidStub = stub
}

func (fake *FakeCFClient) GetTaskByGuidArgsForCall(i int) string {
	fake.getTaskByGuidMutex.RLock()
	defer fake.getTaskByGuidMutex.RUnlock()
	argsForCall := fake.getTaskByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetTaskByGuidReturns(result1 cfclient.Task, result2 error) {
	fake.getTaskByGuidMutex.Lock()
	defer fake.getTaskByGuidMutex.Unlock()
	fake.GetTaskByGuidStub = nil
	fake.getTaskByGuidReturns = struct {
		result1 cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetTaskByGuidReturnsOnCall(i int, result1 cfclient.Task, result2 error) {
	fake.getTaskByGuidMutex.Lock()
	defer fake.getTaskByGuidMutex.Unlock()
	fake.GetTaskByGuidStub = nil
	if fake.getTaskByGuidReturnsOnCall == nil {
		fake.getTaskByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Task
			result2 error
		})
	}
	fake.getTaskByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetToken() (string, error) {
	fake.getTokenMutex.Lock()
	ret, specificReturn := fake.getTokenReturnsOnCall[len(fake.getTokenArgsForCall)]
	fake.getTokenArgsForCall = append(fake.getTokenArgsForCall, struct {
	}{})
	fake.recordInvocation("GetToken", []interface{}{})
	fake.getTokenMutex.Unlock()
	if fake.GetTokenStub != nil {
		return fake.GetTokenStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetTokenCallCount() int {
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	return len(fake.getTokenArgsForCall)
}

func (fake *FakeCFClient) GetTokenCalls(stub func() (string, error)) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = stub
}

func (fake *FakeCFClient) GetTokenReturns(result1 string, result2 error) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	fake.getTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.getTokenMutex.Lock()
	defer fake.getTokenMutex.Unlock()
	fake.GetTokenStub = nil
	if fake.getTokenReturnsOnCall == nil {
		fake.getTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetUserByGUID(arg1 string) (cfclient.User, error) {
	fake.getUserByGUIDMutex.Lock()
	ret, specificReturn := fake.getUserByGUIDReturnsOnCall[len(fake.getUserByGUIDArgsForCall)]
	fake.getUserByGUIDArgsForCall = append(fake.getUserByGUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetUserByGUID", []interface{}{arg1})
	fake.getUserByGUIDMutex.Unlock()
	if fake.GetUserByGUIDStub != nil {
		return fake.GetUserByGUIDStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserByGUIDReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetUserByGUIDCallCount() int {
	fake.getUserByGUIDMutex.RLock()
	defer fake.getUserByGUIDMutex.RUnlock()
	return len(fake.getUserByGUIDArgsForCall)
}

func (fake *FakeCFClient) GetUserByGUIDCalls(stub func(string) (cfclient.User, error)) {
	fake.getUserByGUIDMutex.Lock()
	defer fake.getUserByGUIDMutex.Unlock()
	fake.GetUserByGUIDStub = stub
}

func (fake *FakeCFClient) GetUserByGUIDArgsForCall(i int) string {
	fake.getUserByGUIDMutex.RLock()
	defer fake.getUserByGUIDMutex.RUnlock()
	argsForCall := fake.getUserByGUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetUserByGUIDReturns(result1 cfclient.User, result2 error) {
	fake.getUserByGUIDMutex.Lock()
	defer fake.getUserByGUIDMutex.Unlock()
	fake.GetUserByGUIDStub = nil
	fake.getUserByGUIDReturns = struct {
		result1 cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetUserByGUIDReturnsOnCall(i int, result1 cfclient.User, result2 error) {
	fake.getUserByGUIDMutex.Lock()
	defer fake.getUserByGUIDMutex.Unlock()
	fake.GetUserByGUIDStub = nil
	if fake.getUserByGUIDReturnsOnCall == nil {
		fake.getUserByGUIDReturnsOnCall = make(map[int]struct {
			result1 cfclient.User
			result2 error
		})
	}
	fake.getUserByGUIDReturnsOnCall[i] = struct {
		result1 cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetUserProvidedServiceInstanceByGuid(arg1 string) (cfclient.UserProvidedServiceInstance, error) {
	fake.getUserProvidedServiceInstanceByGuidMutex.Lock()
	ret, specificReturn := fake.getUserProvidedServiceInstanceByGuidReturnsOnCall[len(fake.getUserProvidedServiceInstanceByGuidArgsForCall)]
	fake.getUserProvidedServiceInstanceByGuidArgsForCall = append(fake.getUserProvidedServiceInstanceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetUserProvidedServiceInstanceByGuid", []interface{}{arg1})
	fake.getUserProvidedServiceInstanceByGuidMutex.Unlock()
	if fake.GetUserProvidedServiceInstanceByGuidStub != nil {
		return fake.GetUserProvidedServiceInstanceByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getUserProvidedServiceInstanceByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetUserProvidedServiceInstanceByGuidCallCount() int {
	fake.getUserProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.RUnlock()
	return len(fake.getUserProvidedServiceInstanceByGuidArgsForCall)
}

func (fake *FakeCFClient) GetUserProvidedServiceInstanceByGuidCalls(stub func(string) (cfclient.UserProvidedServiceInstance, error)) {
	fake.getUserProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.Unlock()
	fake.GetUserProvidedServiceInstanceByGuidStub = stub
}

func (fake *FakeCFClient) GetUserProvidedServiceInstanceByGuidArgsForCall(i int) string {
	fake.getUserProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.RUnlock()
	argsForCall := fake.getUserProvidedServiceInstanceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetUserProvidedServiceInstanceByGuidReturns(result1 cfclient.UserProvidedServiceInstance, result2 error) {
	fake.getUserProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.Unlock()
	fake.GetUserProvidedServiceInstanceByGuidStub = nil
	fake.getUserProvidedServiceInstanceByGuidReturns = struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetUserProvidedServiceInstanceByGuidReturnsOnCall(i int, result1 cfclient.UserProvidedServiceInstance, result2 error) {
	fake.getUserProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.Unlock()
	fake.GetUserProvidedServiceInstanceByGuidStub = nil
	if fake.getUserProvidedServiceInstanceByGuidReturnsOnCall == nil {
		fake.getUserProvidedServiceInstanceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.getUserProvidedServiceInstanceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) IsolationSegmentForSpace(arg1 string, arg2 string) error {
	fake.isolationSegmentForSpaceMutex.Lock()
	ret, specificReturn := fake.isolationSegmentForSpaceReturnsOnCall[len(fake.isolationSegmentForSpaceArgsForCall)]
	fake.isolationSegmentForSpaceArgsForCall = append(fake.isolationSegmentForSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("IsolationSegmentForSpace", []interface{}{arg1, arg2})
	fake.isolationSegmentForSpaceMutex.Unlock()
	if fake.IsolationSegmentForSpaceStub != nil {
		return fake.IsolationSegmentForSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.isolationSegmentForSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) IsolationSegmentForSpaceCallCount() int {
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	return len(fake.isolationSegmentForSpaceArgsForCall)
}

func (fake *FakeCFClient) IsolationSegmentForSpaceCalls(stub func(string, string) error) {
	fake.isolationSegmentForSpaceMutex.Lock()
	defer fake.isolationSegmentForSpaceMutex.Unlock()
	fake.IsolationSegmentForSpaceStub = stub
}

func (fake *FakeCFClient) IsolationSegmentForSpaceArgsForCall(i int) (string, string) {
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	argsForCall := fake.isolationSegmentForSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) IsolationSegmentForSpaceReturns(result1 error) {
	fake.isolationSegmentForSpaceMutex.Lock()
	defer fake.isolationSegmentForSpaceMutex.Unlock()
	fake.IsolationSegmentForSpaceStub = nil
	fake.isolationSegmentForSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) IsolationSegmentForSpaceReturnsOnCall(i int, result1 error) {
	fake.isolationSegmentForSpaceMutex.Lock()
	defer fake.isolationSegmentForSpaceMutex.Unlock()
	fake.IsolationSegmentForSpaceStub = nil
	if fake.isolationSegmentForSpaceReturnsOnCall == nil {
		fake.isolationSegmentForSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.isolationSegmentForSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) KillAppInstance(arg1 string, arg2 string) error {
	fake.killAppInstanceMutex.Lock()
	ret, specificReturn := fake.killAppInstanceReturnsOnCall[len(fake.killAppInstanceArgsForCall)]
	fake.killAppInstanceArgsForCall = append(fake.killAppInstanceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("KillAppInstance", []interface{}{arg1, arg2})
	fake.killAppInstanceMutex.Unlock()
	if fake.KillAppInstanceStub != nil {
		return fake.KillAppInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.killAppInstanceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) KillAppInstanceCallCount() int {
	fake.killAppInstanceMutex.RLock()
	defer fake.killAppInstanceMutex.RUnlock()
	return len(fake.killAppInstanceArgsForCall)
}

func (fake *FakeCFClient) KillAppInstanceCalls(stub func(string, string) error) {
	fake.killAppInstanceMutex.Lock()
	defer fake.killAppInstanceMutex.Unlock()
	fake.KillAppInstanceStub = stub
}

func (fake *FakeCFClient) KillAppInstanceArgsForCall(i int) (string, string) {
	fake.killAppInstanceMutex.RLock()
	defer fake.killAppInstanceMutex.RUnlock()
	argsForCall := fake.killAppInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) KillAppInstanceReturns(result1 error) {
	fake.killAppInstanceMutex.Lock()
	defer fake.killAppInstanceMutex.Unlock()
	fake.KillAppInstanceStub = nil
	fake.killAppInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) KillAppInstanceReturnsOnCall(i int, result1 error) {
	fake.killAppInstanceMutex.Lock()
	defer fake.killAppInstanceMutex.Unlock()
	fake.KillAppInstanceStub = nil
	if fake.killAppInstanceReturnsOnCall == nil {
		fake.killAppInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.killAppInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListAllProcesses() ([]cfclient.Process, error) {
	fake.listAllProcessesMutex.Lock()
	ret, specificReturn := fake.listAllProcessesReturnsOnCall[len(fake.listAllProcessesArgsForCall)]
	fake.listAllProcessesArgsForCall = append(fake.listAllProcessesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListAllProcesses", []interface{}{})
	fake.listAllProcessesMutex.Unlock()
	if fake.ListAllProcessesStub != nil {
		return fake.ListAllProcessesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAllProcessesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAllProcessesCallCount() int {
	fake.listAllProcessesMutex.RLock()
	defer fake.listAllProcessesMutex.RUnlock()
	return len(fake.listAllProcessesArgsForCall)
}

func (fake *FakeCFClient) ListAllProcessesCalls(stub func() ([]cfclient.Process, error)) {
	fake.listAllProcessesMutex.Lock()
	defer fake.listAllProcessesMutex.Unlock()
	fake.ListAllProcessesStub = stub
}

func (fake *FakeCFClient) ListAllProcessesReturns(result1 []cfclient.Process, result2 error) {
	fake.listAllProcessesMutex.Lock()
	defer fake.listAllProcessesMutex.Unlock()
	fake.ListAllProcessesStub = nil
	fake.listAllProcessesReturns = struct {
		result1 []cfclient.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAllProcessesReturnsOnCall(i int, result1 []cfclient.Process, result2 error) {
	fake.listAllProcessesMutex.Lock()
	defer fake.listAllProcessesMutex.Unlock()
	fake.ListAllProcessesStub = nil
	if fake.listAllProcessesReturnsOnCall == nil {
		fake.listAllProcessesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Process
			result2 error
		})
	}
	fake.listAllProcessesReturnsOnCall[i] = struct {
		result1 []cfclient.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAllProcessesByQuery(arg1 url.Values) ([]cfclient.Process, error) {
	fake.listAllProcessesByQueryMutex.Lock()
	ret, specificReturn := fake.listAllProcessesByQueryReturnsOnCall[len(fake.listAllProcessesByQueryArgsForCall)]
	fake.listAllProcessesByQueryArgsForCall = append(fake.listAllProcessesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListAllProcessesByQuery", []interface{}{arg1})
	fake.listAllProcessesByQueryMutex.Unlock()
	if fake.ListAllProcessesByQueryStub != nil {
		return fake.ListAllProcessesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAllProcessesByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAllProcessesByQueryCallCount() int {
	fake.listAllProcessesByQueryMutex.RLock()
	defer fake.listAllProcessesByQueryMutex.RUnlock()
	return len(fake.listAllProcessesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListAllProcessesByQueryCalls(stub func(url.Values) ([]cfclient.Process, error)) {
	fake.listAllProcessesByQueryMutex.Lock()
	defer fake.listAllProcessesByQueryMutex.Unlock()
	fake.ListAllProcessesByQueryStub = stub
}

func (fake *FakeCFClient) ListAllProcessesByQueryArgsForCall(i int) url.Values {
	fake.listAllProcessesByQueryMutex.RLock()
	defer fake.listAllProcessesByQueryMutex.RUnlock()
	argsForCall := fake.listAllProcessesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListAllProcessesByQueryReturns(result1 []cfclient.Process, result2 error) {
	fake.listAllProcessesByQueryMutex.Lock()
	defer fake.listAllProcessesByQueryMutex.Unlock()
	fake.ListAllProcessesByQueryStub = nil
	fake.listAllProcessesByQueryReturns = struct {
		result1 []cfclient.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAllProcessesByQueryReturnsOnCall(i int, result1 []cfclient.Process, result2 error) {
	fake.listAllProcessesByQueryMutex.Lock()
	defer fake.listAllProcessesByQueryMutex.Unlock()
	fake.ListAllProcessesByQueryStub = nil
	if fake.listAllProcessesByQueryReturnsOnCall == nil {
		fake.listAllProcessesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Process
			result2 error
		})
	}
	fake.listAllProcessesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppEvents(arg1 string) ([]cfclient.AppEventEntity, error) {
	fake.listAppEventsMutex.Lock()
	ret, specificReturn := fake.listAppEventsReturnsOnCall[len(fake.listAppEventsArgsForCall)]
	fake.listAppEventsArgsForCall = append(fake.listAppEventsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListAppEvents", []interface{}{arg1})
	fake.listAppEventsMutex.Unlock()
	if fake.ListAppEventsStub != nil {
		return fake.ListAppEventsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppEventsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAppEventsCallCount() int {
	fake.listAppEventsMutex.RLock()
	defer fake.listAppEventsMutex.RUnlock()
	return len(fake.listAppEventsArgsForCall)
}

func (fake *FakeCFClient) ListAppEventsCalls(stub func(string) ([]cfclient.AppEventEntity, error)) {
	fake.listAppEventsMutex.Lock()
	defer fake.listAppEventsMutex.Unlock()
	fake.ListAppEventsStub = stub
}

func (fake *FakeCFClient) ListAppEventsArgsForCall(i int) string {
	fake.listAppEventsMutex.RLock()
	defer fake.listAppEventsMutex.RUnlock()
	argsForCall := fake.listAppEventsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListAppEventsReturns(result1 []cfclient.AppEventEntity, result2 error) {
	fake.listAppEventsMutex.Lock()
	defer fake.listAppEventsMutex.Unlock()
	fake.ListAppEventsStub = nil
	fake.listAppEventsReturns = struct {
		result1 []cfclient.AppEventEntity
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppEventsReturnsOnCall(i int, result1 []cfclient.AppEventEntity, result2 error) {
	fake.listAppEventsMutex.Lock()
	defer fake.listAppEventsMutex.Unlock()
	fake.ListAppEventsStub = nil
	if fake.listAppEventsReturnsOnCall == nil {
		fake.listAppEventsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.AppEventEntity
			result2 error
		})
	}
	fake.listAppEventsReturnsOnCall[i] = struct {
		result1 []cfclient.AppEventEntity
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppEventsByQuery(arg1 string, arg2 []cfclient.AppEventQuery) ([]cfclient.AppEventEntity, error) {
	var arg2Copy []cfclient.AppEventQuery
	if arg2 != nil {
		arg2Copy = make([]cfclient.AppEventQuery, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.listAppEventsByQueryMutex.Lock()
	ret, specificReturn := fake.listAppEventsByQueryReturnsOnCall[len(fake.listAppEventsByQueryArgsForCall)]
	fake.listAppEventsByQueryArgsForCall = append(fake.listAppEventsByQueryArgsForCall, struct {
		arg1 string
		arg2 []cfclient.AppEventQuery
	}{arg1, arg2Copy})
	fake.recordInvocation("ListAppEventsByQuery", []interface{}{arg1, arg2Copy})
	fake.listAppEventsByQueryMutex.Unlock()
	if fake.ListAppEventsByQueryStub != nil {
		return fake.ListAppEventsByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppEventsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAppEventsByQueryCallCount() int {
	fake.listAppEventsByQueryMutex.RLock()
	defer fake.listAppEventsByQueryMutex.RUnlock()
	return len(fake.listAppEventsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListAppEventsByQueryCalls(stub func(string, []cfclient.AppEventQuery) ([]cfclient.AppEventEntity, error)) {
	fake.listAppEventsByQueryMutex.Lock()
	defer fake.listAppEventsByQueryMutex.Unlock()
	fake.ListAppEventsByQueryStub = stub
}

func (fake *FakeCFClient) ListAppEventsByQueryArgsForCall(i int) (string, []cfclient.AppEventQuery) {
	fake.listAppEventsByQueryMutex.RLock()
	defer fake.listAppEventsByQueryMutex.RUnlock()
	argsForCall := fake.listAppEventsByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListAppEventsByQueryReturns(result1 []cfclient.AppEventEntity, result2 error) {
	fake.listAppEventsByQueryMutex.Lock()
	defer fake.listAppEventsByQueryMutex.Unlock()
	fake.ListAppEventsByQueryStub = nil
	fake.listAppEventsByQueryReturns = struct {
		result1 []cfclient.AppEventEntity
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppEventsByQueryReturnsOnCall(i int, result1 []cfclient.AppEventEntity, result2 error) {
	fake.listAppEventsByQueryMutex.Lock()
	defer fake.listAppEventsByQueryMutex.Unlock()
	fake.ListAppEventsByQueryStub = nil
	if fake.listAppEventsByQueryReturnsOnCall == nil {
		fake.listAppEventsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.AppEventEntity
			result2 error
		})
	}
	fake.listAppEventsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.AppEventEntity
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppUsageEvents() ([]cfclient.AppUsageEvent, error) {
	fake.listAppUsageEventsMutex.Lock()
	ret, specificReturn := fake.listAppUsageEventsReturnsOnCall[len(fake.listAppUsageEventsArgsForCall)]
	fake.listAppUsageEventsArgsForCall = append(fake.listAppUsageEventsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListAppUsageEvents", []interface{}{})
	fake.listAppUsageEventsMutex.Unlock()
	if fake.ListAppUsageEventsStub != nil {
		return fake.ListAppUsageEventsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppUsageEventsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAppUsageEventsCallCount() int {
	fake.listAppUsageEventsMutex.RLock()
	defer fake.listAppUsageEventsMutex.RUnlock()
	return len(fake.listAppUsageEventsArgsForCall)
}

func (fake *FakeCFClient) ListAppUsageEventsCalls(stub func() ([]cfclient.AppUsageEvent, error)) {
	fake.listAppUsageEventsMutex.Lock()
	defer fake.listAppUsageEventsMutex.Unlock()
	fake.ListAppUsageEventsStub = stub
}

func (fake *FakeCFClient) ListAppUsageEventsReturns(result1 []cfclient.AppUsageEvent, result2 error) {
	fake.listAppUsageEventsMutex.Lock()
	defer fake.listAppUsageEventsMutex.Unlock()
	fake.ListAppUsageEventsStub = nil
	fake.listAppUsageEventsReturns = struct {
		result1 []cfclient.AppUsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppUsageEventsReturnsOnCall(i int, result1 []cfclient.AppUsageEvent, result2 error) {
	fake.listAppUsageEventsMutex.Lock()
	defer fake.listAppUsageEventsMutex.Unlock()
	fake.ListAppUsageEventsStub = nil
	if fake.listAppUsageEventsReturnsOnCall == nil {
		fake.listAppUsageEventsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.AppUsageEvent
			result2 error
		})
	}
	fake.listAppUsageEventsReturnsOnCall[i] = struct {
		result1 []cfclient.AppUsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppUsageEventsByQuery(arg1 url.Values) ([]cfclient.AppUsageEvent, error) {
	fake.listAppUsageEventsByQueryMutex.Lock()
	ret, specificReturn := fake.listAppUsageEventsByQueryReturnsOnCall[len(fake.listAppUsageEventsByQueryArgsForCall)]
	fake.listAppUsageEventsByQueryArgsForCall = append(fake.listAppUsageEventsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListAppUsageEventsByQuery", []interface{}{arg1})
	fake.listAppUsageEventsByQueryMutex.Unlock()
	if fake.ListAppUsageEventsByQueryStub != nil {
		return fake.ListAppUsageEventsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppUsageEventsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAppUsageEventsByQueryCallCount() int {
	fake.listAppUsageEventsByQueryMutex.RLock()
	defer fake.listAppUsageEventsByQueryMutex.RUnlock()
	return len(fake.listAppUsageEventsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListAppUsageEventsByQueryCalls(stub func(url.Values) ([]cfclient.AppUsageEvent, error)) {
	fake.listAppUsageEventsByQueryMutex.Lock()
	defer fake.listAppUsageEventsByQueryMutex.Unlock()
	fake.ListAppUsageEventsByQueryStub = stub
}

func (fake *FakeCFClient) ListAppUsageEventsByQueryArgsForCall(i int) url.Values {
	fake.listAppUsageEventsByQueryMutex.RLock()
	defer fake.listAppUsageEventsByQueryMutex.RUnlock()
	argsForCall := fake.listAppUsageEventsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListAppUsageEventsByQueryReturns(result1 []cfclient.AppUsageEvent, result2 error) {
	fake.listAppUsageEventsByQueryMutex.Lock()
	defer fake.listAppUsageEventsByQueryMutex.Unlock()
	fake.ListAppUsageEventsByQueryStub = nil
	fake.listAppUsageEventsByQueryReturns = struct {
		result1 []cfclient.AppUsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppUsageEventsByQueryReturnsOnCall(i int, result1 []cfclient.AppUsageEvent, result2 error) {
	fake.listAppUsageEventsByQueryMutex.Lock()
	defer fake.listAppUsageEventsByQueryMutex.Unlock()
	fake.ListAppUsageEventsByQueryStub = nil
	if fake.listAppUsageEventsByQueryReturnsOnCall == nil {
		fake.listAppUsageEventsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.AppUsageEvent
			result2 error
		})
	}
	fake.listAppUsageEventsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.AppUsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListApps() ([]cfclient.App, error) {
	fake.listAppsMutex.Lock()
	ret, specificReturn := fake.listAppsReturnsOnCall[len(fake.listAppsArgsForCall)]
	fake.listAppsArgsForCall = append(fake.listAppsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListApps", []interface{}{})
	fake.listAppsMutex.Unlock()
	if fake.ListAppsStub != nil {
		return fake.ListAppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAppsCallCount() int {
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	return len(fake.listAppsArgsForCall)
}

func (fake *FakeCFClient) ListAppsCalls(stub func() ([]cfclient.App, error)) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = stub
}

func (fake *FakeCFClient) ListAppsReturns(result1 []cfclient.App, result2 error) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = nil
	fake.listAppsReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppsReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = nil
	if fake.listAppsReturnsOnCall == nil {
		fake.listAppsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.listAppsReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppsByQuery(arg1 url.Values) ([]cfclient.App, error) {
	fake.listAppsByQueryMutex.Lock()
	ret, specificReturn := fake.listAppsByQueryReturnsOnCall[len(fake.listAppsByQueryArgsForCall)]
	fake.listAppsByQueryArgsForCall = append(fake.listAppsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListAppsByQuery", []interface{}{arg1})
	fake.listAppsByQueryMutex.Unlock()
	if fake.ListAppsByQueryStub != nil {
		return fake.ListAppsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAppsByQueryCallCount() int {
	fake.listAppsByQueryMutex.RLock()
	defer fake.listAppsByQueryMutex.RUnlock()
	return len(fake.listAppsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListAppsByQueryCalls(stub func(url.Values) ([]cfclient.App, error)) {
	fake.listAppsByQueryMutex.Lock()
	defer fake.listAppsByQueryMutex.Unlock()
	fake.ListAppsByQueryStub = stub
}

func (fake *FakeCFClient) ListAppsByQueryArgsForCall(i int) url.Values {
	fake.listAppsByQueryMutex.RLock()
	defer fake.listAppsByQueryMutex.RUnlock()
	argsForCall := fake.listAppsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListAppsByQueryReturns(result1 []cfclient.App, result2 error) {
	fake.listAppsByQueryMutex.Lock()
	defer fake.listAppsByQueryMutex.Unlock()
	fake.ListAppsByQueryStub = nil
	fake.listAppsByQueryReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppsByQueryReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.listAppsByQueryMutex.Lock()
	defer fake.listAppsByQueryMutex.Unlock()
	fake.ListAppsByQueryStub = nil
	if fake.listAppsByQueryReturnsOnCall == nil {
		fake.listAppsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.listAppsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppsByQueryWithLimits(arg1 url.Values, arg2 int) ([]cfclient.App, error) {
	fake.listAppsByQueryWithLimitsMutex.Lock()
	ret, specificReturn := fake.listAppsByQueryWithLimitsReturnsOnCall[len(fake.listAppsByQueryWithLimitsArgsForCall)]
	fake.listAppsByQueryWithLimitsArgsForCall = append(fake.listAppsByQueryWithLimitsArgsForCall, struct {
		arg1 url.Values
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("ListAppsByQueryWithLimits", []interface{}{arg1, arg2})
	fake.listAppsByQueryWithLimitsMutex.Unlock()
	if fake.ListAppsByQueryWithLimitsStub != nil {
		return fake.ListAppsByQueryWithLimitsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppsByQueryWithLimitsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAppsByQueryWithLimitsCallCount() int {
	fake.listAppsByQueryWithLimitsMutex.RLock()
	defer fake.listAppsByQueryWithLimitsMutex.RUnlock()
	return len(fake.listAppsByQueryWithLimitsArgsForCall)
}

func (fake *FakeCFClient) ListAppsByQueryWithLimitsCalls(stub func(url.Values, int) ([]cfclient.App, error)) {
	fake.listAppsByQueryWithLimitsMutex.Lock()
	defer fake.listAppsByQueryWithLimitsMutex.Unlock()
	fake.ListAppsByQueryWithLimitsStub = stub
}

func (fake *FakeCFClient) ListAppsByQueryWithLimitsArgsForCall(i int) (url.Values, int) {
	fake.listAppsByQueryWithLimitsMutex.RLock()
	defer fake.listAppsByQueryWithLimitsMutex.RUnlock()
	argsForCall := fake.listAppsByQueryWithLimitsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListAppsByQueryWithLimitsReturns(result1 []cfclient.App, result2 error) {
	fake.listAppsByQueryWithLimitsMutex.Lock()
	defer fake.listAppsByQueryWithLimitsMutex.Unlock()
	fake.ListAppsByQueryWithLimitsStub = nil
	fake.listAppsByQueryWithLimitsReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppsByQueryWithLimitsReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.listAppsByQueryWithLimitsMutex.Lock()
	defer fake.listAppsByQueryWithLimitsMutex.Unlock()
	fake.ListAppsByQueryWithLimitsStub = nil
	if fake.listAppsByQueryWithLimitsReturnsOnCall == nil {
		fake.listAppsByQueryWithLimitsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.listAppsByQueryWithLimitsReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppsByRoute(arg1 string) ([]cfclient.App, error) {
	fake.listAppsByRouteMutex.Lock()
	ret, specificReturn := fake.listAppsByRouteReturnsOnCall[len(fake.listAppsByRouteArgsForCall)]
	fake.listAppsByRouteArgsForCall = append(fake.listAppsByRouteArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListAppsByRoute", []interface{}{arg1})
	fake.listAppsByRouteMutex.Unlock()
	if fake.ListAppsByRouteStub != nil {
		return fake.ListAppsByRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppsByRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListAppsByRouteCallCount() int {
	fake.listAppsByRouteMutex.RLock()
	defer fake.listAppsByRouteMutex.RUnlock()
	return len(fake.listAppsByRouteArgsForCall)
}

func (fake *FakeCFClient) ListAppsByRouteCalls(stub func(string) ([]cfclient.App, error)) {
	fake.listAppsByRouteMutex.Lock()
	defer fake.listAppsByRouteMutex.Unlock()
	fake.ListAppsByRouteStub = stub
}

func (fake *FakeCFClient) ListAppsByRouteArgsForCall(i int) string {
	fake.listAppsByRouteMutex.RLock()
	defer fake.listAppsByRouteMutex.RUnlock()
	argsForCall := fake.listAppsByRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListAppsByRouteReturns(result1 []cfclient.App, result2 error) {
	fake.listAppsByRouteMutex.Lock()
	defer fake.listAppsByRouteMutex.Unlock()
	fake.ListAppsByRouteStub = nil
	fake.listAppsByRouteReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListAppsByRouteReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.listAppsByRouteMutex.Lock()
	defer fake.listAppsByRouteMutex.Unlock()
	fake.ListAppsByRouteStub = nil
	if fake.listAppsByRouteReturnsOnCall == nil {
		fake.listAppsByRouteReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.listAppsByRouteReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListBuildpacks() ([]cfclient.Buildpack, error) {
	fake.listBuildpacksMutex.Lock()
	ret, specificReturn := fake.listBuildpacksReturnsOnCall[len(fake.listBuildpacksArgsForCall)]
	fake.listBuildpacksArgsForCall = append(fake.listBuildpacksArgsForCall, struct {
	}{})
	fake.recordInvocation("ListBuildpacks", []interface{}{})
	fake.listBuildpacksMutex.Unlock()
	if fake.ListBuildpacksStub != nil {
		return fake.ListBuildpacksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBuildpacksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListBuildpacksCallCount() int {
	fake.listBuildpacksMutex.RLock()
	defer fake.listBuildpacksMutex.RUnlock()
	return len(fake.listBuildpacksArgsForCall)
}

func (fake *FakeCFClient) ListBuildpacksCalls(stub func() ([]cfclient.Buildpack, error)) {
	fake.listBuildpacksMutex.Lock()
	defer fake.listBuildpacksMutex.Unlock()
	fake.ListBuildpacksStub = stub
}

func (fake *FakeCFClient) ListBuildpacksReturns(result1 []cfclient.Buildpack, result2 error) {
	fake.listBuildpacksMutex.Lock()
	defer fake.listBuildpacksMutex.Unlock()
	fake.ListBuildpacksStub = nil
	fake.listBuildpacksReturns = struct {
		result1 []cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListBuildpacksReturnsOnCall(i int, result1 []cfclient.Buildpack, result2 error) {
	fake.listBuildpacksMutex.Lock()
	defer fake.listBuildpacksMutex.Unlock()
	fake.ListBuildpacksStub = nil
	if fake.listBuildpacksReturnsOnCall == nil {
		fake.listBuildpacksReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Buildpack
			result2 error
		})
	}
	fake.listBuildpacksReturnsOnCall[i] = struct {
		result1 []cfclient.Buildpack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListDomains() ([]cfclient.Domain, error) {
	fake.listDomainsMutex.Lock()
	ret, specificReturn := fake.listDomainsReturnsOnCall[len(fake.listDomainsArgsForCall)]
	fake.listDomainsArgsForCall = append(fake.listDomainsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListDomains", []interface{}{})
	fake.listDomainsMutex.Unlock()
	if fake.ListDomainsStub != nil {
		return fake.ListDomainsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDomainsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListDomainsCallCount() int {
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	return len(fake.listDomainsArgsForCall)
}

func (fake *FakeCFClient) ListDomainsCalls(stub func() ([]cfclient.Domain, error)) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = stub
}

func (fake *FakeCFClient) ListDomainsReturns(result1 []cfclient.Domain, result2 error) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = nil
	fake.listDomainsReturns = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListDomainsReturnsOnCall(i int, result1 []cfclient.Domain, result2 error) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = nil
	if fake.listDomainsReturnsOnCall == nil {
		fake.listDomainsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Domain
			result2 error
		})
	}
	fake.listDomainsReturnsOnCall[i] = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListDomainsByQuery(arg1 url.Values) ([]cfclient.Domain, error) {
	fake.listDomainsByQueryMutex.Lock()
	ret, specificReturn := fake.listDomainsByQueryReturnsOnCall[len(fake.listDomainsByQueryArgsForCall)]
	fake.listDomainsByQueryArgsForCall = append(fake.listDomainsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListDomainsByQuery", []interface{}{arg1})
	fake.listDomainsByQueryMutex.Unlock()
	if fake.ListDomainsByQueryStub != nil {
		return fake.ListDomainsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listDomainsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListDomainsByQueryCallCount() int {
	fake.listDomainsByQueryMutex.RLock()
	defer fake.listDomainsByQueryMutex.RUnlock()
	return len(fake.listDomainsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListDomainsByQueryCalls(stub func(url.Values) ([]cfclient.Domain, error)) {
	fake.listDomainsByQueryMutex.Lock()
	defer fake.listDomainsByQueryMutex.Unlock()
	fake.ListDomainsByQueryStub = stub
}

func (fake *FakeCFClient) ListDomainsByQueryArgsForCall(i int) url.Values {
	fake.listDomainsByQueryMutex.RLock()
	defer fake.listDomainsByQueryMutex.RUnlock()
	argsForCall := fake.listDomainsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListDomainsByQueryReturns(result1 []cfclient.Domain, result2 error) {
	fake.listDomainsByQueryMutex.Lock()
	defer fake.listDomainsByQueryMutex.Unlock()
	fake.ListDomainsByQueryStub = nil
	fake.listDomainsByQueryReturns = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListDomainsByQueryReturnsOnCall(i int, result1 []cfclient.Domain, result2 error) {
	fake.listDomainsByQueryMutex.Lock()
	defer fake.listDomainsByQueryMutex.Unlock()
	fake.ListDomainsByQueryStub = nil
	if fake.listDomainsByQueryReturnsOnCall == nil {
		fake.listDomainsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Domain
			result2 error
		})
	}
	fake.listDomainsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListEvents() ([]cfclient.Event, error) {
	fake.listEventsMutex.Lock()
	ret, specificReturn := fake.listEventsReturnsOnCall[len(fake.listEventsArgsForCall)]
	fake.listEventsArgsForCall = append(fake.listEventsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListEvents", []interface{}{})
	fake.listEventsMutex.Unlock()
	if fake.ListEventsStub != nil {
		return fake.ListEventsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listEventsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListEventsCallCount() int {
	fake.listEventsMutex.RLock()
	defer fake.listEventsMutex.RUnlock()
	return len(fake.listEventsArgsForCall)
}

func (fake *FakeCFClient) ListEventsCalls(stub func() ([]cfclient.Event, error)) {
	fake.listEventsMutex.Lock()
	defer fake.listEventsMutex.Unlock()
	fake.ListEventsStub = stub
}

func (fake *FakeCFClient) ListEventsReturns(result1 []cfclient.Event, result2 error) {
	fake.listEventsMutex.Lock()
	defer fake.listEventsMutex.Unlock()
	fake.ListEventsStub = nil
	fake.listEventsReturns = struct {
		result1 []cfclient.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListEventsReturnsOnCall(i int, result1 []cfclient.Event, result2 error) {
	fake.listEventsMutex.Lock()
	defer fake.listEventsMutex.Unlock()
	fake.ListEventsStub = nil
	if fake.listEventsReturnsOnCall == nil {
		fake.listEventsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Event
			result2 error
		})
	}
	fake.listEventsReturnsOnCall[i] = struct {
		result1 []cfclient.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListEventsByQuery(arg1 url.Values) ([]cfclient.Event, error) {
	fake.listEventsByQueryMutex.Lock()
	ret, specificReturn := fake.listEventsByQueryReturnsOnCall[len(fake.listEventsByQueryArgsForCall)]
	fake.listEventsByQueryArgsForCall = append(fake.listEventsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListEventsByQuery", []interface{}{arg1})
	fake.listEventsByQueryMutex.Unlock()
	if fake.ListEventsByQueryStub != nil {
		return fake.ListEventsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listEventsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListEventsByQueryCallCount() int {
	fake.listEventsByQueryMutex.RLock()
	defer fake.listEventsByQueryMutex.RUnlock()
	return len(fake.listEventsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListEventsByQueryCalls(stub func(url.Values) ([]cfclient.Event, error)) {
	fake.listEventsByQueryMutex.Lock()
	defer fake.listEventsByQueryMutex.Unlock()
	fake.ListEventsByQueryStub = stub
}

func (fake *FakeCFClient) ListEventsByQueryArgsForCall(i int) url.Values {
	fake.listEventsByQueryMutex.RLock()
	defer fake.listEventsByQueryMutex.RUnlock()
	argsForCall := fake.listEventsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListEventsByQueryReturns(result1 []cfclient.Event, result2 error) {
	fake.listEventsByQueryMutex.Lock()
	defer fake.listEventsByQueryMutex.Unlock()
	fake.ListEventsByQueryStub = nil
	fake.listEventsByQueryReturns = struct {
		result1 []cfclient.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListEventsByQueryReturnsOnCall(i int, result1 []cfclient.Event, result2 error) {
	fake.listEventsByQueryMutex.Lock()
	defer fake.listEventsByQueryMutex.Unlock()
	fake.ListEventsByQueryStub = nil
	if fake.listEventsByQueryReturnsOnCall == nil {
		fake.listEventsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Event
			result2 error
		})
	}
	fake.listEventsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Event
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListIsolationSegments() ([]cfclient.IsolationSegment, error) {
	fake.listIsolationSegmentsMutex.Lock()
	ret, specificReturn := fake.listIsolationSegmentsReturnsOnCall[len(fake.listIsolationSegmentsArgsForCall)]
	fake.listIsolationSegmentsArgsForCall = append(fake.listIsolationSegmentsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListIsolationSegments", []interface{}{})
	fake.listIsolationSegmentsMutex.Unlock()
	if fake.ListIsolationSegmentsStub != nil {
		return fake.ListIsolationSegmentsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listIsolationSegmentsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListIsolationSegmentsCallCount() int {
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	return len(fake.listIsolationSegmentsArgsForCall)
}

func (fake *FakeCFClient) ListIsolationSegmentsCalls(stub func() ([]cfclient.IsolationSegment, error)) {
	fake.listIsolationSegmentsMutex.Lock()
	defer fake.listIsolationSegmentsMutex.Unlock()
	fake.ListIsolationSegmentsStub = stub
}

func (fake *FakeCFClient) ListIsolationSegmentsReturns(result1 []cfclient.IsolationSegment, result2 error) {
	fake.listIsolationSegmentsMutex.Lock()
	defer fake.listIsolationSegmentsMutex.Unlock()
	fake.ListIsolationSegmentsStub = nil
	fake.listIsolationSegmentsReturns = struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListIsolationSegmentsReturnsOnCall(i int, result1 []cfclient.IsolationSegment, result2 error) {
	fake.listIsolationSegmentsMutex.Lock()
	defer fake.listIsolationSegmentsMutex.Unlock()
	fake.ListIsolationSegmentsStub = nil
	if fake.listIsolationSegmentsReturnsOnCall == nil {
		fake.listIsolationSegmentsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.IsolationSegment
			result2 error
		})
	}
	fake.listIsolationSegmentsReturnsOnCall[i] = struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListIsolationSegmentsByQuery(arg1 url.Values) ([]cfclient.IsolationSegment, error) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	ret, specificReturn := fake.listIsolationSegmentsByQueryReturnsOnCall[len(fake.listIsolationSegmentsByQueryArgsForCall)]
	fake.listIsolationSegmentsByQueryArgsForCall = append(fake.listIsolationSegmentsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListIsolationSegmentsByQuery", []interface{}{arg1})
	fake.listIsolationSegmentsByQueryMutex.Unlock()
	if fake.ListIsolationSegmentsByQueryStub != nil {
		return fake.ListIsolationSegmentsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listIsolationSegmentsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryCallCount() int {
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	return len(fake.listIsolationSegmentsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryCalls(stub func(url.Values) ([]cfclient.IsolationSegment, error)) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	defer fake.listIsolationSegmentsByQueryMutex.Unlock()
	fake.ListIsolationSegmentsByQueryStub = stub
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryArgsForCall(i int) url.Values {
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	argsForCall := fake.listIsolationSegmentsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryReturns(result1 []cfclient.IsolationSegment, result2 error) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	defer fake.listIsolationSegmentsByQueryMutex.Unlock()
	fake.ListIsolationSegmentsByQueryStub = nil
	fake.listIsolationSegmentsByQueryReturns = struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryReturnsOnCall(i int, result1 []cfclient.IsolationSegment, result2 error) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	defer fake.listIsolationSegmentsByQueryMutex.Unlock()
	fake.ListIsolationSegmentsByQueryStub = nil
	if fake.listIsolationSegmentsByQueryReturnsOnCall == nil {
		fake.listIsolationSegmentsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.IsolationSegment
			result2 error
		})
	}
	fake.listIsolationSegmentsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgAuditors(arg1 string) ([]cfclient.User, error) {
	fake.listOrgAuditorsMutex.Lock()
	ret, specificReturn := fake.listOrgAuditorsReturnsOnCall[len(fake.listOrgAuditorsArgsForCall)]
	fake.listOrgAuditorsArgsForCall = append(fake.listOrgAuditorsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListOrgAuditors", []interface{}{arg1})
	fake.listOrgAuditorsMutex.Unlock()
	if fake.ListOrgAuditorsStub != nil {
		return fake.ListOrgAuditorsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgAuditorsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgAuditorsCallCount() int {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	return len(fake.listOrgAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListOrgAuditorsCalls(stub func(string) ([]cfclient.User, error)) {
	fake.listOrgAuditorsMutex.Lock()
	defer fake.listOrgAuditorsMutex.Unlock()
	fake.ListOrgAuditorsStub = stub
}

func (fake *FakeCFClient) ListOrgAuditorsArgsForCall(i int) string {
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	argsForCall := fake.listOrgAuditorsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgAuditorsReturns(result1 []cfclient.User, result2 error) {
	fake.listOrgAuditorsMutex.Lock()
	defer fake.listOrgAuditorsMutex.Unlock()
	fake.ListOrgAuditorsStub = nil
	fake.listOrgAuditorsReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgAuditorsReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listOrgAuditorsMutex.Lock()
	defer fake.listOrgAuditorsMutex.Unlock()
	fake.ListOrgAuditorsStub = nil
	if fake.listOrgAuditorsReturnsOnCall == nil {
		fake.listOrgAuditorsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listOrgAuditorsReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgAuditorsByQuery(arg1 string, arg2 url.Values) ([]cfclient.User, error) {
	fake.listOrgAuditorsByQueryMutex.Lock()
	ret, specificReturn := fake.listOrgAuditorsByQueryReturnsOnCall[len(fake.listOrgAuditorsByQueryArgsForCall)]
	fake.listOrgAuditorsByQueryArgsForCall = append(fake.listOrgAuditorsByQueryArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("ListOrgAuditorsByQuery", []interface{}{arg1, arg2})
	fake.listOrgAuditorsByQueryMutex.Unlock()
	if fake.ListOrgAuditorsByQueryStub != nil {
		return fake.ListOrgAuditorsByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgAuditorsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgAuditorsByQueryCallCount() int {
	fake.listOrgAuditorsByQueryMutex.RLock()
	defer fake.listOrgAuditorsByQueryMutex.RUnlock()
	return len(fake.listOrgAuditorsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListOrgAuditorsByQueryCalls(stub func(string, url.Values) ([]cfclient.User, error)) {
	fake.listOrgAuditorsByQueryMutex.Lock()
	defer fake.listOrgAuditorsByQueryMutex.Unlock()
	fake.ListOrgAuditorsByQueryStub = stub
}

func (fake *FakeCFClient) ListOrgAuditorsByQueryArgsForCall(i int) (string, url.Values) {
	fake.listOrgAuditorsByQueryMutex.RLock()
	defer fake.listOrgAuditorsByQueryMutex.RUnlock()
	argsForCall := fake.listOrgAuditorsByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListOrgAuditorsByQueryReturns(result1 []cfclient.User, result2 error) {
	fake.listOrgAuditorsByQueryMutex.Lock()
	defer fake.listOrgAuditorsByQueryMutex.Unlock()
	fake.ListOrgAuditorsByQueryStub = nil
	fake.listOrgAuditorsByQueryReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgAuditorsByQueryReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listOrgAuditorsByQueryMutex.Lock()
	defer fake.listOrgAuditorsByQueryMutex.Unlock()
	fake.ListOrgAuditorsByQueryStub = nil
	if fake.listOrgAuditorsByQueryReturnsOnCall == nil {
		fake.listOrgAuditorsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listOrgAuditorsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgBillingManagers(arg1 string) ([]cfclient.User, error) {
	fake.listOrgBillingManagersMutex.Lock()
	ret, specificReturn := fake.listOrgBillingManagersReturnsOnCall[len(fake.listOrgBillingManagersArgsForCall)]
	fake.listOrgBillingManagersArgsForCall = append(fake.listOrgBillingManagersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListOrgBillingManagers", []interface{}{arg1})
	fake.listOrgBillingManagersMutex.Unlock()
	if fake.ListOrgBillingManagersStub != nil {
		return fake.ListOrgBillingManagersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgBillingManagersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgBillingManagersCallCount() int {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	return len(fake.listOrgBillingManagersArgsForCall)
}

func (fake *FakeCFClient) ListOrgBillingManagersCalls(stub func(string) ([]cfclient.User, error)) {
	fake.listOrgBillingManagersMutex.Lock()
	defer fake.listOrgBillingManagersMutex.Unlock()
	fake.ListOrgBillingManagersStub = stub
}

func (fake *FakeCFClient) ListOrgBillingManagersArgsForCall(i int) string {
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	argsForCall := fake.listOrgBillingManagersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgBillingManagersReturns(result1 []cfclient.User, result2 error) {
	fake.listOrgBillingManagersMutex.Lock()
	defer fake.listOrgBillingManagersMutex.Unlock()
	fake.ListOrgBillingManagersStub = nil
	fake.listOrgBillingManagersReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgBillingManagersReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listOrgBillingManagersMutex.Lock()
	defer fake.listOrgBillingManagersMutex.Unlock()
	fake.ListOrgBillingManagersStub = nil
	if fake.listOrgBillingManagersReturnsOnCall == nil {
		fake.listOrgBillingManagersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listOrgBillingManagersReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgBillingManagersByQuery(arg1 string, arg2 url.Values) ([]cfclient.User, error) {
	fake.listOrgBillingManagersByQueryMutex.Lock()
	ret, specificReturn := fake.listOrgBillingManagersByQueryReturnsOnCall[len(fake.listOrgBillingManagersByQueryArgsForCall)]
	fake.listOrgBillingManagersByQueryArgsForCall = append(fake.listOrgBillingManagersByQueryArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("ListOrgBillingManagersByQuery", []interface{}{arg1, arg2})
	fake.listOrgBillingManagersByQueryMutex.Unlock()
	if fake.ListOrgBillingManagersByQueryStub != nil {
		return fake.ListOrgBillingManagersByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgBillingManagersByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgBillingManagersByQueryCallCount() int {
	fake.listOrgBillingManagersByQueryMutex.RLock()
	defer fake.listOrgBillingManagersByQueryMutex.RUnlock()
	return len(fake.listOrgBillingManagersByQueryArgsForCall)
}

func (fake *FakeCFClient) ListOrgBillingManagersByQueryCalls(stub func(string, url.Values) ([]cfclient.User, error)) {
	fake.listOrgBillingManagersByQueryMutex.Lock()
	defer fake.listOrgBillingManagersByQueryMutex.Unlock()
	fake.ListOrgBillingManagersByQueryStub = stub
}

func (fake *FakeCFClient) ListOrgBillingManagersByQueryArgsForCall(i int) (string, url.Values) {
	fake.listOrgBillingManagersByQueryMutex.RLock()
	defer fake.listOrgBillingManagersByQueryMutex.RUnlock()
	argsForCall := fake.listOrgBillingManagersByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListOrgBillingManagersByQueryReturns(result1 []cfclient.User, result2 error) {
	fake.listOrgBillingManagersByQueryMutex.Lock()
	defer fake.listOrgBillingManagersByQueryMutex.Unlock()
	fake.ListOrgBillingManagersByQueryStub = nil
	fake.listOrgBillingManagersByQueryReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgBillingManagersByQueryReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listOrgBillingManagersByQueryMutex.Lock()
	defer fake.listOrgBillingManagersByQueryMutex.Unlock()
	fake.ListOrgBillingManagersByQueryStub = nil
	if fake.listOrgBillingManagersByQueryReturnsOnCall == nil {
		fake.listOrgBillingManagersByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listOrgBillingManagersByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgManagers(arg1 string) ([]cfclient.User, error) {
	fake.listOrgManagersMutex.Lock()
	ret, specificReturn := fake.listOrgManagersReturnsOnCall[len(fake.listOrgManagersArgsForCall)]
	fake.listOrgManagersArgsForCall = append(fake.listOrgManagersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListOrgManagers", []interface{}{arg1})
	fake.listOrgManagersMutex.Unlock()
	if fake.ListOrgManagersStub != nil {
		return fake.ListOrgManagersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgManagersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgManagersCallCount() int {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	return len(fake.listOrgManagersArgsForCall)
}

func (fake *FakeCFClient) ListOrgManagersCalls(stub func(string) ([]cfclient.User, error)) {
	fake.listOrgManagersMutex.Lock()
	defer fake.listOrgManagersMutex.Unlock()
	fake.ListOrgManagersStub = stub
}

func (fake *FakeCFClient) ListOrgManagersArgsForCall(i int) string {
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	argsForCall := fake.listOrgManagersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgManagersReturns(result1 []cfclient.User, result2 error) {
	fake.listOrgManagersMutex.Lock()
	defer fake.listOrgManagersMutex.Unlock()
	fake.ListOrgManagersStub = nil
	fake.listOrgManagersReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgManagersReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listOrgManagersMutex.Lock()
	defer fake.listOrgManagersMutex.Unlock()
	fake.ListOrgManagersStub = nil
	if fake.listOrgManagersReturnsOnCall == nil {
		fake.listOrgManagersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listOrgManagersReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgManagersByQuery(arg1 string, arg2 url.Values) ([]cfclient.User, error) {
	fake.listOrgManagersByQueryMutex.Lock()
	ret, specificReturn := fake.listOrgManagersByQueryReturnsOnCall[len(fake.listOrgManagersByQueryArgsForCall)]
	fake.listOrgManagersByQueryArgsForCall = append(fake.listOrgManagersByQueryArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("ListOrgManagersByQuery", []interface{}{arg1, arg2})
	fake.listOrgManagersByQueryMutex.Unlock()
	if fake.ListOrgManagersByQueryStub != nil {
		return fake.ListOrgManagersByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgManagersByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgManagersByQueryCallCount() int {
	fake.listOrgManagersByQueryMutex.RLock()
	defer fake.listOrgManagersByQueryMutex.RUnlock()
	return len(fake.listOrgManagersByQueryArgsForCall)
}

func (fake *FakeCFClient) ListOrgManagersByQueryCalls(stub func(string, url.Values) ([]cfclient.User, error)) {
	fake.listOrgManagersByQueryMutex.Lock()
	defer fake.listOrgManagersByQueryMutex.Unlock()
	fake.ListOrgManagersByQueryStub = stub
}

func (fake *FakeCFClient) ListOrgManagersByQueryArgsForCall(i int) (string, url.Values) {
	fake.listOrgManagersByQueryMutex.RLock()
	defer fake.listOrgManagersByQueryMutex.RUnlock()
	argsForCall := fake.listOrgManagersByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListOrgManagersByQueryReturns(result1 []cfclient.User, result2 error) {
	fake.listOrgManagersByQueryMutex.Lock()
	defer fake.listOrgManagersByQueryMutex.Unlock()
	fake.ListOrgManagersByQueryStub = nil
	fake.listOrgManagersByQueryReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgManagersByQueryReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listOrgManagersByQueryMutex.Lock()
	defer fake.listOrgManagersByQueryMutex.Unlock()
	fake.ListOrgManagersByQueryStub = nil
	if fake.listOrgManagersByQueryReturnsOnCall == nil {
		fake.listOrgManagersByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listOrgManagersByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgPrivateDomains(arg1 string) ([]cfclient.Domain, error) {
	fake.listOrgPrivateDomainsMutex.Lock()
	ret, specificReturn := fake.listOrgPrivateDomainsReturnsOnCall[len(fake.listOrgPrivateDomainsArgsForCall)]
	fake.listOrgPrivateDomainsArgsForCall = append(fake.listOrgPrivateDomainsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListOrgPrivateDomains", []interface{}{arg1})
	fake.listOrgPrivateDomainsMutex.Unlock()
	if fake.ListOrgPrivateDomainsStub != nil {
		return fake.ListOrgPrivateDomainsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgPrivateDomainsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgPrivateDomainsCallCount() int {
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgPrivateDomainsArgsForCall)
}

func (fake *FakeCFClient) ListOrgPrivateDomainsCalls(stub func(string) ([]cfclient.Domain, error)) {
	fake.listOrgPrivateDomainsMutex.Lock()
	defer fake.listOrgPrivateDomainsMutex.Unlock()
	fake.ListOrgPrivateDomainsStub = stub
}

func (fake *FakeCFClient) ListOrgPrivateDomainsArgsForCall(i int) string {
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	argsForCall := fake.listOrgPrivateDomainsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgPrivateDomainsReturns(result1 []cfclient.Domain, result2 error) {
	fake.listOrgPrivateDomainsMutex.Lock()
	defer fake.listOrgPrivateDomainsMutex.Unlock()
	fake.ListOrgPrivateDomainsStub = nil
	fake.listOrgPrivateDomainsReturns = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgPrivateDomainsReturnsOnCall(i int, result1 []cfclient.Domain, result2 error) {
	fake.listOrgPrivateDomainsMutex.Lock()
	defer fake.listOrgPrivateDomainsMutex.Unlock()
	fake.ListOrgPrivateDomainsStub = nil
	if fake.listOrgPrivateDomainsReturnsOnCall == nil {
		fake.listOrgPrivateDomainsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Domain
			result2 error
		})
	}
	fake.listOrgPrivateDomainsReturnsOnCall[i] = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgQuotas() ([]cfclient.OrgQuota, error) {
	fake.listOrgQuotasMutex.Lock()
	ret, specificReturn := fake.listOrgQuotasReturnsOnCall[len(fake.listOrgQuotasArgsForCall)]
	fake.listOrgQuotasArgsForCall = append(fake.listOrgQuotasArgsForCall, struct {
	}{})
	fake.recordInvocation("ListOrgQuotas", []interface{}{})
	fake.listOrgQuotasMutex.Unlock()
	if fake.ListOrgQuotasStub != nil {
		return fake.ListOrgQuotasStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgQuotasReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgQuotasCallCount() int {
	fake.listOrgQuotasMutex.RLock()
	defer fake.listOrgQuotasMutex.RUnlock()
	return len(fake.listOrgQuotasArgsForCall)
}

func (fake *FakeCFClient) ListOrgQuotasCalls(stub func() ([]cfclient.OrgQuota, error)) {
	fake.listOrgQuotasMutex.Lock()
	defer fake.listOrgQuotasMutex.Unlock()
	fake.ListOrgQuotasStub = stub
}

func (fake *FakeCFClient) ListOrgQuotasReturns(result1 []cfclient.OrgQuota, result2 error) {
	fake.listOrgQuotasMutex.Lock()
	defer fake.listOrgQuotasMutex.Unlock()
	fake.ListOrgQuotasStub = nil
	fake.listOrgQuotasReturns = struct {
		result1 []cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgQuotasReturnsOnCall(i int, result1 []cfclient.OrgQuota, result2 error) {
	fake.listOrgQuotasMutex.Lock()
	defer fake.listOrgQuotasMutex.Unlock()
	fake.ListOrgQuotasStub = nil
	if fake.listOrgQuotasReturnsOnCall == nil {
		fake.listOrgQuotasReturnsOnCall = make(map[int]struct {
			result1 []cfclient.OrgQuota
			result2 error
		})
	}
	fake.listOrgQuotasReturnsOnCall[i] = struct {
		result1 []cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgQuotasByQuery(arg1 url.Values) ([]cfclient.OrgQuota, error) {
	fake.listOrgQuotasByQueryMutex.Lock()
	ret, specificReturn := fake.listOrgQuotasByQueryReturnsOnCall[len(fake.listOrgQuotasByQueryArgsForCall)]
	fake.listOrgQuotasByQueryArgsForCall = append(fake.listOrgQuotasByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListOrgQuotasByQuery", []interface{}{arg1})
	fake.listOrgQuotasByQueryMutex.Unlock()
	if fake.ListOrgQuotasByQueryStub != nil {
		return fake.ListOrgQuotasByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgQuotasByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgQuotasByQueryCallCount() int {
	fake.listOrgQuotasByQueryMutex.RLock()
	defer fake.listOrgQuotasByQueryMutex.RUnlock()
	return len(fake.listOrgQuotasByQueryArgsForCall)
}

func (fake *FakeCFClient) ListOrgQuotasByQueryCalls(stub func(url.Values) ([]cfclient.OrgQuota, error)) {
	fake.listOrgQuotasByQueryMutex.Lock()
	defer fake.listOrgQuotasByQueryMutex.Unlock()
	fake.ListOrgQuotasByQueryStub = stub
}

func (fake *FakeCFClient) ListOrgQuotasByQueryArgsForCall(i int) url.Values {
	fake.listOrgQuotasByQueryMutex.RLock()
	defer fake.listOrgQuotasByQueryMutex.RUnlock()
	argsForCall := fake.listOrgQuotasByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgQuotasByQueryReturns(result1 []cfclient.OrgQuota, result2 error) {
	fake.listOrgQuotasByQueryMutex.Lock()
	defer fake.listOrgQuotasByQueryMutex.Unlock()
	fake.ListOrgQuotasByQueryStub = nil
	fake.listOrgQuotasByQueryReturns = struct {
		result1 []cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgQuotasByQueryReturnsOnCall(i int, result1 []cfclient.OrgQuota, result2 error) {
	fake.listOrgQuotasByQueryMutex.Lock()
	defer fake.listOrgQuotasByQueryMutex.Unlock()
	fake.ListOrgQuotasByQueryStub = nil
	if fake.listOrgQuotasByQueryReturnsOnCall == nil {
		fake.listOrgQuotasByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.OrgQuota
			result2 error
		})
	}
	fake.listOrgQuotasByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgSpaceQuotas(arg1 string) ([]cfclient.SpaceQuota, error) {
	fake.listOrgSpaceQuotasMutex.Lock()
	ret, specificReturn := fake.listOrgSpaceQuotasReturnsOnCall[len(fake.listOrgSpaceQuotasArgsForCall)]
	fake.listOrgSpaceQuotasArgsForCall = append(fake.listOrgSpaceQuotasArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListOrgSpaceQuotas", []interface{}{arg1})
	fake.listOrgSpaceQuotasMutex.Unlock()
	if fake.ListOrgSpaceQuotasStub != nil {
		return fake.ListOrgSpaceQuotasStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgSpaceQuotasReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgSpaceQuotasCallCount() int {
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	return len(fake.listOrgSpaceQuotasArgsForCall)
}

func (fake *FakeCFClient) ListOrgSpaceQuotasCalls(stub func(string) ([]cfclient.SpaceQuota, error)) {
	fake.listOrgSpaceQuotasMutex.Lock()
	defer fake.listOrgSpaceQuotasMutex.Unlock()
	fake.ListOrgSpaceQuotasStub = stub
}

func (fake *FakeCFClient) ListOrgSpaceQuotasArgsForCall(i int) string {
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	argsForCall := fake.listOrgSpaceQuotasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgSpaceQuotasReturns(result1 []cfclient.SpaceQuota, result2 error) {
	fake.listOrgSpaceQuotasMutex.Lock()
	defer fake.listOrgSpaceQuotasMutex.Unlock()
	fake.ListOrgSpaceQuotasStub = nil
	fake.listOrgSpaceQuotasReturns = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgSpaceQuotasReturnsOnCall(i int, result1 []cfclient.SpaceQuota, result2 error) {
	fake.listOrgSpaceQuotasMutex.Lock()
	defer fake.listOrgSpaceQuotasMutex.Unlock()
	fake.ListOrgSpaceQuotasStub = nil
	if fake.listOrgSpaceQuotasReturnsOnCall == nil {
		fake.listOrgSpaceQuotasReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SpaceQuota
			result2 error
		})
	}
	fake.listOrgSpaceQuotasReturnsOnCall[i] = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgUsers(arg1 string) ([]cfclient.User, error) {
	fake.listOrgUsersMutex.Lock()
	ret, specificReturn := fake.listOrgUsersReturnsOnCall[len(fake.listOrgUsersArgsForCall)]
	fake.listOrgUsersArgsForCall = append(fake.listOrgUsersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListOrgUsers", []interface{}{arg1})
	fake.listOrgUsersMutex.Unlock()
	if fake.ListOrgUsersStub != nil {
		return fake.ListOrgUsersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgUsersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgUsersCallCount() int {
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	return len(fake.listOrgUsersArgsForCall)
}

func (fake *FakeCFClient) ListOrgUsersCalls(stub func(string) ([]cfclient.User, error)) {
	fake.listOrgUsersMutex.Lock()
	defer fake.listOrgUsersMutex.Unlock()
	fake.ListOrgUsersStub = stub
}

func (fake *FakeCFClient) ListOrgUsersArgsForCall(i int) string {
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	argsForCall := fake.listOrgUsersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgUsersReturns(result1 []cfclient.User, result2 error) {
	fake.listOrgUsersMutex.Lock()
	defer fake.listOrgUsersMutex.Unlock()
	fake.ListOrgUsersStub = nil
	fake.listOrgUsersReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgUsersReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listOrgUsersMutex.Lock()
	defer fake.listOrgUsersMutex.Unlock()
	fake.ListOrgUsersStub = nil
	if fake.listOrgUsersReturnsOnCall == nil {
		fake.listOrgUsersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listOrgUsersReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgUsersByQuery(arg1 string, arg2 url.Values) ([]cfclient.User, error) {
	fake.listOrgUsersByQueryMutex.Lock()
	ret, specificReturn := fake.listOrgUsersByQueryReturnsOnCall[len(fake.listOrgUsersByQueryArgsForCall)]
	fake.listOrgUsersByQueryArgsForCall = append(fake.listOrgUsersByQueryArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("ListOrgUsersByQuery", []interface{}{arg1, arg2})
	fake.listOrgUsersByQueryMutex.Unlock()
	if fake.ListOrgUsersByQueryStub != nil {
		return fake.ListOrgUsersByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgUsersByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgUsersByQueryCallCount() int {
	fake.listOrgUsersByQueryMutex.RLock()
	defer fake.listOrgUsersByQueryMutex.RUnlock()
	return len(fake.listOrgUsersByQueryArgsForCall)
}

func (fake *FakeCFClient) ListOrgUsersByQueryCalls(stub func(string, url.Values) ([]cfclient.User, error)) {
	fake.listOrgUsersByQueryMutex.Lock()
	defer fake.listOrgUsersByQueryMutex.Unlock()
	fake.ListOrgUsersByQueryStub = stub
}

func (fake *FakeCFClient) ListOrgUsersByQueryArgsForCall(i int) (string, url.Values) {
	fake.listOrgUsersByQueryMutex.RLock()
	defer fake.listOrgUsersByQueryMutex.RUnlock()
	argsForCall := fake.listOrgUsersByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListOrgUsersByQueryReturns(result1 []cfclient.User, result2 error) {
	fake.listOrgUsersByQueryMutex.Lock()
	defer fake.listOrgUsersByQueryMutex.Unlock()
	fake.ListOrgUsersByQueryStub = nil
	fake.listOrgUsersByQueryReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgUsersByQueryReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listOrgUsersByQueryMutex.Lock()
	defer fake.listOrgUsersByQueryMutex.Unlock()
	fake.ListOrgUsersByQueryStub = nil
	if fake.listOrgUsersByQueryReturnsOnCall == nil {
		fake.listOrgUsersByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listOrgUsersByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgs() ([]cfclient.Org, error) {
	fake.listOrgsMutex.Lock()
	ret, specificReturn := fake.listOrgsReturnsOnCall[len(fake.listOrgsArgsForCall)]
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListOrgs", []interface{}{})
	fake.listOrgsMutex.Unlock()
	if fake.ListOrgsStub != nil {
		return fake.ListOrgsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeCFClient) ListOrgsCalls(stub func() ([]cfclient.Org, error)) {
	fake.listOrgsMutex.Lock()
	defer fake.listOrgsMutex.Unlock()
	fake.ListOrgsStub = stub
}

func (fake *FakeCFClient) ListOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.listOrgsMutex.Lock()
	defer fake.listOrgsMutex.Unlock()
	fake.ListOrgsStub = nil
	fake.listOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgsReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.listOrgsMutex.Lock()
	defer fake.listOrgsMutex.Unlock()
	fake.ListOrgsStub = nil
	if fake.listOrgsReturnsOnCall == nil {
		fake.listOrgsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listOrgsReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgsByQuery(arg1 url.Values) ([]cfclient.Org, error) {
	fake.listOrgsByQueryMutex.Lock()
	ret, specificReturn := fake.listOrgsByQueryReturnsOnCall[len(fake.listOrgsByQueryArgsForCall)]
	fake.listOrgsByQueryArgsForCall = append(fake.listOrgsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListOrgsByQuery", []interface{}{arg1})
	fake.listOrgsByQueryMutex.Unlock()
	if fake.ListOrgsByQueryStub != nil {
		return fake.ListOrgsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listOrgsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgsByQueryCallCount() int {
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	return len(fake.listOrgsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListOrgsByQueryCalls(stub func(url.Values) ([]cfclient.Org, error)) {
	fake.listOrgsByQueryMutex.Lock()
	defer fake.listOrgsByQueryMutex.Unlock()
	fake.ListOrgsByQueryStub = stub
}

func (fake *FakeCFClient) ListOrgsByQueryArgsForCall(i int) url.Values {
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	argsForCall := fake.listOrgsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgsByQueryReturns(result1 []cfclient.Org, result2 error) {
	fake.listOrgsByQueryMutex.Lock()
	defer fake.listOrgsByQueryMutex.Unlock()
	fake.ListOrgsByQueryStub = nil
	fake.listOrgsByQueryReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgsByQueryReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.listOrgsByQueryMutex.Lock()
	defer fake.listOrgsByQueryMutex.Unlock()
	fake.ListOrgsByQueryStub = nil
	if fake.listOrgsByQueryReturnsOnCall == nil {
		fake.listOrgsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listOrgsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRouteMappings() ([]*cfclient.RouteMapping, error) {
	fake.listRouteMappingsMutex.Lock()
	ret, specificReturn := fake.listRouteMappingsReturnsOnCall[len(fake.listRouteMappingsArgsForCall)]
	fake.listRouteMappingsArgsForCall = append(fake.listRouteMappingsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListRouteMappings", []interface{}{})
	fake.listRouteMappingsMutex.Unlock()
	if fake.ListRouteMappingsStub != nil {
		return fake.ListRouteMappingsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRouteMappingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListRouteMappingsCallCount() int {
	fake.listRouteMappingsMutex.RLock()
	defer fake.listRouteMappingsMutex.RUnlock()
	return len(fake.listRouteMappingsArgsForCall)
}

func (fake *FakeCFClient) ListRouteMappingsCalls(stub func() ([]*cfclient.RouteMapping, error)) {
	fake.listRouteMappingsMutex.Lock()
	defer fake.listRouteMappingsMutex.Unlock()
	fake.ListRouteMappingsStub = stub
}

func (fake *FakeCFClient) ListRouteMappingsReturns(result1 []*cfclient.RouteMapping, result2 error) {
	fake.listRouteMappingsMutex.Lock()
	defer fake.listRouteMappingsMutex.Unlock()
	fake.ListRouteMappingsStub = nil
	fake.listRouteMappingsReturns = struct {
		result1 []*cfclient.RouteMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRouteMappingsReturnsOnCall(i int, result1 []*cfclient.RouteMapping, result2 error) {
	fake.listRouteMappingsMutex.Lock()
	defer fake.listRouteMappingsMutex.Unlock()
	fake.ListRouteMappingsStub = nil
	if fake.listRouteMappingsReturnsOnCall == nil {
		fake.listRouteMappingsReturnsOnCall = make(map[int]struct {
			result1 []*cfclient.RouteMapping
			result2 error
		})
	}
	fake.listRouteMappingsReturnsOnCall[i] = struct {
		result1 []*cfclient.RouteMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRouteMappingsByQuery(arg1 url.Values) ([]*cfclient.RouteMapping, error) {
	fake.listRouteMappingsByQueryMutex.Lock()
	ret, specificReturn := fake.listRouteMappingsByQueryReturnsOnCall[len(fake.listRouteMappingsByQueryArgsForCall)]
	fake.listRouteMappingsByQueryArgsForCall = append(fake.listRouteMappingsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListRouteMappingsByQuery", []interface{}{arg1})
	fake.listRouteMappingsByQueryMutex.Unlock()
	if fake.ListRouteMappingsByQueryStub != nil {
		return fake.ListRouteMappingsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRouteMappingsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListRouteMappingsByQueryCallCount() int {
	fake.listRouteMappingsByQueryMutex.RLock()
	defer fake.listRouteMappingsByQueryMutex.RUnlock()
	return len(fake.listRouteMappingsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListRouteMappingsByQueryCalls(stub func(url.Values) ([]*cfclient.RouteMapping, error)) {
	fake.listRouteMappingsByQueryMutex.Lock()
	defer fake.listRouteMappingsByQueryMutex.Unlock()
	fake.ListRouteMappingsByQueryStub = stub
}

func (fake *FakeCFClient) ListRouteMappingsByQueryArgsForCall(i int) url.Values {
	fake.listRouteMappingsByQueryMutex.RLock()
	defer fake.listRouteMappingsByQueryMutex.RUnlock()
	argsForCall := fake.listRouteMappingsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListRouteMappingsByQueryReturns(result1 []*cfclient.RouteMapping, result2 error) {
	fake.listRouteMappingsByQueryMutex.Lock()
	defer fake.listRouteMappingsByQueryMutex.Unlock()
	fake.ListRouteMappingsByQueryStub = nil
	fake.listRouteMappingsByQueryReturns = struct {
		result1 []*cfclient.RouteMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRouteMappingsByQueryReturnsOnCall(i int, result1 []*cfclient.RouteMapping, result2 error) {
	fake.listRouteMappingsByQueryMutex.Lock()
	defer fake.listRouteMappingsByQueryMutex.Unlock()
	fake.ListRouteMappingsByQueryStub = nil
	if fake.listRouteMappingsByQueryReturnsOnCall == nil {
		fake.listRouteMappingsByQueryReturnsOnCall = make(map[int]struct {
			result1 []*cfclient.RouteMapping
			result2 error
		})
	}
	fake.listRouteMappingsByQueryReturnsOnCall[i] = struct {
		result1 []*cfclient.RouteMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRoutes() ([]cfclient.Route, error) {
	fake.listRoutesMutex.Lock()
	ret, specificReturn := fake.listRoutesReturnsOnCall[len(fake.listRoutesArgsForCall)]
	fake.listRoutesArgsForCall = append(fake.listRoutesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListRoutes", []interface{}{})
	fake.listRoutesMutex.Unlock()
	if fake.ListRoutesStub != nil {
		return fake.ListRoutesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRoutesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListRoutesCallCount() int {
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	return len(fake.listRoutesArgsForCall)
}

func (fake *FakeCFClient) ListRoutesCalls(stub func() ([]cfclient.Route, error)) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = stub
}

func (fake *FakeCFClient) ListRoutesReturns(result1 []cfclient.Route, result2 error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = nil
	fake.listRoutesReturns = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRoutesReturnsOnCall(i int, result1 []cfclient.Route, result2 error) {
	fake.listRoutesMutex.Lock()
	defer fake.listRoutesMutex.Unlock()
	fake.ListRoutesStub = nil
	if fake.listRoutesReturnsOnCall == nil {
		fake.listRoutesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Route
			result2 error
		})
	}
	fake.listRoutesReturnsOnCall[i] = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRoutesByQuery(arg1 url.Values) ([]cfclient.Route, error) {
	fake.listRoutesByQueryMutex.Lock()
	ret, specificReturn := fake.listRoutesByQueryReturnsOnCall[len(fake.listRoutesByQueryArgsForCall)]
	fake.listRoutesByQueryArgsForCall = append(fake.listRoutesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListRoutesByQuery", []interface{}{arg1})
	fake.listRoutesByQueryMutex.Unlock()
	if fake.ListRoutesByQueryStub != nil {
		return fake.ListRoutesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRoutesByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListRoutesByQueryCallCount() int {
	fake.listRoutesByQueryMutex.RLock()
	defer fake.listRoutesByQueryMutex.RUnlock()
	return len(fake.listRoutesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListRoutesByQueryCalls(stub func(url.Values) ([]cfclient.Route, error)) {
	fake.listRoutesByQueryMutex.Lock()
	defer fake.listRoutesByQueryMutex.Unlock()
	fake.ListRoutesByQueryStub = stub
}

func (fake *FakeCFClient) ListRoutesByQueryArgsForCall(i int) url.Values {
	fake.listRoutesByQueryMutex.RLock()
	defer fake.listRoutesByQueryMutex.RUnlock()
	argsForCall := fake.listRoutesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListRoutesByQueryReturns(result1 []cfclient.Route, result2 error) {
	fake.listRoutesByQueryMutex.Lock()
	defer fake.listRoutesByQueryMutex.Unlock()
	fake.ListRoutesByQueryStub = nil
	fake.listRoutesByQueryReturns = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRoutesByQueryReturnsOnCall(i int, result1 []cfclient.Route, result2 error) {
	fake.listRoutesByQueryMutex.Lock()
	defer fake.listRoutesByQueryMutex.Unlock()
	fake.ListRoutesByQueryStub = nil
	if fake.listRoutesByQueryReturnsOnCall == nil {
		fake.listRoutesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Route
			result2 error
		})
	}
	fake.listRoutesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Route
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRunningSecGroups() ([]cfclient.SecGroup, error) {
	fake.listRunningSecGroupsMutex.Lock()
	ret, specificReturn := fake.listRunningSecGroupsReturnsOnCall[len(fake.listRunningSecGroupsArgsForCall)]
	fake.listRunningSecGroupsArgsForCall = append(fake.listRunningSecGroupsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListRunningSecGroups", []interface{}{})
	fake.listRunningSecGroupsMutex.Unlock()
	if fake.ListRunningSecGroupsStub != nil {
		return fake.ListRunningSecGroupsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listRunningSecGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListRunningSecGroupsCallCount() int {
	fake.listRunningSecGroupsMutex.RLock()
	defer fake.listRunningSecGroupsMutex.RUnlock()
	return len(fake.listRunningSecGroupsArgsForCall)
}

func (fake *FakeCFClient) ListRunningSecGroupsCalls(stub func() ([]cfclient.SecGroup, error)) {
	fake.listRunningSecGroupsMutex.Lock()
	defer fake.listRunningSecGroupsMutex.Unlock()
	fake.ListRunningSecGroupsStub = stub
}

func (fake *FakeCFClient) ListRunningSecGroupsReturns(result1 []cfclient.SecGroup, result2 error) {
	fake.listRunningSecGroupsMutex.Lock()
	defer fake.listRunningSecGroupsMutex.Unlock()
	fake.ListRunningSecGroupsStub = nil
	fake.listRunningSecGroupsReturns = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListRunningSecGroupsReturnsOnCall(i int, result1 []cfclient.SecGroup, result2 error) {
	fake.listRunningSecGroupsMutex.Lock()
	defer fake.listRunningSecGroupsMutex.Unlock()
	fake.ListRunningSecGroupsStub = nil
	if fake.listRunningSecGroupsReturnsOnCall == nil {
		fake.listRunningSecGroupsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SecGroup
			result2 error
		})
	}
	fake.listRunningSecGroupsReturnsOnCall[i] = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSecGroups() ([]cfclient.SecGroup, error) {
	fake.listSecGroupsMutex.Lock()
	ret, specificReturn := fake.listSecGroupsReturnsOnCall[len(fake.listSecGroupsArgsForCall)]
	fake.listSecGroupsArgsForCall = append(fake.listSecGroupsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListSecGroups", []interface{}{})
	fake.listSecGroupsMutex.Unlock()
	if fake.ListSecGroupsStub != nil {
		return fake.ListSecGroupsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSecGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSecGroupsCallCount() int {
	fake.listSecGroupsMutex.RLock()
	defer fake.listSecGroupsMutex.RUnlock()
	return len(fake.listSecGroupsArgsForCall)
}

func (fake *FakeCFClient) ListSecGroupsCalls(stub func() ([]cfclient.SecGroup, error)) {
	fake.listSecGroupsMutex.Lock()
	defer fake.listSecGroupsMutex.Unlock()
	fake.ListSecGroupsStub = stub
}

func (fake *FakeCFClient) ListSecGroupsReturns(result1 []cfclient.SecGroup, result2 error) {
	fake.listSecGroupsMutex.Lock()
	defer fake.listSecGroupsMutex.Unlock()
	fake.ListSecGroupsStub = nil
	fake.listSecGroupsReturns = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSecGroupsReturnsOnCall(i int, result1 []cfclient.SecGroup, result2 error) {
	fake.listSecGroupsMutex.Lock()
	defer fake.listSecGroupsMutex.Unlock()
	fake.ListSecGroupsStub = nil
	if fake.listSecGroupsReturnsOnCall == nil {
		fake.listSecGroupsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SecGroup
			result2 error
		})
	}
	fake.listSecGroupsReturnsOnCall[i] = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceBindings() ([]cfclient.ServiceBinding, error) {
	fake.listServiceBindingsMutex.Lock()
	ret, specificReturn := fake.listServiceBindingsReturnsOnCall[len(fake.listServiceBindingsArgsForCall)]
	fake.listServiceBindingsArgsForCall = append(fake.listServiceBindingsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServiceBindings", []interface{}{})
	fake.listServiceBindingsMutex.Unlock()
	if fake.ListServiceBindingsStub != nil {
		return fake.ListServiceBindingsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceBindingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceBindingsCallCount() int {
	fake.listServiceBindingsMutex.RLock()
	defer fake.listServiceBindingsMutex.RUnlock()
	return len(fake.listServiceBindingsArgsForCall)
}

func (fake *FakeCFClient) ListServiceBindingsCalls(stub func() ([]cfclient.ServiceBinding, error)) {
	fake.listServiceBindingsMutex.Lock()
	defer fake.listServiceBindingsMutex.Unlock()
	fake.ListServiceBindingsStub = stub
}

func (fake *FakeCFClient) ListServiceBindingsReturns(result1 []cfclient.ServiceBinding, result2 error) {
	fake.listServiceBindingsMutex.Lock()
	defer fake.listServiceBindingsMutex.Unlock()
	fake.ListServiceBindingsStub = nil
	fake.listServiceBindingsReturns = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceBindingsReturnsOnCall(i int, result1 []cfclient.ServiceBinding, result2 error) {
	fake.listServiceBindingsMutex.Lock()
	defer fake.listServiceBindingsMutex.Unlock()
	fake.ListServiceBindingsStub = nil
	if fake.listServiceBindingsReturnsOnCall == nil {
		fake.listServiceBindingsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBinding
			result2 error
		})
	}
	fake.listServiceBindingsReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceBindingsByQuery(arg1 url.Values) ([]cfclient.ServiceBinding, error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceBindingsByQueryReturnsOnCall[len(fake.listServiceBindingsByQueryArgsForCall)]
	fake.listServiceBindingsByQueryArgsForCall = append(fake.listServiceBindingsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServiceBindingsByQuery", []interface{}{arg1})
	fake.listServiceBindingsByQueryMutex.Unlock()
	if fake.ListServiceBindingsByQueryStub != nil {
		return fake.ListServiceBindingsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceBindingsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceBindingsByQueryCallCount() int {
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	return len(fake.listServiceBindingsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServiceBindingsByQueryCalls(stub func(url.Values) ([]cfclient.ServiceBinding, error)) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = stub
}

func (fake *FakeCFClient) ListServiceBindingsByQueryArgsForCall(i int) url.Values {
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	argsForCall := fake.listServiceBindingsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServiceBindingsByQueryReturns(result1 []cfclient.ServiceBinding, result2 error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = nil
	fake.listServiceBindingsByQueryReturns = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceBindingsByQueryReturnsOnCall(i int, result1 []cfclient.ServiceBinding, result2 error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = nil
	if fake.listServiceBindingsByQueryReturnsOnCall == nil {
		fake.listServiceBindingsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBinding
			result2 error
		})
	}
	fake.listServiceBindingsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceBrokers() ([]cfclient.ServiceBroker, error) {
	fake.listServiceBrokersMutex.Lock()
	ret, specificReturn := fake.listServiceBrokersReturnsOnCall[len(fake.listServiceBrokersArgsForCall)]
	fake.listServiceBrokersArgsForCall = append(fake.listServiceBrokersArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServiceBrokers", []interface{}{})
	fake.listServiceBrokersMutex.Unlock()
	if fake.ListServiceBrokersStub != nil {
		return fake.ListServiceBrokersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceBrokersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceBrokersCallCount() int {
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	return len(fake.listServiceBrokersArgsForCall)
}

func (fake *FakeCFClient) ListServiceBrokersCalls(stub func() ([]cfclient.ServiceBroker, error)) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = stub
}

func (fake *FakeCFClient) ListServiceBrokersReturns(result1 []cfclient.ServiceBroker, result2 error) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = nil
	fake.listServiceBrokersReturns = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceBrokersReturnsOnCall(i int, result1 []cfclient.ServiceBroker, result2 error) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = nil
	if fake.listServiceBrokersReturnsOnCall == nil {
		fake.listServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBroker
			result2 error
		})
	}
	fake.listServiceBrokersReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceBrokersByQuery(arg1 url.Values) ([]cfclient.ServiceBroker, error) {
	fake.listServiceBrokersByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceBrokersByQueryReturnsOnCall[len(fake.listServiceBrokersByQueryArgsForCall)]
	fake.listServiceBrokersByQueryArgsForCall = append(fake.listServiceBrokersByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServiceBrokersByQuery", []interface{}{arg1})
	fake.listServiceBrokersByQueryMutex.Unlock()
	if fake.ListServiceBrokersByQueryStub != nil {
		return fake.ListServiceBrokersByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceBrokersByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceBrokersByQueryCallCount() int {
	fake.listServiceBrokersByQueryMutex.RLock()
	defer fake.listServiceBrokersByQueryMutex.RUnlock()
	return len(fake.listServiceBrokersByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServiceBrokersByQueryCalls(stub func(url.Values) ([]cfclient.ServiceBroker, error)) {
	fake.listServiceBrokersByQueryMutex.Lock()
	defer fake.listServiceBrokersByQueryMutex.Unlock()
	fake.ListServiceBrokersByQueryStub = stub
}

func (fake *FakeCFClient) ListServiceBrokersByQueryArgsForCall(i int) url.Values {
	fake.listServiceBrokersByQueryMutex.RLock()
	defer fake.listServiceBrokersByQueryMutex.RUnlock()
	argsForCall := fake.listServiceBrokersByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServiceBrokersByQueryReturns(result1 []cfclient.ServiceBroker, result2 error) {
	fake.listServiceBrokersByQueryMutex.Lock()
	defer fake.listServiceBrokersByQueryMutex.Unlock()
	fake.ListServiceBrokersByQueryStub = nil
	fake.listServiceBrokersByQueryReturns = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceBrokersByQueryReturnsOnCall(i int, result1 []cfclient.ServiceBroker, result2 error) {
	fake.listServiceBrokersByQueryMutex.Lock()
	defer fake.listServiceBrokersByQueryMutex.Unlock()
	fake.ListServiceBrokersByQueryStub = nil
	if fake.listServiceBrokersByQueryReturnsOnCall == nil {
		fake.listServiceBrokersByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBroker
			result2 error
		})
	}
	fake.listServiceBrokersByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceInstances() ([]cfclient.ServiceInstance, error) {
	fake.listServiceInstancesMutex.Lock()
	ret, specificReturn := fake.listServiceInstancesReturnsOnCall[len(fake.listServiceInstancesArgsForCall)]
	fake.listServiceInstancesArgsForCall = append(fake.listServiceInstancesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServiceInstances", []interface{}{})
	fake.listServiceInstancesMutex.Unlock()
	if fake.ListServiceInstancesStub != nil {
		return fake.ListServiceInstancesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceInstancesCallCount() int {
	fake.listServiceInstancesMutex.RLock()
	defer fake.listServiceInstancesMutex.RUnlock()
	return len(fake.listServiceInstancesArgsForCall)
}

func (fake *FakeCFClient) ListServiceInstancesCalls(stub func() ([]cfclient.ServiceInstance, error)) {
	fake.listServiceInstancesMutex.Lock()
	defer fake.listServiceInstancesMutex.Unlock()
	fake.ListServiceInstancesStub = stub
}

func (fake *FakeCFClient) ListServiceInstancesReturns(result1 []cfclient.ServiceInstance, result2 error) {
	fake.listServiceInstancesMutex.Lock()
	defer fake.listServiceInstancesMutex.Unlock()
	fake.ListServiceInstancesStub = nil
	fake.listServiceInstancesReturns = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceInstancesReturnsOnCall(i int, result1 []cfclient.ServiceInstance, result2 error) {
	fake.listServiceInstancesMutex.Lock()
	defer fake.listServiceInstancesMutex.Unlock()
	fake.ListServiceInstancesStub = nil
	if fake.listServiceInstancesReturnsOnCall == nil {
		fake.listServiceInstancesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceInstance
			result2 error
		})
	}
	fake.listServiceInstancesReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceInstancesByQuery(arg1 url.Values) ([]cfclient.ServiceInstance, error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceInstancesByQueryReturnsOnCall[len(fake.listServiceInstancesByQueryArgsForCall)]
	fake.listServiceInstancesByQueryArgsForCall = append(fake.listServiceInstancesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServiceInstancesByQuery", []interface{}{arg1})
	fake.listServiceInstancesByQueryMutex.Unlock()
	if fake.ListServiceInstancesByQueryStub != nil {
		return fake.ListServiceInstancesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceInstancesByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceInstancesByQueryCallCount() int {
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	return len(fake.listServiceInstancesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServiceInstancesByQueryCalls(stub func(url.Values) ([]cfclient.ServiceInstance, error)) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = stub
}

func (fake *FakeCFClient) ListServiceInstancesByQueryArgsForCall(i int) url.Values {
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	argsForCall := fake.listServiceInstancesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServiceInstancesByQueryReturns(result1 []cfclient.ServiceInstance, result2 error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = nil
	fake.listServiceInstancesByQueryReturns = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceInstancesByQueryReturnsOnCall(i int, result1 []cfclient.ServiceInstance, result2 error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = nil
	if fake.listServiceInstancesByQueryReturnsOnCall == nil {
		fake.listServiceInstancesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceInstance
			result2 error
		})
	}
	fake.listServiceInstancesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceKeys() ([]cfclient.ServiceKey, error) {
	fake.listServiceKeysMutex.Lock()
	ret, specificReturn := fake.listServiceKeysReturnsOnCall[len(fake.listServiceKeysArgsForCall)]
	fake.listServiceKeysArgsForCall = append(fake.listServiceKeysArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServiceKeys", []interface{}{})
	fake.listServiceKeysMutex.Unlock()
	if fake.ListServiceKeysStub != nil {
		return fake.ListServiceKeysStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceKeysReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceKeysCallCount() int {
	fake.listServiceKeysMutex.RLock()
	defer fake.listServiceKeysMutex.RUnlock()
	return len(fake.listServiceKeysArgsForCall)
}

func (fake *FakeCFClient) ListServiceKeysCalls(stub func() ([]cfclient.ServiceKey, error)) {
	fake.listServiceKeysMutex.Lock()
	defer fake.listServiceKeysMutex.Unlock()
	fake.ListServiceKeysStub = stub
}

func (fake *FakeCFClient) ListServiceKeysReturns(result1 []cfclient.ServiceKey, result2 error) {
	fake.listServiceKeysMutex.Lock()
	defer fake.listServiceKeysMutex.Unlock()
	fake.ListServiceKeysStub = nil
	fake.listServiceKeysReturns = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceKeysReturnsOnCall(i int, result1 []cfclient.ServiceKey, result2 error) {
	fake.listServiceKeysMutex.Lock()
	defer fake.listServiceKeysMutex.Unlock()
	fake.ListServiceKeysStub = nil
	if fake.listServiceKeysReturnsOnCall == nil {
		fake.listServiceKeysReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceKey
			result2 error
		})
	}
	fake.listServiceKeysReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceKeysByQuery(arg1 url.Values) ([]cfclient.ServiceKey, error) {
	fake.listServiceKeysByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceKeysByQueryReturnsOnCall[len(fake.listServiceKeysByQueryArgsForCall)]
	fake.listServiceKeysByQueryArgsForCall = append(fake.listServiceKeysByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServiceKeysByQuery", []interface{}{arg1})
	fake.listServiceKeysByQueryMutex.Unlock()
	if fake.ListServiceKeysByQueryStub != nil {
		return fake.ListServiceKeysByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceKeysByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceKeysByQueryCallCount() int {
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	return len(fake.listServiceKeysByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServiceKeysByQueryCalls(stub func(url.Values) ([]cfclient.ServiceKey, error)) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = stub
}

func (fake *FakeCFClient) ListServiceKeysByQueryArgsForCall(i int) url.Values {
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	argsForCall := fake.listServiceKeysByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServiceKeysByQueryReturns(result1 []cfclient.ServiceKey, result2 error) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = nil
	fake.listServiceKeysByQueryReturns = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceKeysByQueryReturnsOnCall(i int, result1 []cfclient.ServiceKey, result2 error) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = nil
	if fake.listServiceKeysByQueryReturnsOnCall == nil {
		fake.listServiceKeysByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceKey
			result2 error
		})
	}
	fake.listServiceKeysByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlanVisibilities() ([]cfclient.ServicePlanVisibility, error) {
	fake.listServicePlanVisibilitiesMutex.Lock()
	ret, specificReturn := fake.listServicePlanVisibilitiesReturnsOnCall[len(fake.listServicePlanVisibilitiesArgsForCall)]
	fake.listServicePlanVisibilitiesArgsForCall = append(fake.listServicePlanVisibilitiesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServicePlanVisibilities", []interface{}{})
	fake.listServicePlanVisibilitiesMutex.Unlock()
	if fake.ListServicePlanVisibilitiesStub != nil {
		return fake.ListServicePlanVisibilitiesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicePlanVisibilitiesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesCallCount() int {
	fake.listServicePlanVisibilitiesMutex.RLock()
	defer fake.listServicePlanVisibilitiesMutex.RUnlock()
	return len(fake.listServicePlanVisibilitiesArgsForCall)
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesCalls(stub func() ([]cfclient.ServicePlanVisibility, error)) {
	fake.listServicePlanVisibilitiesMutex.Lock()
	defer fake.listServicePlanVisibilitiesMutex.Unlock()
	fake.ListServicePlanVisibilitiesStub = stub
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesReturns(result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.listServicePlanVisibilitiesMutex.Lock()
	defer fake.listServicePlanVisibilitiesMutex.Unlock()
	fake.ListServicePlanVisibilitiesStub = nil
	fake.listServicePlanVisibilitiesReturns = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesReturnsOnCall(i int, result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.listServicePlanVisibilitiesMutex.Lock()
	defer fake.listServicePlanVisibilitiesMutex.Unlock()
	fake.ListServicePlanVisibilitiesStub = nil
	if fake.listServicePlanVisibilitiesReturnsOnCall == nil {
		fake.listServicePlanVisibilitiesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.listServicePlanVisibilitiesReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQuery(arg1 url.Values) ([]cfclient.ServicePlanVisibility, error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	ret, specificReturn := fake.listServicePlanVisibilitiesByQueryReturnsOnCall[len(fake.listServicePlanVisibilitiesByQueryArgsForCall)]
	fake.listServicePlanVisibilitiesByQueryArgsForCall = append(fake.listServicePlanVisibilitiesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServicePlanVisibilitiesByQuery", []interface{}{arg1})
	fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	if fake.ListServicePlanVisibilitiesByQueryStub != nil {
		return fake.ListServicePlanVisibilitiesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicePlanVisibilitiesByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryCallCount() int {
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	return len(fake.listServicePlanVisibilitiesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryCalls(stub func(url.Values) ([]cfclient.ServicePlanVisibility, error)) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = stub
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryArgsForCall(i int) url.Values {
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	argsForCall := fake.listServicePlanVisibilitiesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryReturns(result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = nil
	fake.listServicePlanVisibilitiesByQueryReturns = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryReturnsOnCall(i int, result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = nil
	if fake.listServicePlanVisibilitiesByQueryReturnsOnCall == nil {
		fake.listServicePlanVisibilitiesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.listServicePlanVisibilitiesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlans() ([]cfclient.ServicePlan, error) {
	fake.listServicePlansMutex.Lock()
	ret, specificReturn := fake.listServicePlansReturnsOnCall[len(fake.listServicePlansArgsForCall)]
	fake.listServicePlansArgsForCall = append(fake.listServicePlansArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServicePlans", []interface{}{})
	fake.listServicePlansMutex.Unlock()
	if fake.ListServicePlansStub != nil {
		return fake.ListServicePlansStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicePlansReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicePlansCallCount() int {
	fake.listServicePlansMutex.RLock()
	defer fake.listServicePlansMutex.RUnlock()
	return len(fake.listServicePlansArgsForCall)
}

func (fake *FakeCFClient) ListServicePlansCalls(stub func() ([]cfclient.ServicePlan, error)) {
	fake.listServicePlansMutex.Lock()
	defer fake.listServicePlansMutex.Unlock()
	fake.ListServicePlansStub = stub
}

func (fake *FakeCFClient) ListServicePlansReturns(result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansMutex.Lock()
	defer fake.listServicePlansMutex.Unlock()
	fake.ListServicePlansStub = nil
	fake.listServicePlansReturns = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlansReturnsOnCall(i int, result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansMutex.Lock()
	defer fake.listServicePlansMutex.Unlock()
	fake.ListServicePlansStub = nil
	if fake.listServicePlansReturnsOnCall == nil {
		fake.listServicePlansReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlansByQuery(arg1 url.Values) ([]cfclient.ServicePlan, error) {
	fake.listServicePlansByQueryMutex.Lock()
	ret, specificReturn := fake.listServicePlansByQueryReturnsOnCall[len(fake.listServicePlansByQueryArgsForCall)]
	fake.listServicePlansByQueryArgsForCall = append(fake.listServicePlansByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServicePlansByQuery", []interface{}{arg1})
	fake.listServicePlansByQueryMutex.Unlock()
	if fake.ListServicePlansByQueryStub != nil {
		return fake.ListServicePlansByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicePlansByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicePlansByQueryCallCount() int {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	return len(fake.listServicePlansByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServicePlansByQueryCalls(stub func(url.Values) ([]cfclient.ServicePlan, error)) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = stub
}

func (fake *FakeCFClient) ListServicePlansByQueryArgsForCall(i int) url.Values {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	argsForCall := fake.listServicePlansByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServicePlansByQueryReturns(result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	fake.listServicePlansByQueryReturns = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlansByQueryReturnsOnCall(i int, result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	if fake.listServicePlansByQueryReturnsOnCall == nil {
		fake.listServicePlansByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceUsageEvents() ([]cfclient.ServiceUsageEvent, error) {
	fake.listServiceUsageEventsMutex.Lock()
	ret, specificReturn := fake.listServiceUsageEventsReturnsOnCall[len(fake.listServiceUsageEventsArgsForCall)]
	fake.listServiceUsageEventsArgsForCall = append(fake.listServiceUsageEventsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServiceUsageEvents", []interface{}{})
	fake.listServiceUsageEventsMutex.Unlock()
	if fake.ListServiceUsageEventsStub != nil {
		return fake.ListServiceUsageEventsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceUsageEventsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceUsageEventsCallCount() int {
	fake.listServiceUsageEventsMutex.RLock()
	defer fake.listServiceUsageEventsMutex.RUnlock()
	return len(fake.listServiceUsageEventsArgsForCall)
}

func (fake *FakeCFClient) ListServiceUsageEventsCalls(stub func() ([]cfclient.ServiceUsageEvent, error)) {
	fake.listServiceUsageEventsMutex.Lock()
	defer fake.listServiceUsageEventsMutex.Unlock()
	fake.ListServiceUsageEventsStub = stub
}

func (fake *FakeCFClient) ListServiceUsageEventsReturns(result1 []cfclient.ServiceUsageEvent, result2 error) {
	fake.listServiceUsageEventsMutex.Lock()
	defer fake.listServiceUsageEventsMutex.Unlock()
	fake.ListServiceUsageEventsStub = nil
	fake.listServiceUsageEventsReturns = struct {
		result1 []cfclient.ServiceUsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceUsageEventsReturnsOnCall(i int, result1 []cfclient.ServiceUsageEvent, result2 error) {
	fake.listServiceUsageEventsMutex.Lock()
	defer fake.listServiceUsageEventsMutex.Unlock()
	fake.ListServiceUsageEventsStub = nil
	if fake.listServiceUsageEventsReturnsOnCall == nil {
		fake.listServiceUsageEventsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceUsageEvent
			result2 error
		})
	}
	fake.listServiceUsageEventsReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceUsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceUsageEventsByQuery(arg1 url.Values) ([]cfclient.ServiceUsageEvent, error) {
	fake.listServiceUsageEventsByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceUsageEventsByQueryReturnsOnCall[len(fake.listServiceUsageEventsByQueryArgsForCall)]
	fake.listServiceUsageEventsByQueryArgsForCall = append(fake.listServiceUsageEventsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServiceUsageEventsByQuery", []interface{}{arg1})
	fake.listServiceUsageEventsByQueryMutex.Unlock()
	if fake.ListServiceUsageEventsByQueryStub != nil {
		return fake.ListServiceUsageEventsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServiceUsageEventsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServiceUsageEventsByQueryCallCount() int {
	fake.listServiceUsageEventsByQueryMutex.RLock()
	defer fake.listServiceUsageEventsByQueryMutex.RUnlock()
	return len(fake.listServiceUsageEventsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServiceUsageEventsByQueryCalls(stub func(url.Values) ([]cfclient.ServiceUsageEvent, error)) {
	fake.listServiceUsageEventsByQueryMutex.Lock()
	defer fake.listServiceUsageEventsByQueryMutex.Unlock()
	fake.ListServiceUsageEventsByQueryStub = stub
}

func (fake *FakeCFClient) ListServiceUsageEventsByQueryArgsForCall(i int) url.Values {
	fake.listServiceUsageEventsByQueryMutex.RLock()
	defer fake.listServiceUsageEventsByQueryMutex.RUnlock()
	argsForCall := fake.listServiceUsageEventsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServiceUsageEventsByQueryReturns(result1 []cfclient.ServiceUsageEvent, result2 error) {
	fake.listServiceUsageEventsByQueryMutex.Lock()
	defer fake.listServiceUsageEventsByQueryMutex.Unlock()
	fake.ListServiceUsageEventsByQueryStub = nil
	fake.listServiceUsageEventsByQueryReturns = struct {
		result1 []cfclient.ServiceUsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServiceUsageEventsByQueryReturnsOnCall(i int, result1 []cfclient.ServiceUsageEvent, result2 error) {
	fake.listServiceUsageEventsByQueryMutex.Lock()
	defer fake.listServiceUsageEventsByQueryMutex.Unlock()
	fake.ListServiceUsageEventsByQueryStub = nil
	if fake.listServiceUsageEventsByQueryReturnsOnCall == nil {
		fake.listServiceUsageEventsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceUsageEvent
			result2 error
		})
	}
	fake.listServiceUsageEventsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceUsageEvent
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServices() ([]cfclient.Service, error) {
	fake.listServicesMutex.Lock()
	ret, specificReturn := fake.listServicesReturnsOnCall[len(fake.listServicesArgsForCall)]
	fake.listServicesArgsForCall = append(fake.listServicesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListServices", []interface{}{})
	fake.listServicesMutex.Unlock()
	if fake.ListServicesStub != nil {
		return fake.ListServicesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicesCallCount() int {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	return len(fake.listServicesArgsForCall)
}

func (fake *FakeCFClient) ListServicesCalls(stub func() ([]cfclient.Service, error)) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = stub
}

func (fake *FakeCFClient) ListServicesReturns(result1 []cfclient.Service, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	fake.listServicesReturns = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicesReturnsOnCall(i int, result1 []cfclient.Service, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	if fake.listServicesReturnsOnCall == nil {
		fake.listServicesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Service
			result2 error
		})
	}
	fake.listServicesReturnsOnCall[i] = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicesByQuery(arg1 url.Values) ([]cfclient.Service, error) {
	fake.listServicesByQueryMutex.Lock()
	ret, specificReturn := fake.listServicesByQueryReturnsOnCall[len(fake.listServicesByQueryArgsForCall)]
	fake.listServicesByQueryArgsForCall = append(fake.listServicesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListServicesByQuery", []interface{}{arg1})
	fake.listServicesByQueryMutex.Unlock()
	if fake.ListServicesByQueryStub != nil {
		return fake.ListServicesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicesByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicesByQueryCallCount() int {
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	return len(fake.listServicesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServicesByQueryCalls(stub func(url.Values) ([]cfclient.Service, error)) {
	fake.listServicesByQueryMutex.Lock()
	defer fake.listServicesByQueryMutex.Unlock()
	fake.ListServicesByQueryStub = stub
}

func (fake *FakeCFClient) ListServicesByQueryArgsForCall(i int) url.Values {
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	argsForCall := fake.listServicesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServicesByQueryReturns(result1 []cfclient.Service, result2 error) {
	fake.listServicesByQueryMutex.Lock()
	defer fake.listServicesByQueryMutex.Unlock()
	fake.ListServicesByQueryStub = nil
	fake.listServicesByQueryReturns = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicesByQueryReturnsOnCall(i int, result1 []cfclient.Service, result2 error) {
	fake.listServicesByQueryMutex.Lock()
	defer fake.listServicesByQueryMutex.Unlock()
	fake.ListServicesByQueryStub = nil
	if fake.listServicesByQueryReturnsOnCall == nil {
		fake.listServicesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Service
			result2 error
		})
	}
	fake.listServicesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSharedDomains() ([]cfclient.SharedDomain, error) {
	fake.listSharedDomainsMutex.Lock()
	ret, specificReturn := fake.listSharedDomainsReturnsOnCall[len(fake.listSharedDomainsArgsForCall)]
	fake.listSharedDomainsArgsForCall = append(fake.listSharedDomainsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListSharedDomains", []interface{}{})
	fake.listSharedDomainsMutex.Unlock()
	if fake.ListSharedDomainsStub != nil {
		return fake.ListSharedDomainsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSharedDomainsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSharedDomainsCallCount() int {
	fake.listSharedDomainsMutex.RLock()
	defer fake.listSharedDomainsMutex.RUnlock()
	return len(fake.listSharedDomainsArgsForCall)
}

func (fake *FakeCFClient) ListSharedDomainsCalls(stub func() ([]cfclient.SharedDomain, error)) {
	fake.listSharedDomainsMutex.Lock()
	defer fake.listSharedDomainsMutex.Unlock()
	fake.ListSharedDomainsStub = stub
}

func (fake *FakeCFClient) ListSharedDomainsReturns(result1 []cfclient.SharedDomain, result2 error) {
	fake.listSharedDomainsMutex.Lock()
	defer fake.listSharedDomainsMutex.Unlock()
	fake.ListSharedDomainsStub = nil
	fake.listSharedDomainsReturns = struct {
		result1 []cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSharedDomainsReturnsOnCall(i int, result1 []cfclient.SharedDomain, result2 error) {
	fake.listSharedDomainsMutex.Lock()
	defer fake.listSharedDomainsMutex.Unlock()
	fake.ListSharedDomainsStub = nil
	if fake.listSharedDomainsReturnsOnCall == nil {
		fake.listSharedDomainsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SharedDomain
			result2 error
		})
	}
	fake.listSharedDomainsReturnsOnCall[i] = struct {
		result1 []cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSharedDomainsByQuery(arg1 url.Values) ([]cfclient.SharedDomain, error) {
	fake.listSharedDomainsByQueryMutex.Lock()
	ret, specificReturn := fake.listSharedDomainsByQueryReturnsOnCall[len(fake.listSharedDomainsByQueryArgsForCall)]
	fake.listSharedDomainsByQueryArgsForCall = append(fake.listSharedDomainsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListSharedDomainsByQuery", []interface{}{arg1})
	fake.listSharedDomainsByQueryMutex.Unlock()
	if fake.ListSharedDomainsByQueryStub != nil {
		return fake.ListSharedDomainsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSharedDomainsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSharedDomainsByQueryCallCount() int {
	fake.listSharedDomainsByQueryMutex.RLock()
	defer fake.listSharedDomainsByQueryMutex.RUnlock()
	return len(fake.listSharedDomainsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSharedDomainsByQueryCalls(stub func(url.Values) ([]cfclient.SharedDomain, error)) {
	fake.listSharedDomainsByQueryMutex.Lock()
	defer fake.listSharedDomainsByQueryMutex.Unlock()
	fake.ListSharedDomainsByQueryStub = stub
}

func (fake *FakeCFClient) ListSharedDomainsByQueryArgsForCall(i int) url.Values {
	fake.listSharedDomainsByQueryMutex.RLock()
	defer fake.listSharedDomainsByQueryMutex.RUnlock()
	argsForCall := fake.listSharedDomainsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListSharedDomainsByQueryReturns(result1 []cfclient.SharedDomain, result2 error) {
	fake.listSharedDomainsByQueryMutex.Lock()
	defer fake.listSharedDomainsByQueryMutex.Unlock()
	fake.ListSharedDomainsByQueryStub = nil
	fake.listSharedDomainsByQueryReturns = struct {
		result1 []cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSharedDomainsByQueryReturnsOnCall(i int, result1 []cfclient.SharedDomain, result2 error) {
	fake.listSharedDomainsByQueryMutex.Lock()
	defer fake.listSharedDomainsByQueryMutex.Unlock()
	fake.ListSharedDomainsByQueryStub = nil
	if fake.listSharedDomainsByQueryReturnsOnCall == nil {
		fake.listSharedDomainsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SharedDomain
			result2 error
		})
	}
	fake.listSharedDomainsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceAuditors(arg1 string) ([]cfclient.User, error) {
	fake.listSpaceAuditorsMutex.Lock()
	ret, specificReturn := fake.listSpaceAuditorsReturnsOnCall[len(fake.listSpaceAuditorsArgsForCall)]
	fake.listSpaceAuditorsArgsForCall = append(fake.listSpaceAuditorsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListSpaceAuditors", []interface{}{arg1})
	fake.listSpaceAuditorsMutex.Unlock()
	if fake.ListSpaceAuditorsStub != nil {
		return fake.ListSpaceAuditorsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceAuditorsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceAuditorsCallCount() int {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	return len(fake.listSpaceAuditorsArgsForCall)
}

func (fake *FakeCFClient) ListSpaceAuditorsCalls(stub func(string) ([]cfclient.User, error)) {
	fake.listSpaceAuditorsMutex.Lock()
	defer fake.listSpaceAuditorsMutex.Unlock()
	fake.ListSpaceAuditorsStub = stub
}

func (fake *FakeCFClient) ListSpaceAuditorsArgsForCall(i int) string {
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	argsForCall := fake.listSpaceAuditorsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListSpaceAuditorsReturns(result1 []cfclient.User, result2 error) {
	fake.listSpaceAuditorsMutex.Lock()
	defer fake.listSpaceAuditorsMutex.Unlock()
	fake.ListSpaceAuditorsStub = nil
	fake.listSpaceAuditorsReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceAuditorsReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listSpaceAuditorsMutex.Lock()
	defer fake.listSpaceAuditorsMutex.Unlock()
	fake.ListSpaceAuditorsStub = nil
	if fake.listSpaceAuditorsReturnsOnCall == nil {
		fake.listSpaceAuditorsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listSpaceAuditorsReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceAuditorsByQuery(arg1 string, arg2 url.Values) ([]cfclient.User, error) {
	fake.listSpaceAuditorsByQueryMutex.Lock()
	ret, specificReturn := fake.listSpaceAuditorsByQueryReturnsOnCall[len(fake.listSpaceAuditorsByQueryArgsForCall)]
	fake.listSpaceAuditorsByQueryArgsForCall = append(fake.listSpaceAuditorsByQueryArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("ListSpaceAuditorsByQuery", []interface{}{arg1, arg2})
	fake.listSpaceAuditorsByQueryMutex.Unlock()
	if fake.ListSpaceAuditorsByQueryStub != nil {
		return fake.ListSpaceAuditorsByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceAuditorsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceAuditorsByQueryCallCount() int {
	fake.listSpaceAuditorsByQueryMutex.RLock()
	defer fake.listSpaceAuditorsByQueryMutex.RUnlock()
	return len(fake.listSpaceAuditorsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpaceAuditorsByQueryCalls(stub func(string, url.Values) ([]cfclient.User, error)) {
	fake.listSpaceAuditorsByQueryMutex.Lock()
	defer fake.listSpaceAuditorsByQueryMutex.Unlock()
	fake.ListSpaceAuditorsByQueryStub = stub
}

func (fake *FakeCFClient) ListSpaceAuditorsByQueryArgsForCall(i int) (string, url.Values) {
	fake.listSpaceAuditorsByQueryMutex.RLock()
	defer fake.listSpaceAuditorsByQueryMutex.RUnlock()
	argsForCall := fake.listSpaceAuditorsByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListSpaceAuditorsByQueryReturns(result1 []cfclient.User, result2 error) {
	fake.listSpaceAuditorsByQueryMutex.Lock()
	defer fake.listSpaceAuditorsByQueryMutex.Unlock()
	fake.ListSpaceAuditorsByQueryStub = nil
	fake.listSpaceAuditorsByQueryReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceAuditorsByQueryReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listSpaceAuditorsByQueryMutex.Lock()
	defer fake.listSpaceAuditorsByQueryMutex.Unlock()
	fake.ListSpaceAuditorsByQueryStub = nil
	if fake.listSpaceAuditorsByQueryReturnsOnCall == nil {
		fake.listSpaceAuditorsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listSpaceAuditorsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceDevelopers(arg1 string) ([]cfclient.User, error) {
	fake.listSpaceDevelopersMutex.Lock()
	ret, specificReturn := fake.listSpaceDevelopersReturnsOnCall[len(fake.listSpaceDevelopersArgsForCall)]
	fake.listSpaceDevelopersArgsForCall = append(fake.listSpaceDevelopersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListSpaceDevelopers", []interface{}{arg1})
	fake.listSpaceDevelopersMutex.Unlock()
	if fake.ListSpaceDevelopersStub != nil {
		return fake.ListSpaceDevelopersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceDevelopersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceDevelopersCallCount() int {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	return len(fake.listSpaceDevelopersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceDevelopersCalls(stub func(string) ([]cfclient.User, error)) {
	fake.listSpaceDevelopersMutex.Lock()
	defer fake.listSpaceDevelopersMutex.Unlock()
	fake.ListSpaceDevelopersStub = stub
}

func (fake *FakeCFClient) ListSpaceDevelopersArgsForCall(i int) string {
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	argsForCall := fake.listSpaceDevelopersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListSpaceDevelopersReturns(result1 []cfclient.User, result2 error) {
	fake.listSpaceDevelopersMutex.Lock()
	defer fake.listSpaceDevelopersMutex.Unlock()
	fake.ListSpaceDevelopersStub = nil
	fake.listSpaceDevelopersReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceDevelopersReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listSpaceDevelopersMutex.Lock()
	defer fake.listSpaceDevelopersMutex.Unlock()
	fake.ListSpaceDevelopersStub = nil
	if fake.listSpaceDevelopersReturnsOnCall == nil {
		fake.listSpaceDevelopersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listSpaceDevelopersReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceDevelopersByQuery(arg1 string, arg2 url.Values) ([]cfclient.User, error) {
	fake.listSpaceDevelopersByQueryMutex.Lock()
	ret, specificReturn := fake.listSpaceDevelopersByQueryReturnsOnCall[len(fake.listSpaceDevelopersByQueryArgsForCall)]
	fake.listSpaceDevelopersByQueryArgsForCall = append(fake.listSpaceDevelopersByQueryArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("ListSpaceDevelopersByQuery", []interface{}{arg1, arg2})
	fake.listSpaceDevelopersByQueryMutex.Unlock()
	if fake.ListSpaceDevelopersByQueryStub != nil {
		return fake.ListSpaceDevelopersByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceDevelopersByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceDevelopersByQueryCallCount() int {
	fake.listSpaceDevelopersByQueryMutex.RLock()
	defer fake.listSpaceDevelopersByQueryMutex.RUnlock()
	return len(fake.listSpaceDevelopersByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpaceDevelopersByQueryCalls(stub func(string, url.Values) ([]cfclient.User, error)) {
	fake.listSpaceDevelopersByQueryMutex.Lock()
	defer fake.listSpaceDevelopersByQueryMutex.Unlock()
	fake.ListSpaceDevelopersByQueryStub = stub
}

func (fake *FakeCFClient) ListSpaceDevelopersByQueryArgsForCall(i int) (string, url.Values) {
	fake.listSpaceDevelopersByQueryMutex.RLock()
	defer fake.listSpaceDevelopersByQueryMutex.RUnlock()
	argsForCall := fake.listSpaceDevelopersByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListSpaceDevelopersByQueryReturns(result1 []cfclient.User, result2 error) {
	fake.listSpaceDevelopersByQueryMutex.Lock()
	defer fake.listSpaceDevelopersByQueryMutex.Unlock()
	fake.ListSpaceDevelopersByQueryStub = nil
	fake.listSpaceDevelopersByQueryReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceDevelopersByQueryReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listSpaceDevelopersByQueryMutex.Lock()
	defer fake.listSpaceDevelopersByQueryMutex.Unlock()
	fake.ListSpaceDevelopersByQueryStub = nil
	if fake.listSpaceDevelopersByQueryReturnsOnCall == nil {
		fake.listSpaceDevelopersByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listSpaceDevelopersByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceManagers(arg1 string) ([]cfclient.User, error) {
	fake.listSpaceManagersMutex.Lock()
	ret, specificReturn := fake.listSpaceManagersReturnsOnCall[len(fake.listSpaceManagersArgsForCall)]
	fake.listSpaceManagersArgsForCall = append(fake.listSpaceManagersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListSpaceManagers", []interface{}{arg1})
	fake.listSpaceManagersMutex.Unlock()
	if fake.ListSpaceManagersStub != nil {
		return fake.ListSpaceManagersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceManagersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceManagersCallCount() int {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	return len(fake.listSpaceManagersArgsForCall)
}

func (fake *FakeCFClient) ListSpaceManagersCalls(stub func(string) ([]cfclient.User, error)) {
	fake.listSpaceManagersMutex.Lock()
	defer fake.listSpaceManagersMutex.Unlock()
	fake.ListSpaceManagersStub = stub
}

func (fake *FakeCFClient) ListSpaceManagersArgsForCall(i int) string {
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	argsForCall := fake.listSpaceManagersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListSpaceManagersReturns(result1 []cfclient.User, result2 error) {
	fake.listSpaceManagersMutex.Lock()
	defer fake.listSpaceManagersMutex.Unlock()
	fake.ListSpaceManagersStub = nil
	fake.listSpaceManagersReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceManagersReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listSpaceManagersMutex.Lock()
	defer fake.listSpaceManagersMutex.Unlock()
	fake.ListSpaceManagersStub = nil
	if fake.listSpaceManagersReturnsOnCall == nil {
		fake.listSpaceManagersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listSpaceManagersReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceManagersByQuery(arg1 string, arg2 url.Values) ([]cfclient.User, error) {
	fake.listSpaceManagersByQueryMutex.Lock()
	ret, specificReturn := fake.listSpaceManagersByQueryReturnsOnCall[len(fake.listSpaceManagersByQueryArgsForCall)]
	fake.listSpaceManagersByQueryArgsForCall = append(fake.listSpaceManagersByQueryArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("ListSpaceManagersByQuery", []interface{}{arg1, arg2})
	fake.listSpaceManagersByQueryMutex.Unlock()
	if fake.ListSpaceManagersByQueryStub != nil {
		return fake.ListSpaceManagersByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceManagersByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceManagersByQueryCallCount() int {
	fake.listSpaceManagersByQueryMutex.RLock()
	defer fake.listSpaceManagersByQueryMutex.RUnlock()
	return len(fake.listSpaceManagersByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpaceManagersByQueryCalls(stub func(string, url.Values) ([]cfclient.User, error)) {
	fake.listSpaceManagersByQueryMutex.Lock()
	defer fake.listSpaceManagersByQueryMutex.Unlock()
	fake.ListSpaceManagersByQueryStub = stub
}

func (fake *FakeCFClient) ListSpaceManagersByQueryArgsForCall(i int) (string, url.Values) {
	fake.listSpaceManagersByQueryMutex.RLock()
	defer fake.listSpaceManagersByQueryMutex.RUnlock()
	argsForCall := fake.listSpaceManagersByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ListSpaceManagersByQueryReturns(result1 []cfclient.User, result2 error) {
	fake.listSpaceManagersByQueryMutex.Lock()
	defer fake.listSpaceManagersByQueryMutex.Unlock()
	fake.ListSpaceManagersByQueryStub = nil
	fake.listSpaceManagersByQueryReturns = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceManagersByQueryReturnsOnCall(i int, result1 []cfclient.User, result2 error) {
	fake.listSpaceManagersByQueryMutex.Lock()
	defer fake.listSpaceManagersByQueryMutex.Unlock()
	fake.ListSpaceManagersByQueryStub = nil
	if fake.listSpaceManagersByQueryReturnsOnCall == nil {
		fake.listSpaceManagersByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.User
			result2 error
		})
	}
	fake.listSpaceManagersByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.User
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceQuotas() ([]cfclient.SpaceQuota, error) {
	fake.listSpaceQuotasMutex.Lock()
	ret, specificReturn := fake.listSpaceQuotasReturnsOnCall[len(fake.listSpaceQuotasArgsForCall)]
	fake.listSpaceQuotasArgsForCall = append(fake.listSpaceQuotasArgsForCall, struct {
	}{})
	fake.recordInvocation("ListSpaceQuotas", []interface{}{})
	fake.listSpaceQuotasMutex.Unlock()
	if fake.ListSpaceQuotasStub != nil {
		return fake.ListSpaceQuotasStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceQuotasReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceQuotasCallCount() int {
	fake.listSpaceQuotasMutex.RLock()
	defer fake.listSpaceQuotasMutex.RUnlock()
	return len(fake.listSpaceQuotasArgsForCall)
}

func (fake *FakeCFClient) ListSpaceQuotasCalls(stub func() ([]cfclient.SpaceQuota, error)) {
	fake.listSpaceQuotasMutex.Lock()
	defer fake.listSpaceQuotasMutex.Unlock()
	fake.ListSpaceQuotasStub = stub
}

func (fake *FakeCFClient) ListSpaceQuotasReturns(result1 []cfclient.SpaceQuota, result2 error) {
	fake.listSpaceQuotasMutex.Lock()
	defer fake.listSpaceQuotasMutex.Unlock()
	fake.ListSpaceQuotasStub = nil
	fake.listSpaceQuotasReturns = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceQuotasReturnsOnCall(i int, result1 []cfclient.SpaceQuota, result2 error) {
	fake.listSpaceQuotasMutex.Lock()
	defer fake.listSpaceQuotasMutex.Unlock()
	fake.ListSpaceQuotasStub = nil
	if fake.listSpaceQuotasReturnsOnCall == nil {
		fake.listSpaceQuotasReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SpaceQuota
			result2 error
		})
	}
	fake.listSpaceQuotasReturnsOnCall[i] = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceQuotasByQuery(arg1 url.Values) ([]cfclient.SpaceQuota, error) {
	fake.listSpaceQuotasByQueryMutex.Lock()
	ret, specificReturn := fake.listSpaceQuotasByQueryReturnsOnCall[len(fake.listSpaceQuotasByQueryArgsForCall)]
	fake.listSpaceQuotasByQueryArgsForCall = append(fake.listSpaceQuotasByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListSpaceQuotasByQuery", []interface{}{arg1})
	fake.listSpaceQuotasByQueryMutex.Unlock()
	if fake.ListSpaceQuotasByQueryStub != nil {
		return fake.ListSpaceQuotasByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceQuotasByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceQuotasByQueryCallCount() int {
	fake.listSpaceQuotasByQueryMutex.RLock()
	defer fake.listSpaceQuotasByQueryMutex.RUnlock()
	return len(fake.listSpaceQuotasByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpaceQuotasByQueryCalls(stub func(url.Values) ([]cfclient.SpaceQuota, error)) {
	fake.listSpaceQuotasByQueryMutex.Lock()
	defer fake.listSpaceQuotasByQueryMutex.Unlock()
	fake.ListSpaceQuotasByQueryStub = stub
}

func (fake *FakeCFClient) ListSpaceQuotasByQueryArgsForCall(i int) url.Values {
	fake.listSpaceQuotasByQueryMutex.RLock()
	defer fake.listSpaceQuotasByQueryMutex.RUnlock()
	argsForCall := fake.listSpaceQuotasByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListSpaceQuotasByQueryReturns(result1 []cfclient.SpaceQuota, result2 error) {
	fake.listSpaceQuotasByQueryMutex.Lock()
	defer fake.listSpaceQuotasByQueryMutex.Unlock()
	fake.ListSpaceQuotasByQueryStub = nil
	fake.listSpaceQuotasByQueryReturns = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceQuotasByQueryReturnsOnCall(i int, result1 []cfclient.SpaceQuota, result2 error) {
	fake.listSpaceQuotasByQueryMutex.Lock()
	defer fake.listSpaceQuotasByQueryMutex.Unlock()
	fake.ListSpaceQuotasByQueryStub = nil
	if fake.listSpaceQuotasByQueryReturnsOnCall == nil {
		fake.listSpaceQuotasByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SpaceQuota
			result2 error
		})
	}
	fake.listSpaceQuotasByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceSecGroups(arg1 string) ([]cfclient.SecGroup, error) {
	fake.listSpaceSecGroupsMutex.Lock()
	ret, specificReturn := fake.listSpaceSecGroupsReturnsOnCall[len(fake.listSpaceSecGroupsArgsForCall)]
	fake.listSpaceSecGroupsArgsForCall = append(fake.listSpaceSecGroupsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListSpaceSecGroups", []interface{}{arg1})
	fake.listSpaceSecGroupsMutex.Unlock()
	if fake.ListSpaceSecGroupsStub != nil {
		return fake.ListSpaceSecGroupsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpaceSecGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpaceSecGroupsCallCount() int {
	fake.listSpaceSecGroupsMutex.RLock()
	defer fake.listSpaceSecGroupsMutex.RUnlock()
	return len(fake.listSpaceSecGroupsArgsForCall)
}

func (fake *FakeCFClient) ListSpaceSecGroupsCalls(stub func(string) ([]cfclient.SecGroup, error)) {
	fake.listSpaceSecGroupsMutex.Lock()
	defer fake.listSpaceSecGroupsMutex.Unlock()
	fake.ListSpaceSecGroupsStub = stub
}

func (fake *FakeCFClient) ListSpaceSecGroupsArgsForCall(i int) string {
	fake.listSpaceSecGroupsMutex.RLock()
	defer fake.listSpaceSecGroupsMutex.RUnlock()
	argsForCall := fake.listSpaceSecGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListSpaceSecGroupsReturns(result1 []cfclient.SecGroup, result2 error) {
	fake.listSpaceSecGroupsMutex.Lock()
	defer fake.listSpaceSecGroupsMutex.Unlock()
	fake.ListSpaceSecGroupsStub = nil
	fake.listSpaceSecGroupsReturns = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaceSecGroupsReturnsOnCall(i int, result1 []cfclient.SecGroup, result2 error) {
	fake.listSpaceSecGroupsMutex.Lock()
	defer fake.listSpaceSecGroupsMutex.Unlock()
	fake.ListSpaceSecGroupsStub = nil
	if fake.listSpaceSecGroupsReturnsOnCall == nil {
		fake.listSpaceSecGroupsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SecGroup
			result2 error
		})
	}
	fake.listSpaceSecGroupsReturnsOnCall[i] = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpaces() ([]cfclient.Space, error) {
	fake.listSpacesMutex.Lock()
	ret, specificReturn := fake.listSpacesReturnsOnCall[len(fake.listSpacesArgsForCall)]
	fake.listSpacesArgsForCall = append(fake.listSpacesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListSpaces", []interface{}{})
	fake.listSpacesMutex.Unlock()
	if fake.ListSpacesStub != nil {
		return fake.ListSpacesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpacesCallCount() int {
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	return len(fake.listSpacesArgsForCall)
}

func (fake *FakeCFClient) ListSpacesCalls(stub func() ([]cfclient.Space, error)) {
	fake.listSpacesMutex.Lock()
	defer fake.listSpacesMutex.Unlock()
	fake.ListSpacesStub = stub
}

func (fake *FakeCFClient) ListSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.listSpacesMutex.Lock()
	defer fake.listSpacesMutex.Unlock()
	fake.ListSpacesStub = nil
	fake.listSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpacesReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.listSpacesMutex.Lock()
	defer fake.listSpacesMutex.Unlock()
	fake.ListSpacesStub = nil
	if fake.listSpacesReturnsOnCall == nil {
		fake.listSpacesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listSpacesReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpacesByQuery(arg1 url.Values) ([]cfclient.Space, error) {
	fake.listSpacesByQueryMutex.Lock()
	ret, specificReturn := fake.listSpacesByQueryReturnsOnCall[len(fake.listSpacesByQueryArgsForCall)]
	fake.listSpacesByQueryArgsForCall = append(fake.listSpacesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListSpacesByQuery", []interface{}{arg1})
	fake.listSpacesByQueryMutex.Unlock()
	if fake.ListSpacesByQueryStub != nil {
		return fake.ListSpacesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listSpacesByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSpacesByQueryCallCount() int {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return len(fake.listSpacesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListSpacesByQueryCalls(stub func(url.Values) ([]cfclient.Space, error)) {
	fake.listSpacesByQueryMutex.Lock()
	defer fake.listSpacesByQueryMutex.Unlock()
	fake.ListSpacesByQueryStub = stub
}

func (fake *FakeCFClient) ListSpacesByQueryArgsForCall(i int) url.Values {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	argsForCall := fake.listSpacesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListSpacesByQueryReturns(result1 []cfclient.Space, result2 error) {
	fake.listSpacesByQueryMutex.Lock()
	defer fake.listSpacesByQueryMutex.Unlock()
	fake.ListSpacesByQueryStub = nil
	fake.listSpacesByQueryReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSpacesByQueryReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.listSpacesByQueryMutex.Lock()
	defer fake.listSpacesByQueryMutex.Unlock()
	fake.ListSpacesByQueryStub = nil
	if fake.listSpacesByQueryReturnsOnCall == nil {
		fake.listSpacesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listSpacesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListStacks() ([]cfclient.Stack, error) {
	fake.listStacksMutex.Lock()
	ret, specificReturn := fake.listStacksReturnsOnCall[len(fake.listStacksArgsForCall)]
	fake.listStacksArgsForCall = append(fake.listStacksArgsForCall, struct {
	}{})
	fake.recordInvocation("ListStacks", []interface{}{})
	fake.listStacksMutex.Unlock()
	if fake.ListStacksStub != nil {
		return fake.ListStacksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listStacksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListStacksCallCount() int {
	fake.listStacksMutex.RLock()
	defer fake.listStacksMutex.RUnlock()
	return len(fake.listStacksArgsForCall)
}

func (fake *FakeCFClient) ListStacksCalls(stub func() ([]cfclient.Stack, error)) {
	fake.listStacksMutex.Lock()
	defer fake.listStacksMutex.Unlock()
	fake.ListStacksStub = stub
}

func (fake *FakeCFClient) ListStacksReturns(result1 []cfclient.Stack, result2 error) {
	fake.listStacksMutex.Lock()
	defer fake.listStacksMutex.Unlock()
	fake.ListStacksStub = nil
	fake.listStacksReturns = struct {
		result1 []cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListStacksReturnsOnCall(i int, result1 []cfclient.Stack, result2 error) {
	fake.listStacksMutex.Lock()
	defer fake.listStacksMutex.Unlock()
	fake.ListStacksStub = nil
	if fake.listStacksReturnsOnCall == nil {
		fake.listStacksReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Stack
			result2 error
		})
	}
	fake.listStacksReturnsOnCall[i] = struct {
		result1 []cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListStacksByQuery(arg1 url.Values) ([]cfclient.Stack, error) {
	fake.listStacksByQueryMutex.Lock()
	ret, specificReturn := fake.listStacksByQueryReturnsOnCall[len(fake.listStacksByQueryArgsForCall)]
	fake.listStacksByQueryArgsForCall = append(fake.listStacksByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListStacksByQuery", []interface{}{arg1})
	fake.listStacksByQueryMutex.Unlock()
	if fake.ListStacksByQueryStub != nil {
		return fake.ListStacksByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listStacksByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListStacksByQueryCallCount() int {
	fake.listStacksByQueryMutex.RLock()
	defer fake.listStacksByQueryMutex.RUnlock()
	return len(fake.listStacksByQueryArgsForCall)
}

func (fake *FakeCFClient) ListStacksByQueryCalls(stub func(url.Values) ([]cfclient.Stack, error)) {
	fake.listStacksByQueryMutex.Lock()
	defer fake.listStacksByQueryMutex.Unlock()
	fake.ListStacksByQueryStub = stub
}

func (fake *FakeCFClient) ListStacksByQueryArgsForCall(i int) url.Values {
	fake.listStacksByQueryMutex.RLock()
	defer fake.listStacksByQueryMutex.RUnlock()
	argsForCall := fake.listStacksByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListStacksByQueryReturns(result1 []cfclient.Stack, result2 error) {
	fake.listStacksByQueryMutex.Lock()
	defer fake.listStacksByQueryMutex.Unlock()
	fake.ListStacksByQueryStub = nil
	fake.listStacksByQueryReturns = struct {
		result1 []cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListStacksByQueryReturnsOnCall(i int, result1 []cfclient.Stack, result2 error) {
	fake.listStacksByQueryMutex.Lock()
	defer fake.listStacksByQueryMutex.Unlock()
	fake.ListStacksByQueryStub = nil
	if fake.listStacksByQueryReturnsOnCall == nil {
		fake.listStacksByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Stack
			result2 error
		})
	}
	fake.listStacksByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Stack
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListStagingSecGroups() ([]cfclient.SecGroup, error) {
	fake.listStagingSecGroupsMutex.Lock()
	ret, specificReturn := fake.listStagingSecGroupsReturnsOnCall[len(fake.listStagingSecGroupsArgsForCall)]
	fake.listStagingSecGroupsArgsForCall = append(fake.listStagingSecGroupsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListStagingSecGroups", []interface{}{})
	fake.listStagingSecGroupsMutex.Unlock()
	if fake.ListStagingSecGroupsStub != nil {
		return fake.ListStagingSecGroupsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listStagingSecGroupsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListStagingSecGroupsCallCount() int {
	fake.listStagingSecGroupsMutex.RLock()
	defer fake.listStagingSecGroupsMutex.RUnlock()
	return len(fake.listStagingSecGroupsArgsForCall)
}

func (fake *FakeCFClient) ListStagingSecGroupsCalls(stub func() ([]cfclient.SecGroup, error)) {
	fake.listStagingSecGroupsMutex.Lock()
	defer fake.listStagingSecGroupsMutex.Unlock()
	fake.ListStagingSecGroupsStub = stub
}

func (fake *FakeCFClient) ListStagingSecGroupsReturns(result1 []cfclient.SecGroup, result2 error) {
	fake.listStagingSecGroupsMutex.Lock()
	defer fake.listStagingSecGroupsMutex.Unlock()
	fake.ListStagingSecGroupsStub = nil
	fake.listStagingSecGroupsReturns = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListStagingSecGroupsReturnsOnCall(i int, result1 []cfclient.SecGroup, result2 error) {
	fake.listStagingSecGroupsMutex.Lock()
	defer fake.listStagingSecGroupsMutex.Unlock()
	fake.ListStagingSecGroupsStub = nil
	if fake.listStagingSecGroupsReturnsOnCall == nil {
		fake.listStagingSecGroupsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SecGroup
			result2 error
		})
	}
	fake.listStagingSecGroupsReturnsOnCall[i] = struct {
		result1 []cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListTasks() ([]cfclient.Task, error) {
	fake.listTasksMutex.Lock()
	ret, specificReturn := fake.listTasksReturnsOnCall[len(fake.listTasksArgsForCall)]
	fake.listTasksArgsForCall = append(fake.listTasksArgsForCall, struct {
	}{})
	fake.recordInvocation("ListTasks", []interface{}{})
	fake.listTasksMutex.Unlock()
	if fake.ListTasksStub != nil {
		return fake.ListTasksStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListTasksCallCount() int {
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	return len(fake.listTasksArgsForCall)
}

func (fake *FakeCFClient) ListTasksCalls(stub func() ([]cfclient.Task, error)) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = stub
}

func (fake *FakeCFClient) ListTasksReturns(result1 []cfclient.Task, result2 error) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = nil
	fake.listTasksReturns = struct {
		result1 []cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListTasksReturnsOnCall(i int, result1 []cfclient.Task, result2 error) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = nil
	if fake.listTasksReturnsOnCall == nil {
		fake.listTasksReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Task
			result2 error
		})
	}
	fake.listTasksReturnsOnCall[i] = struct {
		result1 []cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListTasksByQuery(arg1 url.Values) ([]cfclient.Task, error) {
	fake.listTasksByQueryMutex.Lock()
	ret, specificReturn := fake.listTasksByQueryReturnsOnCall[len(fake.listTasksByQueryArgsForCall)]
	fake.listTasksByQueryArgsForCall = append(fake.listTasksByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListTasksByQuery", []interface{}{arg1})
	fake.listTasksByQueryMutex.Unlock()
	if fake.ListTasksByQueryStub != nil {
		return fake.ListTasksByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTasksByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListTasksByQueryCallCount() int {
	fake.listTasksByQueryMutex.RLock()
	defer fake.listTasksByQueryMutex.RUnlock()
	return len(fake.listTasksByQueryArgsForCall)
}

func (fake *FakeCFClient) ListTasksByQueryCalls(stub func(url.Values) ([]cfclient.Task, error)) {
	fake.listTasksByQueryMutex.Lock()
	defer fake.listTasksByQueryMutex.Unlock()
	fake.ListTasksByQueryStub = stub
}

func (fake *FakeCFClient) ListTasksByQueryArgsForCall(i int) url.Values {
	fake.listTasksByQueryMutex.RLock()
	defer fake.listTasksByQueryMutex.RUnlock()
	argsForCall := fake.listTasksByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListTasksByQueryReturns(result1 []cfclient.Task, result2 error) {
	fake.listTasksByQueryMutex.Lock()
	defer fake.listTasksByQueryMutex.Unlock()
	fake.ListTasksByQueryStub = nil
	fake.listTasksByQueryReturns = struct {
		result1 []cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListTasksByQueryReturnsOnCall(i int, result1 []cfclient.Task, result2 error) {
	fake.listTasksByQueryMutex.Lock()
	defer fake.listTasksByQueryMutex.Unlock()
	fake.ListTasksByQueryStub = nil
	if fake.listTasksByQueryReturnsOnCall == nil {
		fake.listTasksByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Task
			result2 error
		})
	}
	fake.listTasksByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserAuditedOrgs(arg1 string) ([]cfclient.Org, error) {
	fake.listUserAuditedOrgsMutex.Lock()
	ret, specificReturn := fake.listUserAuditedOrgsReturnsOnCall[len(fake.listUserAuditedOrgsArgsForCall)]
	fake.listUserAuditedOrgsArgsForCall = append(fake.listUserAuditedOrgsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListUserAuditedOrgs", []interface{}{arg1})
	fake.listUserAuditedOrgsMutex.Unlock()
	if fake.ListUserAuditedOrgsStub != nil {
		return fake.ListUserAuditedOrgsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserAuditedOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserAuditedOrgsCallCount() int {
	fake.listUserAuditedOrgsMutex.RLock()
	defer fake.listUserAuditedOrgsMutex.RUnlock()
	return len(fake.listUserAuditedOrgsArgsForCall)
}

func (fake *FakeCFClient) ListUserAuditedOrgsCalls(stub func(string) ([]cfclient.Org, error)) {
	fake.listUserAuditedOrgsMutex.Lock()
	defer fake.listUserAuditedOrgsMutex.Unlock()
	fake.ListUserAuditedOrgsStub = stub
}

func (fake *FakeCFClient) ListUserAuditedOrgsArgsForCall(i int) string {
	fake.listUserAuditedOrgsMutex.RLock()
	defer fake.listUserAuditedOrgsMutex.RUnlock()
	argsForCall := fake.listUserAuditedOrgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUserAuditedOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.listUserAuditedOrgsMutex.Lock()
	defer fake.listUserAuditedOrgsMutex.Unlock()
	fake.ListUserAuditedOrgsStub = nil
	fake.listUserAuditedOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserAuditedOrgsReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.listUserAuditedOrgsMutex.Lock()
	defer fake.listUserAuditedOrgsMutex.Unlock()
	fake.ListUserAuditedOrgsStub = nil
	if fake.listUserAuditedOrgsReturnsOnCall == nil {
		fake.listUserAuditedOrgsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listUserAuditedOrgsReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserAuditedSpaces(arg1 string) ([]cfclient.Space, error) {
	fake.listUserAuditedSpacesMutex.Lock()
	ret, specificReturn := fake.listUserAuditedSpacesReturnsOnCall[len(fake.listUserAuditedSpacesArgsForCall)]
	fake.listUserAuditedSpacesArgsForCall = append(fake.listUserAuditedSpacesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListUserAuditedSpaces", []interface{}{arg1})
	fake.listUserAuditedSpacesMutex.Unlock()
	if fake.ListUserAuditedSpacesStub != nil {
		return fake.ListUserAuditedSpacesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserAuditedSpacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserAuditedSpacesCallCount() int {
	fake.listUserAuditedSpacesMutex.RLock()
	defer fake.listUserAuditedSpacesMutex.RUnlock()
	return len(fake.listUserAuditedSpacesArgsForCall)
}

func (fake *FakeCFClient) ListUserAuditedSpacesCalls(stub func(string) ([]cfclient.Space, error)) {
	fake.listUserAuditedSpacesMutex.Lock()
	defer fake.listUserAuditedSpacesMutex.Unlock()
	fake.ListUserAuditedSpacesStub = stub
}

func (fake *FakeCFClient) ListUserAuditedSpacesArgsForCall(i int) string {
	fake.listUserAuditedSpacesMutex.RLock()
	defer fake.listUserAuditedSpacesMutex.RUnlock()
	argsForCall := fake.listUserAuditedSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUserAuditedSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.listUserAuditedSpacesMutex.Lock()
	defer fake.listUserAuditedSpacesMutex.Unlock()
	fake.ListUserAuditedSpacesStub = nil
	fake.listUserAuditedSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserAuditedSpacesReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.listUserAuditedSpacesMutex.Lock()
	defer fake.listUserAuditedSpacesMutex.Unlock()
	fake.ListUserAuditedSpacesStub = nil
	if fake.listUserAuditedSpacesReturnsOnCall == nil {
		fake.listUserAuditedSpacesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listUserAuditedSpacesReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserBillingManagedOrgs(arg1 string) ([]cfclient.Org, error) {
	fake.listUserBillingManagedOrgsMutex.Lock()
	ret, specificReturn := fake.listUserBillingManagedOrgsReturnsOnCall[len(fake.listUserBillingManagedOrgsArgsForCall)]
	fake.listUserBillingManagedOrgsArgsForCall = append(fake.listUserBillingManagedOrgsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListUserBillingManagedOrgs", []interface{}{arg1})
	fake.listUserBillingManagedOrgsMutex.Unlock()
	if fake.ListUserBillingManagedOrgsStub != nil {
		return fake.ListUserBillingManagedOrgsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserBillingManagedOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserBillingManagedOrgsCallCount() int {
	fake.listUserBillingManagedOrgsMutex.RLock()
	defer fake.listUserBillingManagedOrgsMutex.RUnlock()
	return len(fake.listUserBillingManagedOrgsArgsForCall)
}

func (fake *FakeCFClient) ListUserBillingManagedOrgsCalls(stub func(string) ([]cfclient.Org, error)) {
	fake.listUserBillingManagedOrgsMutex.Lock()
	defer fake.listUserBillingManagedOrgsMutex.Unlock()
	fake.ListUserBillingManagedOrgsStub = stub
}

func (fake *FakeCFClient) ListUserBillingManagedOrgsArgsForCall(i int) string {
	fake.listUserBillingManagedOrgsMutex.RLock()
	defer fake.listUserBillingManagedOrgsMutex.RUnlock()
	argsForCall := fake.listUserBillingManagedOrgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUserBillingManagedOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.listUserBillingManagedOrgsMutex.Lock()
	defer fake.listUserBillingManagedOrgsMutex.Unlock()
	fake.ListUserBillingManagedOrgsStub = nil
	fake.listUserBillingManagedOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserBillingManagedOrgsReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.listUserBillingManagedOrgsMutex.Lock()
	defer fake.listUserBillingManagedOrgsMutex.Unlock()
	fake.ListUserBillingManagedOrgsStub = nil
	if fake.listUserBillingManagedOrgsReturnsOnCall == nil {
		fake.listUserBillingManagedOrgsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listUserBillingManagedOrgsReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserManagedOrgs(arg1 string) ([]cfclient.Org, error) {
	fake.listUserManagedOrgsMutex.Lock()
	ret, specificReturn := fake.listUserManagedOrgsReturnsOnCall[len(fake.listUserManagedOrgsArgsForCall)]
	fake.listUserManagedOrgsArgsForCall = append(fake.listUserManagedOrgsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListUserManagedOrgs", []interface{}{arg1})
	fake.listUserManagedOrgsMutex.Unlock()
	if fake.ListUserManagedOrgsStub != nil {
		return fake.ListUserManagedOrgsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserManagedOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserManagedOrgsCallCount() int {
	fake.listUserManagedOrgsMutex.RLock()
	defer fake.listUserManagedOrgsMutex.RUnlock()
	return len(fake.listUserManagedOrgsArgsForCall)
}

func (fake *FakeCFClient) ListUserManagedOrgsCalls(stub func(string) ([]cfclient.Org, error)) {
	fake.listUserManagedOrgsMutex.Lock()
	defer fake.listUserManagedOrgsMutex.Unlock()
	fake.ListUserManagedOrgsStub = stub
}

func (fake *FakeCFClient) ListUserManagedOrgsArgsForCall(i int) string {
	fake.listUserManagedOrgsMutex.RLock()
	defer fake.listUserManagedOrgsMutex.RUnlock()
	argsForCall := fake.listUserManagedOrgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUserManagedOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.listUserManagedOrgsMutex.Lock()
	defer fake.listUserManagedOrgsMutex.Unlock()
	fake.ListUserManagedOrgsStub = nil
	fake.listUserManagedOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserManagedOrgsReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.listUserManagedOrgsMutex.Lock()
	defer fake.listUserManagedOrgsMutex.Unlock()
	fake.ListUserManagedOrgsStub = nil
	if fake.listUserManagedOrgsReturnsOnCall == nil {
		fake.listUserManagedOrgsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listUserManagedOrgsReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserManagedSpaces(arg1 string) ([]cfclient.Space, error) {
	fake.listUserManagedSpacesMutex.Lock()
	ret, specificReturn := fake.listUserManagedSpacesReturnsOnCall[len(fake.listUserManagedSpacesArgsForCall)]
	fake.listUserManagedSpacesArgsForCall = append(fake.listUserManagedSpacesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListUserManagedSpaces", []interface{}{arg1})
	fake.listUserManagedSpacesMutex.Unlock()
	if fake.ListUserManagedSpacesStub != nil {
		return fake.ListUserManagedSpacesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserManagedSpacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserManagedSpacesCallCount() int {
	fake.listUserManagedSpacesMutex.RLock()
	defer fake.listUserManagedSpacesMutex.RUnlock()
	return len(fake.listUserManagedSpacesArgsForCall)
}

func (fake *FakeCFClient) ListUserManagedSpacesCalls(stub func(string) ([]cfclient.Space, error)) {
	fake.listUserManagedSpacesMutex.Lock()
	defer fake.listUserManagedSpacesMutex.Unlock()
	fake.ListUserManagedSpacesStub = stub
}

func (fake *FakeCFClient) ListUserManagedSpacesArgsForCall(i int) string {
	fake.listUserManagedSpacesMutex.RLock()
	defer fake.listUserManagedSpacesMutex.RUnlock()
	argsForCall := fake.listUserManagedSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUserManagedSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.listUserManagedSpacesMutex.Lock()
	defer fake.listUserManagedSpacesMutex.Unlock()
	fake.ListUserManagedSpacesStub = nil
	fake.listUserManagedSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserManagedSpacesReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.listUserManagedSpacesMutex.Lock()
	defer fake.listUserManagedSpacesMutex.Unlock()
	fake.ListUserManagedSpacesStub = nil
	if fake.listUserManagedSpacesReturnsOnCall == nil {
		fake.listUserManagedSpacesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listUserManagedSpacesReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserOrgs(arg1 string) ([]cfclient.Org, error) {
	fake.listUserOrgsMutex.Lock()
	ret, specificReturn := fake.listUserOrgsReturnsOnCall[len(fake.listUserOrgsArgsForCall)]
	fake.listUserOrgsArgsForCall = append(fake.listUserOrgsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListUserOrgs", []interface{}{arg1})
	fake.listUserOrgsMutex.Unlock()
	if fake.ListUserOrgsStub != nil {
		return fake.ListUserOrgsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserOrgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserOrgsCallCount() int {
	fake.listUserOrgsMutex.RLock()
	defer fake.listUserOrgsMutex.RUnlock()
	return len(fake.listUserOrgsArgsForCall)
}

func (fake *FakeCFClient) ListUserOrgsCalls(stub func(string) ([]cfclient.Org, error)) {
	fake.listUserOrgsMutex.Lock()
	defer fake.listUserOrgsMutex.Unlock()
	fake.ListUserOrgsStub = stub
}

func (fake *FakeCFClient) ListUserOrgsArgsForCall(i int) string {
	fake.listUserOrgsMutex.RLock()
	defer fake.listUserOrgsMutex.RUnlock()
	argsForCall := fake.listUserOrgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUserOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.listUserOrgsMutex.Lock()
	defer fake.listUserOrgsMutex.Unlock()
	fake.ListUserOrgsStub = nil
	fake.listUserOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserOrgsReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.listUserOrgsMutex.Lock()
	defer fake.listUserOrgsMutex.Unlock()
	fake.ListUserOrgsStub = nil
	if fake.listUserOrgsReturnsOnCall == nil {
		fake.listUserOrgsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listUserOrgsReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserProvidedServiceInstances() ([]cfclient.UserProvidedServiceInstance, error) {
	fake.listUserProvidedServiceInstancesMutex.Lock()
	ret, specificReturn := fake.listUserProvidedServiceInstancesReturnsOnCall[len(fake.listUserProvidedServiceInstancesArgsForCall)]
	fake.listUserProvidedServiceInstancesArgsForCall = append(fake.listUserProvidedServiceInstancesArgsForCall, struct {
	}{})
	fake.recordInvocation("ListUserProvidedServiceInstances", []interface{}{})
	fake.listUserProvidedServiceInstancesMutex.Unlock()
	if fake.ListUserProvidedServiceInstancesStub != nil {
		return fake.ListUserProvidedServiceInstancesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserProvidedServiceInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesCallCount() int {
	fake.listUserProvidedServiceInstancesMutex.RLock()
	defer fake.listUserProvidedServiceInstancesMutex.RUnlock()
	return len(fake.listUserProvidedServiceInstancesArgsForCall)
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesCalls(stub func() ([]cfclient.UserProvidedServiceInstance, error)) {
	fake.listUserProvidedServiceInstancesMutex.Lock()
	defer fake.listUserProvidedServiceInstancesMutex.Unlock()
	fake.ListUserProvidedServiceInstancesStub = stub
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesReturns(result1 []cfclient.UserProvidedServiceInstance, result2 error) {
	fake.listUserProvidedServiceInstancesMutex.Lock()
	defer fake.listUserProvidedServiceInstancesMutex.Unlock()
	fake.ListUserProvidedServiceInstancesStub = nil
	fake.listUserProvidedServiceInstancesReturns = struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesReturnsOnCall(i int, result1 []cfclient.UserProvidedServiceInstance, result2 error) {
	fake.listUserProvidedServiceInstancesMutex.Lock()
	defer fake.listUserProvidedServiceInstancesMutex.Unlock()
	fake.ListUserProvidedServiceInstancesStub = nil
	if fake.listUserProvidedServiceInstancesReturnsOnCall == nil {
		fake.listUserProvidedServiceInstancesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.listUserProvidedServiceInstancesReturnsOnCall[i] = struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesByQuery(arg1 url.Values) ([]cfclient.UserProvidedServiceInstance, error) {
	fake.listUserProvidedServiceInstancesByQueryMutex.Lock()
	ret, specificReturn := fake.listUserProvidedServiceInstancesByQueryReturnsOnCall[len(fake.listUserProvidedServiceInstancesByQueryArgsForCall)]
	fake.listUserProvidedServiceInstancesByQueryArgsForCall = append(fake.listUserProvidedServiceInstancesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListUserProvidedServiceInstancesByQuery", []interface{}{arg1})
	fake.listUserProvidedServiceInstancesByQueryMutex.Unlock()
	if fake.ListUserProvidedServiceInstancesByQueryStub != nil {
		return fake.ListUserProvidedServiceInstancesByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserProvidedServiceInstancesByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesByQueryCallCount() int {
	fake.listUserProvidedServiceInstancesByQueryMutex.RLock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.RUnlock()
	return len(fake.listUserProvidedServiceInstancesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesByQueryCalls(stub func(url.Values) ([]cfclient.UserProvidedServiceInstance, error)) {
	fake.listUserProvidedServiceInstancesByQueryMutex.Lock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.Unlock()
	fake.ListUserProvidedServiceInstancesByQueryStub = stub
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesByQueryArgsForCall(i int) url.Values {
	fake.listUserProvidedServiceInstancesByQueryMutex.RLock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.RUnlock()
	argsForCall := fake.listUserProvidedServiceInstancesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesByQueryReturns(result1 []cfclient.UserProvidedServiceInstance, result2 error) {
	fake.listUserProvidedServiceInstancesByQueryMutex.Lock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.Unlock()
	fake.ListUserProvidedServiceInstancesByQueryStub = nil
	fake.listUserProvidedServiceInstancesByQueryReturns = struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserProvidedServiceInstancesByQueryReturnsOnCall(i int, result1 []cfclient.UserProvidedServiceInstance, result2 error) {
	fake.listUserProvidedServiceInstancesByQueryMutex.Lock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.Unlock()
	fake.ListUserProvidedServiceInstancesByQueryStub = nil
	if fake.listUserProvidedServiceInstancesByQueryReturnsOnCall == nil {
		fake.listUserProvidedServiceInstancesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.listUserProvidedServiceInstancesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserSpaces(arg1 string) ([]cfclient.Space, error) {
	fake.listUserSpacesMutex.Lock()
	ret, specificReturn := fake.listUserSpacesReturnsOnCall[len(fake.listUserSpacesArgsForCall)]
	fake.listUserSpacesArgsForCall = append(fake.listUserSpacesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListUserSpaces", []interface{}{arg1})
	fake.listUserSpacesMutex.Unlock()
	if fake.ListUserSpacesStub != nil {
		return fake.ListUserSpacesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUserSpacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUserSpacesCallCount() int {
	fake.listUserSpacesMutex.RLock()
	defer fake.listUserSpacesMutex.RUnlock()
	return len(fake.listUserSpacesArgsForCall)
}

func (fake *FakeCFClient) ListUserSpacesCalls(stub func(string) ([]cfclient.Space, error)) {
	fake.listUserSpacesMutex.Lock()
	defer fake.listUserSpacesMutex.Unlock()
	fake.ListUserSpacesStub = stub
}

func (fake *FakeCFClient) ListUserSpacesArgsForCall(i int) string {
	fake.listUserSpacesMutex.RLock()
	defer fake.listUserSpacesMutex.RUnlock()
	argsForCall := fake.listUserSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUserSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.listUserSpacesMutex.Lock()
	defer fake.listUserSpacesMutex.Unlock()
	fake.ListUserSpacesStub = nil
	fake.listUserSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUserSpacesReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.listUserSpacesMutex.Lock()
	defer fake.listUserSpacesMutex.Unlock()
	fake.ListUserSpacesStub = nil
	if fake.listUserSpacesReturnsOnCall == nil {
		fake.listUserSpacesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listUserSpacesReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUsers() (cfclient.Users, error) {
	fake.listUsersMutex.Lock()
	ret, specificReturn := fake.listUsersReturnsOnCall[len(fake.listUsersArgsForCall)]
	fake.listUsersArgsForCall = append(fake.listUsersArgsForCall, struct {
	}{})
	fake.recordInvocation("ListUsers", []interface{}{})
	fake.listUsersMutex.Unlock()
	if fake.ListUsersStub != nil {
		return fake.ListUsersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUsersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUsersCallCount() int {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	return len(fake.listUsersArgsForCall)
}

func (fake *FakeCFClient) ListUsersCalls(stub func() (cfclient.Users, error)) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = stub
}

func (fake *FakeCFClient) ListUsersReturns(result1 cfclient.Users, result2 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	fake.listUsersReturns = struct {
		result1 cfclient.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUsersReturnsOnCall(i int, result1 cfclient.Users, result2 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	if fake.listUsersReturnsOnCall == nil {
		fake.listUsersReturnsOnCall = make(map[int]struct {
			result1 cfclient.Users
			result2 error
		})
	}
	fake.listUsersReturnsOnCall[i] = struct {
		result1 cfclient.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUsersByQuery(arg1 url.Values) (cfclient.Users, error) {
	fake.listUsersByQueryMutex.Lock()
	ret, specificReturn := fake.listUsersByQueryReturnsOnCall[len(fake.listUsersByQueryArgsForCall)]
	fake.listUsersByQueryArgsForCall = append(fake.listUsersByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("ListUsersByQuery", []interface{}{arg1})
	fake.listUsersByQueryMutex.Unlock()
	if fake.ListUsersByQueryStub != nil {
		return fake.ListUsersByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listUsersByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListUsersByQueryCallCount() int {
	fake.listUsersByQueryMutex.RLock()
	defer fake.listUsersByQueryMutex.RUnlock()
	return len(fake.listUsersByQueryArgsForCall)
}

func (fake *FakeCFClient) ListUsersByQueryCalls(stub func(url.Values) (cfclient.Users, error)) {
	fake.listUsersByQueryMutex.Lock()
	defer fake.listUsersByQueryMutex.Unlock()
	fake.ListUsersByQueryStub = stub
}

func (fake *FakeCFClient) ListUsersByQueryArgsForCall(i int) url.Values {
	fake.listUsersByQueryMutex.RLock()
	defer fake.listUsersByQueryMutex.RUnlock()
	argsForCall := fake.listUsersByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListUsersByQueryReturns(result1 cfclient.Users, result2 error) {
	fake.listUsersByQueryMutex.Lock()
	defer fake.listUsersByQueryMutex.Unlock()
	fake.ListUsersByQueryStub = nil
	fake.listUsersByQueryReturns = struct {
		result1 cfclient.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListUsersByQueryReturnsOnCall(i int, result1 cfclient.Users, result2 error) {
	fake.listUsersByQueryMutex.Lock()
	defer fake.listUsersByQueryMutex.Unlock()
	fake.ListUsersByQueryStub = nil
	if fake.listUsersByQueryReturnsOnCall == nil {
		fake.listUsersByQueryReturnsOnCall = make(map[int]struct {
			result1 cfclient.Users
			result2 error
		})
	}
	fake.listUsersByQueryReturnsOnCall[i] = struct {
		result1 cfclient.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) MakeServicePlanPrivate(arg1 string) error {
	fake.makeServicePlanPrivateMutex.Lock()
	ret, specificReturn := fake.makeServicePlanPrivateReturnsOnCall[len(fake.makeServicePlanPrivateArgsForCall)]
	fake.makeServicePlanPrivateArgsForCall = append(fake.makeServicePlanPrivateArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("MakeServicePlanPrivate", []interface{}{arg1})
	fake.makeServicePlanPrivateMutex.Unlock()
	if fake.MakeServicePlanPrivateStub != nil {
		return fake.MakeServicePlanPrivateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.makeServicePlanPrivateReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) MakeServicePlanPrivateCallCount() int {
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	return len(fake.makeServicePlanPrivateArgsForCall)
}

func (fake *FakeCFClient) MakeServicePlanPrivateCalls(stub func(string) error) {
	fake.makeServicePlanPrivateMutex.Lock()
	defer fake.makeServicePlanPrivateMutex.Unlock()
	fake.MakeServicePlanPrivateStub = stub
}

func (fake *FakeCFClient) MakeServicePlanPrivateArgsForCall(i int) string {
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	argsForCall := fake.makeServicePlanPrivateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) MakeServicePlanPrivateReturns(result1 error) {
	fake.makeServicePlanPrivateMutex.Lock()
	defer fake.makeServicePlanPrivateMutex.Unlock()
	fake.MakeServicePlanPrivateStub = nil
	fake.makeServicePlanPrivateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) MakeServicePlanPrivateReturnsOnCall(i int, result1 error) {
	fake.makeServicePlanPrivateMutex.Lock()
	defer fake.makeServicePlanPrivateMutex.Unlock()
	fake.MakeServicePlanPrivateStub = nil
	if fake.makeServicePlanPrivateReturnsOnCall == nil {
		fake.makeServicePlanPrivateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeServicePlanPrivateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) MakeServicePlanPublic(arg1 string) error {
	fake.makeServicePlanPublicMutex.Lock()
	ret, specificReturn := fake.makeServicePlanPublicReturnsOnCall[len(fake.makeServicePlanPublicArgsForCall)]
	fake.makeServicePlanPublicArgsForCall = append(fake.makeServicePlanPublicArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("MakeServicePlanPublic", []interface{}{arg1})
	fake.makeServicePlanPublicMutex.Unlock()
	if fake.MakeServicePlanPublicStub != nil {
		return fake.MakeServicePlanPublicStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.makeServicePlanPublicReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) MakeServicePlanPublicCallCount() int {
	fake.makeServicePlanPublicMutex.RLock()
	defer fake.makeServicePlanPublicMutex.RUnlock()
	return len(fake.makeServicePlanPublicArgsForCall)
}

func (fake *FakeCFClient) MakeServicePlanPublicCalls(stub func(string) error) {
	fake.makeServicePlanPublicMutex.Lock()
	defer fake.makeServicePlanPublicMutex.Unlock()
	fake.MakeServicePlanPublicStub = stub
}

func (fake *FakeCFClient) MakeServicePlanPublicArgsForCall(i int) string {
	fake.makeServicePlanPublicMutex.RLock()
	defer fake.makeServicePlanPublicMutex.RUnlock()
	argsForCall := fake.makeServicePlanPublicArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) MakeServicePlanPublicReturns(result1 error) {
	fake.makeServicePlanPublicMutex.Lock()
	defer fake.makeServicePlanPublicMutex.Unlock()
	fake.MakeServicePlanPublicStub = nil
	fake.makeServicePlanPublicReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) MakeServicePlanPublicReturnsOnCall(i int, result1 error) {
	fake.makeServicePlanPublicMutex.Lock()
	defer fake.makeServicePlanPublicMutex.Unlock()
	fake.MakeServicePlanPublicStub = nil
	if fake.makeServicePlanPublicReturnsOnCall == nil {
		fake.makeServicePlanPublicReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeServicePlanPublicReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) MappingAppAndRoute(arg1 cfclient.RouteMappingRequest) (*cfclient.RouteMapping, error) {
	fake.mappingAppAndRouteMutex.Lock()
	ret, specificReturn := fake.mappingAppAndRouteReturnsOnCall[len(fake.mappingAppAndRouteArgsForCall)]
	fake.mappingAppAndRouteArgsForCall = append(fake.mappingAppAndRouteArgsForCall, struct {
		arg1 cfclient.RouteMappingRequest
	}{arg1})
	fake.recordInvocation("MappingAppAndRoute", []interface{}{arg1})
	fake.mappingAppAndRouteMutex.Unlock()
	if fake.MappingAppAndRouteStub != nil {
		return fake.MappingAppAndRouteStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.mappingAppAndRouteReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) MappingAppAndRouteCallCount() int {
	fake.mappingAppAndRouteMutex.RLock()
	defer fake.mappingAppAndRouteMutex.RUnlock()
	return len(fake.mappingAppAndRouteArgsForCall)
}

func (fake *FakeCFClient) MappingAppAndRouteCalls(stub func(cfclient.RouteMappingRequest) (*cfclient.RouteMapping, error)) {
	fake.mappingAppAndRouteMutex.Lock()
	defer fake.mappingAppAndRouteMutex.Unlock()
	fake.MappingAppAndRouteStub = stub
}

func (fake *FakeCFClient) MappingAppAndRouteArgsForCall(i int) cfclient.RouteMappingRequest {
	fake.mappingAppAndRouteMutex.RLock()
	defer fake.mappingAppAndRouteMutex.RUnlock()
	argsForCall := fake.mappingAppAndRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) MappingAppAndRouteReturns(result1 *cfclient.RouteMapping, result2 error) {
	fake.mappingAppAndRouteMutex.Lock()
	defer fake.mappingAppAndRouteMutex.Unlock()
	fake.MappingAppAndRouteStub = nil
	fake.mappingAppAndRouteReturns = struct {
		result1 *cfclient.RouteMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) MappingAppAndRouteReturnsOnCall(i int, result1 *cfclient.RouteMapping, result2 error) {
	fake.mappingAppAndRouteMutex.Lock()
	defer fake.mappingAppAndRouteMutex.Unlock()
	fake.MappingAppAndRouteStub = nil
	if fake.mappingAppAndRouteReturnsOnCall == nil {
		fake.mappingAppAndRouteReturnsOnCall = make(map[int]struct {
			result1 *cfclient.RouteMapping
			result2 error
		})
	}
	fake.mappingAppAndRouteReturnsOnCall[i] = struct {
		result1 *cfclient.RouteMapping
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) NewRequest(arg1 string, arg2 string) *cfclient.Request {
	fake.newRequestMutex.Lock()
	ret, specificReturn := fake.newRequestReturnsOnCall[len(fake.newRequestArgsForCall)]
	fake.newRequestArgsForCall = append(fake.newRequestArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("NewRequest", []interface{}{arg1, arg2})
	fake.newRequestMutex.Unlock()
	if fake.NewRequestStub != nil {
		return fake.NewRequestStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newRequestReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) NewRequestCallCount() int {
	fake.newRequestMutex.RLock()
	defer fake.newRequestMutex.RUnlock()
	return len(fake.newRequestArgsForCall)
}

func (fake *FakeCFClient) NewRequestCalls(stub func(string, string) *cfclient.Request) {
	fake.newRequestMutex.Lock()
	defer fake.newRequestMutex.Unlock()
	fake.NewRequestStub = stub
}

func (fake *FakeCFClient) NewRequestArgsForCall(i int) (string, string) {
	fake.newRequestMutex.RLock()
	defer fake.newRequestMutex.RUnlock()
	argsForCall := fake.newRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) NewRequestReturns(result1 *cfclient.Request) {
	fake.newRequestMutex.Lock()
	defer fake.newRequestMutex.Unlock()
	fake.NewRequestStub = nil
	fake.newRequestReturns = struct {
		result1 *cfclient.Request
	}{result1}
}

func (fake *FakeCFClient) NewRequestReturnsOnCall(i int, result1 *cfclient.Request) {
	fake.newRequestMutex.Lock()
	defer fake.newRequestMutex.Unlock()
	fake.NewRequestStub = nil
	if fake.newRequestReturnsOnCall == nil {
		fake.newRequestReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Request
		})
	}
	fake.newRequestReturnsOnCall[i] = struct {
		result1 *cfclient.Request
	}{result1}
}

func (fake *FakeCFClient) NewRequestWithBody(arg1 string, arg2 string, arg3 io.Reader) *cfclient.Request {
	fake.newRequestWithBodyMutex.Lock()
	ret, specificReturn := fake.newRequestWithBodyReturnsOnCall[len(fake.newRequestWithBodyArgsForCall)]
	fake.newRequestWithBodyArgsForCall = append(fake.newRequestWithBodyArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 io.Reader
	}{arg1, arg2, arg3})
	fake.recordInvocation("NewRequestWithBody", []interface{}{arg1, arg2, arg3})
	fake.newRequestWithBodyMutex.Unlock()
	if fake.NewRequestWithBodyStub != nil {
		return fake.NewRequestWithBodyStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.newRequestWithBodyReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) NewRequestWithBodyCallCount() int {
	fake.newRequestWithBodyMutex.RLock()
	defer fake.newRequestWithBodyMutex.RUnlock()
	return len(fake.newRequestWithBodyArgsForCall)
}

func (fake *FakeCFClient) NewRequestWithBodyCalls(stub func(string, string, io.Reader) *cfclient.Request) {
	fake.newRequestWithBodyMutex.Lock()
	defer fake.newRequestWithBodyMutex.Unlock()
	fake.NewRequestWithBodyStub = stub
}

func (fake *FakeCFClient) NewRequestWithBodyArgsForCall(i int) (string, string, io.Reader) {
	fake.newRequestWithBodyMutex.RLock()
	defer fake.newRequestWithBodyMutex.RUnlock()
	argsForCall := fake.newRequestWithBodyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) NewRequestWithBodyReturns(result1 *cfclient.Request) {
	fake.newRequestWithBodyMutex.Lock()
	defer fake.newRequestWithBodyMutex.Unlock()
	fake.NewRequestWithBodyStub = nil
	fake.newRequestWithBodyReturns = struct {
		result1 *cfclient.Request
	}{result1}
}

func (fake *FakeCFClient) NewRequestWithBodyReturnsOnCall(i int, result1 *cfclient.Request) {
	fake.newRequestWithBodyMutex.Lock()
	defer fake.newRequestWithBodyMutex.Unlock()
	fake.NewRequestWithBodyStub = nil
	if fake.newRequestWithBodyReturnsOnCall == nil {
		fake.newRequestWithBodyReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Request
		})
	}
	fake.newRequestWithBodyReturnsOnCall[i] = struct {
		result1 *cfclient.Request
	}{result1}
}

func (fake *FakeCFClient) OrgSpaces(arg1 string) ([]cfclient.Space, error) {
	fake.orgSpacesMutex.Lock()
	ret, specificReturn := fake.orgSpacesReturnsOnCall[len(fake.orgSpacesArgsForCall)]
	fake.orgSpacesArgsForCall = append(fake.orgSpacesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("OrgSpaces", []interface{}{arg1})
	fake.orgSpacesMutex.Unlock()
	if fake.OrgSpacesStub != nil {
		return fake.OrgSpacesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.orgSpacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) OrgSpacesCallCount() int {
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	return len(fake.orgSpacesArgsForCall)
}

func (fake *FakeCFClient) OrgSpacesCalls(stub func(string) ([]cfclient.Space, error)) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = stub
}

func (fake *FakeCFClient) OrgSpacesArgsForCall(i int) string {
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	argsForCall := fake.orgSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) OrgSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = nil
	fake.orgSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) OrgSpacesReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = nil
	if fake.orgSpacesReturnsOnCall == nil {
		fake.orgSpacesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.orgSpacesReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrg(arg1 string, arg2 string) error {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	ret, specificReturn := fake.removeIsolationSegmentFromOrgReturnsOnCall[len(fake.removeIsolationSegmentFromOrgArgsForCall)]
	fake.removeIsolationSegmentFromOrgArgsForCall = append(fake.removeIsolationSegmentFromOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveIsolationSegmentFromOrg", []interface{}{arg1, arg2})
	fake.removeIsolationSegmentFromOrgMutex.Unlock()
	if fake.RemoveIsolationSegmentFromOrgStub != nil {
		return fake.RemoveIsolationSegmentFromOrgStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeIsolationSegmentFromOrgReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgCallCount() int {
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	return len(fake.removeIsolationSegmentFromOrgArgsForCall)
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgCalls(stub func(string, string) error) {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	defer fake.removeIsolationSegmentFromOrgMutex.Unlock()
	fake.RemoveIsolationSegmentFromOrgStub = stub
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgArgsForCall(i int) (string, string) {
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	argsForCall := fake.removeIsolationSegmentFromOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgReturns(result1 error) {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	defer fake.removeIsolationSegmentFromOrgMutex.Unlock()
	fake.RemoveIsolationSegmentFromOrgStub = nil
	fake.removeIsolationSegmentFromOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgReturnsOnCall(i int, result1 error) {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	defer fake.removeIsolationSegmentFromOrgMutex.Unlock()
	fake.RemoveIsolationSegmentFromOrgStub = nil
	if fake.removeIsolationSegmentFromOrgReturnsOnCall == nil {
		fake.removeIsolationSegmentFromOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeIsolationSegmentFromOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpace(arg1 string, arg2 string) error {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	ret, specificReturn := fake.removeIsolationSegmentFromSpaceReturnsOnCall[len(fake.removeIsolationSegmentFromSpaceArgsForCall)]
	fake.removeIsolationSegmentFromSpaceArgsForCall = append(fake.removeIsolationSegmentFromSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveIsolationSegmentFromSpace", []interface{}{arg1, arg2})
	fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	if fake.RemoveIsolationSegmentFromSpaceStub != nil {
		return fake.RemoveIsolationSegmentFromSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeIsolationSegmentFromSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceCallCount() int {
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	return len(fake.removeIsolationSegmentFromSpaceArgsForCall)
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceCalls(stub func(string, string) error) {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	defer fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	fake.RemoveIsolationSegmentFromSpaceStub = stub
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceArgsForCall(i int) (string, string) {
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	argsForCall := fake.removeIsolationSegmentFromSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceReturns(result1 error) {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	defer fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	fake.RemoveIsolationSegmentFromSpaceStub = nil
	fake.removeIsolationSegmentFromSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceReturnsOnCall(i int, result1 error) {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	defer fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	fake.RemoveIsolationSegmentFromSpaceStub = nil
	if fake.removeIsolationSegmentFromSpaceReturnsOnCall == nil {
		fake.removeIsolationSegmentFromSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeIsolationSegmentFromSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditor(arg1 string, arg2 string) error {
	fake.removeOrgAuditorMutex.Lock()
	ret, specificReturn := fake.removeOrgAuditorReturnsOnCall[len(fake.removeOrgAuditorArgsForCall)]
	fake.removeOrgAuditorArgsForCall = append(fake.removeOrgAuditorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveOrgAuditor", []interface{}{arg1, arg2})
	fake.removeOrgAuditorMutex.Unlock()
	if fake.RemoveOrgAuditorStub != nil {
		return fake.RemoveOrgAuditorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgAuditorReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgAuditorCallCount() int {
	fake.removeOrgAuditorMutex.RLock()
	defer fake.removeOrgAuditorMutex.RUnlock()
	return len(fake.removeOrgAuditorArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgAuditorCalls(stub func(string, string) error) {
	fake.removeOrgAuditorMutex.Lock()
	defer fake.removeOrgAuditorMutex.Unlock()
	fake.RemoveOrgAuditorStub = stub
}

func (fake *FakeCFClient) RemoveOrgAuditorArgsForCall(i int) (string, string) {
	fake.removeOrgAuditorMutex.RLock()
	defer fake.removeOrgAuditorMutex.RUnlock()
	argsForCall := fake.removeOrgAuditorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveOrgAuditorReturns(result1 error) {
	fake.removeOrgAuditorMutex.Lock()
	defer fake.removeOrgAuditorMutex.Unlock()
	fake.RemoveOrgAuditorStub = nil
	fake.removeOrgAuditorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditorReturnsOnCall(i int, result1 error) {
	fake.removeOrgAuditorMutex.Lock()
	defer fake.removeOrgAuditorMutex.Unlock()
	fake.RemoveOrgAuditorStub = nil
	if fake.removeOrgAuditorReturnsOnCall == nil {
		fake.removeOrgAuditorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgAuditorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsername(arg1 string, arg2 string) error {
	fake.removeOrgAuditorByUsernameMutex.Lock()
	ret, specificReturn := fake.removeOrgAuditorByUsernameReturnsOnCall[len(fake.removeOrgAuditorByUsernameArgsForCall)]
	fake.removeOrgAuditorByUsernameArgsForCall = append(fake.removeOrgAuditorByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveOrgAuditorByUsername", []interface{}{arg1, arg2})
	fake.removeOrgAuditorByUsernameMutex.Unlock()
	if fake.RemoveOrgAuditorByUsernameStub != nil {
		return fake.RemoveOrgAuditorByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgAuditorByUsernameReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameCallCount() int {
	fake.removeOrgAuditorByUsernameMutex.RLock()
	defer fake.removeOrgAuditorByUsernameMutex.RUnlock()
	return len(fake.removeOrgAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameCalls(stub func(string, string) error) {
	fake.removeOrgAuditorByUsernameMutex.Lock()
	defer fake.removeOrgAuditorByUsernameMutex.Unlock()
	fake.RemoveOrgAuditorByUsernameStub = stub
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.removeOrgAuditorByUsernameMutex.RLock()
	defer fake.removeOrgAuditorByUsernameMutex.RUnlock()
	argsForCall := fake.removeOrgAuditorByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameReturns(result1 error) {
	fake.removeOrgAuditorByUsernameMutex.Lock()
	defer fake.removeOrgAuditorByUsernameMutex.Unlock()
	fake.RemoveOrgAuditorByUsernameStub = nil
	fake.removeOrgAuditorByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameReturnsOnCall(i int, result1 error) {
	fake.removeOrgAuditorByUsernameMutex.Lock()
	defer fake.removeOrgAuditorByUsernameMutex.Unlock()
	fake.RemoveOrgAuditorByUsernameStub = nil
	if fake.removeOrgAuditorByUsernameReturnsOnCall == nil {
		fake.removeOrgAuditorByUsernameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgAuditorByUsernameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) error {
	fake.removeOrgAuditorByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.removeOrgAuditorByUsernameAndOriginReturnsOnCall[len(fake.removeOrgAuditorByUsernameAndOriginArgsForCall)]
	fake.removeOrgAuditorByUsernameAndOriginArgsForCall = append(fake.removeOrgAuditorByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveOrgAuditorByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.removeOrgAuditorByUsernameAndOriginMutex.Unlock()
	if fake.RemoveOrgAuditorByUsernameAndOriginStub != nil {
		return fake.RemoveOrgAuditorByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgAuditorByUsernameAndOriginReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOriginCallCount() int {
	fake.removeOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeOrgAuditorByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOriginCalls(stub func(string, string, string) error) {
	fake.removeOrgAuditorByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgAuditorByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.removeOrgAuditorByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOriginReturns(result1 error) {
	fake.removeOrgAuditorByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgAuditorByUsernameAndOriginStub = nil
	fake.removeOrgAuditorByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgAuditorByUsernameAndOriginReturnsOnCall(i int, result1 error) {
	fake.removeOrgAuditorByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgAuditorByUsernameAndOriginStub = nil
	if fake.removeOrgAuditorByUsernameAndOriginReturnsOnCall == nil {
		fake.removeOrgAuditorByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgAuditorByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManager(arg1 string, arg2 string) error {
	fake.removeOrgBillingManagerMutex.Lock()
	ret, specificReturn := fake.removeOrgBillingManagerReturnsOnCall[len(fake.removeOrgBillingManagerArgsForCall)]
	fake.removeOrgBillingManagerArgsForCall = append(fake.removeOrgBillingManagerArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveOrgBillingManager", []interface{}{arg1, arg2})
	fake.removeOrgBillingManagerMutex.Unlock()
	if fake.RemoveOrgBillingManagerStub != nil {
		return fake.RemoveOrgBillingManagerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgBillingManagerReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgBillingManagerCallCount() int {
	fake.removeOrgBillingManagerMutex.RLock()
	defer fake.removeOrgBillingManagerMutex.RUnlock()
	return len(fake.removeOrgBillingManagerArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgBillingManagerCalls(stub func(string, string) error) {
	fake.removeOrgBillingManagerMutex.Lock()
	defer fake.removeOrgBillingManagerMutex.Unlock()
	fake.RemoveOrgBillingManagerStub = stub
}

func (fake *FakeCFClient) RemoveOrgBillingManagerArgsForCall(i int) (string, string) {
	fake.removeOrgBillingManagerMutex.RLock()
	defer fake.removeOrgBillingManagerMutex.RUnlock()
	argsForCall := fake.removeOrgBillingManagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveOrgBillingManagerReturns(result1 error) {
	fake.removeOrgBillingManagerMutex.Lock()
	defer fake.removeOrgBillingManagerMutex.Unlock()
	fake.RemoveOrgBillingManagerStub = nil
	fake.removeOrgBillingManagerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerReturnsOnCall(i int, result1 error) {
	fake.removeOrgBillingManagerMutex.Lock()
	defer fake.removeOrgBillingManagerMutex.Unlock()
	fake.RemoveOrgBillingManagerStub = nil
	if fake.removeOrgBillingManagerReturnsOnCall == nil {
		fake.removeOrgBillingManagerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgBillingManagerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsername(arg1 string, arg2 string) error {
	fake.removeOrgBillingManagerByUsernameMutex.Lock()
	ret, specificReturn := fake.removeOrgBillingManagerByUsernameReturnsOnCall[len(fake.removeOrgBillingManagerByUsernameArgsForCall)]
	fake.removeOrgBillingManagerByUsernameArgsForCall = append(fake.removeOrgBillingManagerByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveOrgBillingManagerByUsername", []interface{}{arg1, arg2})
	fake.removeOrgBillingManagerByUsernameMutex.Unlock()
	if fake.RemoveOrgBillingManagerByUsernameStub != nil {
		return fake.RemoveOrgBillingManagerByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgBillingManagerByUsernameReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameCallCount() int {
	fake.removeOrgBillingManagerByUsernameMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameMutex.RUnlock()
	return len(fake.removeOrgBillingManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameCalls(stub func(string, string) error) {
	fake.removeOrgBillingManagerByUsernameMutex.Lock()
	defer fake.removeOrgBillingManagerByUsernameMutex.Unlock()
	fake.RemoveOrgBillingManagerByUsernameStub = stub
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameArgsForCall(i int) (string, string) {
	fake.removeOrgBillingManagerByUsernameMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameMutex.RUnlock()
	argsForCall := fake.removeOrgBillingManagerByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameReturns(result1 error) {
	fake.removeOrgBillingManagerByUsernameMutex.Lock()
	defer fake.removeOrgBillingManagerByUsernameMutex.Unlock()
	fake.RemoveOrgBillingManagerByUsernameStub = nil
	fake.removeOrgBillingManagerByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameReturnsOnCall(i int, result1 error) {
	fake.removeOrgBillingManagerByUsernameMutex.Lock()
	defer fake.removeOrgBillingManagerByUsernameMutex.Unlock()
	fake.RemoveOrgBillingManagerByUsernameStub = nil
	if fake.removeOrgBillingManagerByUsernameReturnsOnCall == nil {
		fake.removeOrgBillingManagerByUsernameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgBillingManagerByUsernameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) error {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.removeOrgBillingManagerByUsernameAndOriginReturnsOnCall[len(fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall)]
	fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall = append(fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveOrgBillingManagerByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	if fake.RemoveOrgBillingManagerByUsernameAndOriginStub != nil {
		return fake.RemoveOrgBillingManagerByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgBillingManagerByUsernameAndOriginReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOriginCallCount() int {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOriginCalls(stub func(string, string, string) error) {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgBillingManagerByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.removeOrgBillingManagerByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOriginReturns(result1 error) {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgBillingManagerByUsernameAndOriginStub = nil
	fake.removeOrgBillingManagerByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgBillingManagerByUsernameAndOriginReturnsOnCall(i int, result1 error) {
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgBillingManagerByUsernameAndOriginStub = nil
	if fake.removeOrgBillingManagerByUsernameAndOriginReturnsOnCall == nil {
		fake.removeOrgBillingManagerByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgBillingManagerByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManager(arg1 string, arg2 string) error {
	fake.removeOrgManagerMutex.Lock()
	ret, specificReturn := fake.removeOrgManagerReturnsOnCall[len(fake.removeOrgManagerArgsForCall)]
	fake.removeOrgManagerArgsForCall = append(fake.removeOrgManagerArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveOrgManager", []interface{}{arg1, arg2})
	fake.removeOrgManagerMutex.Unlock()
	if fake.RemoveOrgManagerStub != nil {
		return fake.RemoveOrgManagerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgManagerReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgManagerCallCount() int {
	fake.removeOrgManagerMutex.RLock()
	defer fake.removeOrgManagerMutex.RUnlock()
	return len(fake.removeOrgManagerArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgManagerCalls(stub func(string, string) error) {
	fake.removeOrgManagerMutex.Lock()
	defer fake.removeOrgManagerMutex.Unlock()
	fake.RemoveOrgManagerStub = stub
}

func (fake *FakeCFClient) RemoveOrgManagerArgsForCall(i int) (string, string) {
	fake.removeOrgManagerMutex.RLock()
	defer fake.removeOrgManagerMutex.RUnlock()
	argsForCall := fake.removeOrgManagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveOrgManagerReturns(result1 error) {
	fake.removeOrgManagerMutex.Lock()
	defer fake.removeOrgManagerMutex.Unlock()
	fake.RemoveOrgManagerStub = nil
	fake.removeOrgManagerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManagerReturnsOnCall(i int, result1 error) {
	fake.removeOrgManagerMutex.Lock()
	defer fake.removeOrgManagerMutex.Unlock()
	fake.RemoveOrgManagerStub = nil
	if fake.removeOrgManagerReturnsOnCall == nil {
		fake.removeOrgManagerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgManagerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManagerByUsername(arg1 string, arg2 string) error {
	fake.removeOrgManagerByUsernameMutex.Lock()
	ret, specificReturn := fake.removeOrgManagerByUsernameReturnsOnCall[len(fake.removeOrgManagerByUsernameArgsForCall)]
	fake.removeOrgManagerByUsernameArgsForCall = append(fake.removeOrgManagerByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveOrgManagerByUsername", []interface{}{arg1, arg2})
	fake.removeOrgManagerByUsernameMutex.Unlock()
	if fake.RemoveOrgManagerByUsernameStub != nil {
		return fake.RemoveOrgManagerByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgManagerByUsernameReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameCallCount() int {
	fake.removeOrgManagerByUsernameMutex.RLock()
	defer fake.removeOrgManagerByUsernameMutex.RUnlock()
	return len(fake.removeOrgManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameCalls(stub func(string, string) error) {
	fake.removeOrgManagerByUsernameMutex.Lock()
	defer fake.removeOrgManagerByUsernameMutex.Unlock()
	fake.RemoveOrgManagerByUsernameStub = stub
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameArgsForCall(i int) (string, string) {
	fake.removeOrgManagerByUsernameMutex.RLock()
	defer fake.removeOrgManagerByUsernameMutex.RUnlock()
	argsForCall := fake.removeOrgManagerByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameReturns(result1 error) {
	fake.removeOrgManagerByUsernameMutex.Lock()
	defer fake.removeOrgManagerByUsernameMutex.Unlock()
	fake.RemoveOrgManagerByUsernameStub = nil
	fake.removeOrgManagerByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameReturnsOnCall(i int, result1 error) {
	fake.removeOrgManagerByUsernameMutex.Lock()
	defer fake.removeOrgManagerByUsernameMutex.Unlock()
	fake.RemoveOrgManagerByUsernameStub = nil
	if fake.removeOrgManagerByUsernameReturnsOnCall == nil {
		fake.removeOrgManagerByUsernameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgManagerByUsernameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) error {
	fake.removeOrgManagerByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.removeOrgManagerByUsernameAndOriginReturnsOnCall[len(fake.removeOrgManagerByUsernameAndOriginArgsForCall)]
	fake.removeOrgManagerByUsernameAndOriginArgsForCall = append(fake.removeOrgManagerByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveOrgManagerByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.removeOrgManagerByUsernameAndOriginMutex.Unlock()
	if fake.RemoveOrgManagerByUsernameAndOriginStub != nil {
		return fake.RemoveOrgManagerByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgManagerByUsernameAndOriginReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOriginCallCount() int {
	fake.removeOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeOrgManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOriginCalls(stub func(string, string, string) error) {
	fake.removeOrgManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgManagerByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.removeOrgManagerByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOriginReturns(result1 error) {
	fake.removeOrgManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgManagerByUsernameAndOriginStub = nil
	fake.removeOrgManagerByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgManagerByUsernameAndOriginReturnsOnCall(i int, result1 error) {
	fake.removeOrgManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgManagerByUsernameAndOriginStub = nil
	if fake.removeOrgManagerByUsernameAndOriginReturnsOnCall == nil {
		fake.removeOrgManagerByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgManagerByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgUser(arg1 string, arg2 string) error {
	fake.removeOrgUserMutex.Lock()
	ret, specificReturn := fake.removeOrgUserReturnsOnCall[len(fake.removeOrgUserArgsForCall)]
	fake.removeOrgUserArgsForCall = append(fake.removeOrgUserArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveOrgUser", []interface{}{arg1, arg2})
	fake.removeOrgUserMutex.Unlock()
	if fake.RemoveOrgUserStub != nil {
		return fake.RemoveOrgUserStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgUserReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgUserCallCount() int {
	fake.removeOrgUserMutex.RLock()
	defer fake.removeOrgUserMutex.RUnlock()
	return len(fake.removeOrgUserArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgUserCalls(stub func(string, string) error) {
	fake.removeOrgUserMutex.Lock()
	defer fake.removeOrgUserMutex.Unlock()
	fake.RemoveOrgUserStub = stub
}

func (fake *FakeCFClient) RemoveOrgUserArgsForCall(i int) (string, string) {
	fake.removeOrgUserMutex.RLock()
	defer fake.removeOrgUserMutex.RUnlock()
	argsForCall := fake.removeOrgUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveOrgUserReturns(result1 error) {
	fake.removeOrgUserMutex.Lock()
	defer fake.removeOrgUserMutex.Unlock()
	fake.RemoveOrgUserStub = nil
	fake.removeOrgUserReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgUserReturnsOnCall(i int, result1 error) {
	fake.removeOrgUserMutex.Lock()
	defer fake.removeOrgUserMutex.Unlock()
	fake.RemoveOrgUserStub = nil
	if fake.removeOrgUserReturnsOnCall == nil {
		fake.removeOrgUserReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgUserReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgUserByUsername(arg1 string, arg2 string) error {
	fake.removeOrgUserByUsernameMutex.Lock()
	ret, specificReturn := fake.removeOrgUserByUsernameReturnsOnCall[len(fake.removeOrgUserByUsernameArgsForCall)]
	fake.removeOrgUserByUsernameArgsForCall = append(fake.removeOrgUserByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveOrgUserByUsername", []interface{}{arg1, arg2})
	fake.removeOrgUserByUsernameMutex.Unlock()
	if fake.RemoveOrgUserByUsernameStub != nil {
		return fake.RemoveOrgUserByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgUserByUsernameReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameCallCount() int {
	fake.removeOrgUserByUsernameMutex.RLock()
	defer fake.removeOrgUserByUsernameMutex.RUnlock()
	return len(fake.removeOrgUserByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameCalls(stub func(string, string) error) {
	fake.removeOrgUserByUsernameMutex.Lock()
	defer fake.removeOrgUserByUsernameMutex.Unlock()
	fake.RemoveOrgUserByUsernameStub = stub
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameArgsForCall(i int) (string, string) {
	fake.removeOrgUserByUsernameMutex.RLock()
	defer fake.removeOrgUserByUsernameMutex.RUnlock()
	argsForCall := fake.removeOrgUserByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameReturns(result1 error) {
	fake.removeOrgUserByUsernameMutex.Lock()
	defer fake.removeOrgUserByUsernameMutex.Unlock()
	fake.RemoveOrgUserByUsernameStub = nil
	fake.removeOrgUserByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameReturnsOnCall(i int, result1 error) {
	fake.removeOrgUserByUsernameMutex.Lock()
	defer fake.removeOrgUserByUsernameMutex.Unlock()
	fake.RemoveOrgUserByUsernameStub = nil
	if fake.removeOrgUserByUsernameReturnsOnCall == nil {
		fake.removeOrgUserByUsernameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgUserByUsernameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) error {
	fake.removeOrgUserByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.removeOrgUserByUsernameAndOriginReturnsOnCall[len(fake.removeOrgUserByUsernameAndOriginArgsForCall)]
	fake.removeOrgUserByUsernameAndOriginArgsForCall = append(fake.removeOrgUserByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveOrgUserByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.removeOrgUserByUsernameAndOriginMutex.Unlock()
	if fake.RemoveOrgUserByUsernameAndOriginStub != nil {
		return fake.RemoveOrgUserByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeOrgUserByUsernameAndOriginReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOriginCallCount() int {
	fake.removeOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeOrgUserByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOriginCalls(stub func(string, string, string) error) {
	fake.removeOrgUserByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgUserByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.removeOrgUserByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOriginReturns(result1 error) {
	fake.removeOrgUserByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgUserByUsernameAndOriginStub = nil
	fake.removeOrgUserByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgUserByUsernameAndOriginReturnsOnCall(i int, result1 error) {
	fake.removeOrgUserByUsernameAndOriginMutex.Lock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.Unlock()
	fake.RemoveOrgUserByUsernameAndOriginStub = nil
	if fake.removeOrgUserByUsernameAndOriginReturnsOnCall == nil {
		fake.removeOrgUserByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgUserByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceAuditor(arg1 string, arg2 string) error {
	fake.removeSpaceAuditorMutex.Lock()
	ret, specificReturn := fake.removeSpaceAuditorReturnsOnCall[len(fake.removeSpaceAuditorArgsForCall)]
	fake.removeSpaceAuditorArgsForCall = append(fake.removeSpaceAuditorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveSpaceAuditor", []interface{}{arg1, arg2})
	fake.removeSpaceAuditorMutex.Unlock()
	if fake.RemoveSpaceAuditorStub != nil {
		return fake.RemoveSpaceAuditorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceAuditorReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceAuditorCallCount() int {
	fake.removeSpaceAuditorMutex.RLock()
	defer fake.removeSpaceAuditorMutex.RUnlock()
	return len(fake.removeSpaceAuditorArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceAuditorCalls(stub func(string, string) error) {
	fake.removeSpaceAuditorMutex.Lock()
	defer fake.removeSpaceAuditorMutex.Unlock()
	fake.RemoveSpaceAuditorStub = stub
}

func (fake *FakeCFClient) RemoveSpaceAuditorArgsForCall(i int) (string, string) {
	fake.removeSpaceAuditorMutex.RLock()
	defer fake.removeSpaceAuditorMutex.RUnlock()
	argsForCall := fake.removeSpaceAuditorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveSpaceAuditorReturns(result1 error) {
	fake.removeSpaceAuditorMutex.Lock()
	defer fake.removeSpaceAuditorMutex.Unlock()
	fake.RemoveSpaceAuditorStub = nil
	fake.removeSpaceAuditorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceAuditorReturnsOnCall(i int, result1 error) {
	fake.removeSpaceAuditorMutex.Lock()
	defer fake.removeSpaceAuditorMutex.Unlock()
	fake.RemoveSpaceAuditorStub = nil
	if fake.removeSpaceAuditorReturnsOnCall == nil {
		fake.removeSpaceAuditorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceAuditorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsername(arg1 string, arg2 string) error {
	fake.removeSpaceAuditorByUsernameMutex.Lock()
	ret, specificReturn := fake.removeSpaceAuditorByUsernameReturnsOnCall[len(fake.removeSpaceAuditorByUsernameArgsForCall)]
	fake.removeSpaceAuditorByUsernameArgsForCall = append(fake.removeSpaceAuditorByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveSpaceAuditorByUsername", []interface{}{arg1, arg2})
	fake.removeSpaceAuditorByUsernameMutex.Unlock()
	if fake.RemoveSpaceAuditorByUsernameStub != nil {
		return fake.RemoveSpaceAuditorByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceAuditorByUsernameReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameCallCount() int {
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	return len(fake.removeSpaceAuditorByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameCalls(stub func(string, string) error) {
	fake.removeSpaceAuditorByUsernameMutex.Lock()
	defer fake.removeSpaceAuditorByUsernameMutex.Unlock()
	fake.RemoveSpaceAuditorByUsernameStub = stub
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	argsForCall := fake.removeSpaceAuditorByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameReturns(result1 error) {
	fake.removeSpaceAuditorByUsernameMutex.Lock()
	defer fake.removeSpaceAuditorByUsernameMutex.Unlock()
	fake.RemoveSpaceAuditorByUsernameStub = nil
	fake.removeSpaceAuditorByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameReturnsOnCall(i int, result1 error) {
	fake.removeSpaceAuditorByUsernameMutex.Lock()
	defer fake.removeSpaceAuditorByUsernameMutex.Unlock()
	fake.RemoveSpaceAuditorByUsernameStub = nil
	if fake.removeSpaceAuditorByUsernameReturnsOnCall == nil {
		fake.removeSpaceAuditorByUsernameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceAuditorByUsernameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) error {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.removeSpaceAuditorByUsernameAndOriginReturnsOnCall[len(fake.removeSpaceAuditorByUsernameAndOriginArgsForCall)]
	fake.removeSpaceAuditorByUsernameAndOriginArgsForCall = append(fake.removeSpaceAuditorByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveSpaceAuditorByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.removeSpaceAuditorByUsernameAndOriginMutex.Unlock()
	if fake.RemoveSpaceAuditorByUsernameAndOriginStub != nil {
		return fake.RemoveSpaceAuditorByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceAuditorByUsernameAndOriginReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOriginCallCount() int {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeSpaceAuditorByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOriginCalls(stub func(string, string, string) error) {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceAuditorByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.removeSpaceAuditorByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOriginReturns(result1 error) {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceAuditorByUsernameAndOriginStub = nil
	fake.removeSpaceAuditorByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceAuditorByUsernameAndOriginReturnsOnCall(i int, result1 error) {
	fake.removeSpaceAuditorByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceAuditorByUsernameAndOriginStub = nil
	if fake.removeSpaceAuditorByUsernameAndOriginReturnsOnCall == nil {
		fake.removeSpaceAuditorByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceAuditorByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloper(arg1 string, arg2 string) error {
	fake.removeSpaceDeveloperMutex.Lock()
	ret, specificReturn := fake.removeSpaceDeveloperReturnsOnCall[len(fake.removeSpaceDeveloperArgsForCall)]
	fake.removeSpaceDeveloperArgsForCall = append(fake.removeSpaceDeveloperArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveSpaceDeveloper", []interface{}{arg1, arg2})
	fake.removeSpaceDeveloperMutex.Unlock()
	if fake.RemoveSpaceDeveloperStub != nil {
		return fake.RemoveSpaceDeveloperStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceDeveloperReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceDeveloperCallCount() int {
	fake.removeSpaceDeveloperMutex.RLock()
	defer fake.removeSpaceDeveloperMutex.RUnlock()
	return len(fake.removeSpaceDeveloperArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceDeveloperCalls(stub func(string, string) error) {
	fake.removeSpaceDeveloperMutex.Lock()
	defer fake.removeSpaceDeveloperMutex.Unlock()
	fake.RemoveSpaceDeveloperStub = stub
}

func (fake *FakeCFClient) RemoveSpaceDeveloperArgsForCall(i int) (string, string) {
	fake.removeSpaceDeveloperMutex.RLock()
	defer fake.removeSpaceDeveloperMutex.RUnlock()
	argsForCall := fake.removeSpaceDeveloperArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveSpaceDeveloperReturns(result1 error) {
	fake.removeSpaceDeveloperMutex.Lock()
	defer fake.removeSpaceDeveloperMutex.Unlock()
	fake.RemoveSpaceDeveloperStub = nil
	fake.removeSpaceDeveloperReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperReturnsOnCall(i int, result1 error) {
	fake.removeSpaceDeveloperMutex.Lock()
	defer fake.removeSpaceDeveloperMutex.Unlock()
	fake.RemoveSpaceDeveloperStub = nil
	if fake.removeSpaceDeveloperReturnsOnCall == nil {
		fake.removeSpaceDeveloperReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceDeveloperReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsername(arg1 string, arg2 string) error {
	fake.removeSpaceDeveloperByUsernameMutex.Lock()
	ret, specificReturn := fake.removeSpaceDeveloperByUsernameReturnsOnCall[len(fake.removeSpaceDeveloperByUsernameArgsForCall)]
	fake.removeSpaceDeveloperByUsernameArgsForCall = append(fake.removeSpaceDeveloperByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveSpaceDeveloperByUsername", []interface{}{arg1, arg2})
	fake.removeSpaceDeveloperByUsernameMutex.Unlock()
	if fake.RemoveSpaceDeveloperByUsernameStub != nil {
		return fake.RemoveSpaceDeveloperByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceDeveloperByUsernameReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameCallCount() int {
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	return len(fake.removeSpaceDeveloperByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameCalls(stub func(string, string) error) {
	fake.removeSpaceDeveloperByUsernameMutex.Lock()
	defer fake.removeSpaceDeveloperByUsernameMutex.Unlock()
	fake.RemoveSpaceDeveloperByUsernameStub = stub
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	argsForCall := fake.removeSpaceDeveloperByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameReturns(result1 error) {
	fake.removeSpaceDeveloperByUsernameMutex.Lock()
	defer fake.removeSpaceDeveloperByUsernameMutex.Unlock()
	fake.RemoveSpaceDeveloperByUsernameStub = nil
	fake.removeSpaceDeveloperByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameReturnsOnCall(i int, result1 error) {
	fake.removeSpaceDeveloperByUsernameMutex.Lock()
	defer fake.removeSpaceDeveloperByUsernameMutex.Unlock()
	fake.RemoveSpaceDeveloperByUsernameStub = nil
	if fake.removeSpaceDeveloperByUsernameReturnsOnCall == nil {
		fake.removeSpaceDeveloperByUsernameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceDeveloperByUsernameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) error {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.removeSpaceDeveloperByUsernameAndOriginReturnsOnCall[len(fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall)]
	fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall = append(fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveSpaceDeveloperByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	if fake.RemoveSpaceDeveloperByUsernameAndOriginStub != nil {
		return fake.RemoveSpaceDeveloperByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceDeveloperByUsernameAndOriginReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOriginCallCount() int {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOriginCalls(stub func(string, string, string) error) {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceDeveloperByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.removeSpaceDeveloperByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOriginReturns(result1 error) {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceDeveloperByUsernameAndOriginStub = nil
	fake.removeSpaceDeveloperByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceDeveloperByUsernameAndOriginReturnsOnCall(i int, result1 error) {
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceDeveloperByUsernameAndOriginStub = nil
	if fake.removeSpaceDeveloperByUsernameAndOriginReturnsOnCall == nil {
		fake.removeSpaceDeveloperByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceDeveloperByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManager(arg1 string, arg2 string) error {
	fake.removeSpaceManagerMutex.Lock()
	ret, specificReturn := fake.removeSpaceManagerReturnsOnCall[len(fake.removeSpaceManagerArgsForCall)]
	fake.removeSpaceManagerArgsForCall = append(fake.removeSpaceManagerArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveSpaceManager", []interface{}{arg1, arg2})
	fake.removeSpaceManagerMutex.Unlock()
	if fake.RemoveSpaceManagerStub != nil {
		return fake.RemoveSpaceManagerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceManagerReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceManagerCallCount() int {
	fake.removeSpaceManagerMutex.RLock()
	defer fake.removeSpaceManagerMutex.RUnlock()
	return len(fake.removeSpaceManagerArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceManagerCalls(stub func(string, string) error) {
	fake.removeSpaceManagerMutex.Lock()
	defer fake.removeSpaceManagerMutex.Unlock()
	fake.RemoveSpaceManagerStub = stub
}

func (fake *FakeCFClient) RemoveSpaceManagerArgsForCall(i int) (string, string) {
	fake.removeSpaceManagerMutex.RLock()
	defer fake.removeSpaceManagerMutex.RUnlock()
	argsForCall := fake.removeSpaceManagerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveSpaceManagerReturns(result1 error) {
	fake.removeSpaceManagerMutex.Lock()
	defer fake.removeSpaceManagerMutex.Unlock()
	fake.RemoveSpaceManagerStub = nil
	fake.removeSpaceManagerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManagerReturnsOnCall(i int, result1 error) {
	fake.removeSpaceManagerMutex.Lock()
	defer fake.removeSpaceManagerMutex.Unlock()
	fake.RemoveSpaceManagerStub = nil
	if fake.removeSpaceManagerReturnsOnCall == nil {
		fake.removeSpaceManagerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceManagerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsername(arg1 string, arg2 string) error {
	fake.removeSpaceManagerByUsernameMutex.Lock()
	ret, specificReturn := fake.removeSpaceManagerByUsernameReturnsOnCall[len(fake.removeSpaceManagerByUsernameArgsForCall)]
	fake.removeSpaceManagerByUsernameArgsForCall = append(fake.removeSpaceManagerByUsernameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RemoveSpaceManagerByUsername", []interface{}{arg1, arg2})
	fake.removeSpaceManagerByUsernameMutex.Unlock()
	if fake.RemoveSpaceManagerByUsernameStub != nil {
		return fake.RemoveSpaceManagerByUsernameStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceManagerByUsernameReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameCallCount() int {
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	return len(fake.removeSpaceManagerByUsernameArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameCalls(stub func(string, string) error) {
	fake.removeSpaceManagerByUsernameMutex.Lock()
	defer fake.removeSpaceManagerByUsernameMutex.Unlock()
	fake.RemoveSpaceManagerByUsernameStub = stub
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameArgsForCall(i int) (string, string) {
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	argsForCall := fake.removeSpaceManagerByUsernameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameReturns(result1 error) {
	fake.removeSpaceManagerByUsernameMutex.Lock()
	defer fake.removeSpaceManagerByUsernameMutex.Unlock()
	fake.RemoveSpaceManagerByUsernameStub = nil
	fake.removeSpaceManagerByUsernameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameReturnsOnCall(i int, result1 error) {
	fake.removeSpaceManagerByUsernameMutex.Lock()
	defer fake.removeSpaceManagerByUsernameMutex.Unlock()
	fake.RemoveSpaceManagerByUsernameStub = nil
	if fake.removeSpaceManagerByUsernameReturnsOnCall == nil {
		fake.removeSpaceManagerByUsernameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceManagerByUsernameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOrigin(arg1 string, arg2 string, arg3 string) error {
	fake.removeSpaceManagerByUsernameAndOriginMutex.Lock()
	ret, specificReturn := fake.removeSpaceManagerByUsernameAndOriginReturnsOnCall[len(fake.removeSpaceManagerByUsernameAndOriginArgsForCall)]
	fake.removeSpaceManagerByUsernameAndOriginArgsForCall = append(fake.removeSpaceManagerByUsernameAndOriginArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RemoveSpaceManagerByUsernameAndOrigin", []interface{}{arg1, arg2, arg3})
	fake.removeSpaceManagerByUsernameAndOriginMutex.Unlock()
	if fake.RemoveSpaceManagerByUsernameAndOriginStub != nil {
		return fake.RemoveSpaceManagerByUsernameAndOriginStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeSpaceManagerByUsernameAndOriginReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOriginCallCount() int {
	fake.removeSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.RUnlock()
	return len(fake.removeSpaceManagerByUsernameAndOriginArgsForCall)
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOriginCalls(stub func(string, string, string) error) {
	fake.removeSpaceManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceManagerByUsernameAndOriginStub = stub
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOriginArgsForCall(i int) (string, string, string) {
	fake.removeSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.RUnlock()
	argsForCall := fake.removeSpaceManagerByUsernameAndOriginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOriginReturns(result1 error) {
	fake.removeSpaceManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceManagerByUsernameAndOriginStub = nil
	fake.removeSpaceManagerByUsernameAndOriginReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveSpaceManagerByUsernameAndOriginReturnsOnCall(i int, result1 error) {
	fake.removeSpaceManagerByUsernameAndOriginMutex.Lock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.Unlock()
	fake.RemoveSpaceManagerByUsernameAndOriginStub = nil
	if fake.removeSpaceManagerByUsernameAndOriginReturnsOnCall == nil {
		fake.removeSpaceManagerByUsernameAndOriginReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeSpaceManagerByUsernameAndOriginReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrg(arg1 string) error {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	ret, specificReturn := fake.resetDefaultIsolationSegmentForOrgReturnsOnCall[len(fake.resetDefaultIsolationSegmentForOrgArgsForCall)]
	fake.resetDefaultIsolationSegmentForOrgArgsForCall = append(fake.resetDefaultIsolationSegmentForOrgArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ResetDefaultIsolationSegmentForOrg", []interface{}{arg1})
	fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	if fake.ResetDefaultIsolationSegmentForOrgStub != nil {
		return fake.ResetDefaultIsolationSegmentForOrgStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.resetDefaultIsolationSegmentForOrgReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgCallCount() int {
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	return len(fake.resetDefaultIsolationSegmentForOrgArgsForCall)
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgCalls(stub func(string) error) {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	fake.ResetDefaultIsolationSegmentForOrgStub = stub
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgArgsForCall(i int) string {
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	argsForCall := fake.resetDefaultIsolationSegmentForOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgReturns(result1 error) {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	fake.ResetDefaultIsolationSegmentForOrgStub = nil
	fake.resetDefaultIsolationSegmentForOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgReturnsOnCall(i int, result1 error) {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	fake.ResetDefaultIsolationSegmentForOrgStub = nil
	if fake.resetDefaultIsolationSegmentForOrgReturnsOnCall == nil {
		fake.resetDefaultIsolationSegmentForOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetDefaultIsolationSegmentForOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpace(arg1 string) error {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	ret, specificReturn := fake.resetIsolationSegmentForSpaceReturnsOnCall[len(fake.resetIsolationSegmentForSpaceArgsForCall)]
	fake.resetIsolationSegmentForSpaceArgsForCall = append(fake.resetIsolationSegmentForSpaceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ResetIsolationSegmentForSpace", []interface{}{arg1})
	fake.resetIsolationSegmentForSpaceMutex.Unlock()
	if fake.ResetIsolationSegmentForSpaceStub != nil {
		return fake.ResetIsolationSegmentForSpaceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.resetIsolationSegmentForSpaceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceCallCount() int {
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	return len(fake.resetIsolationSegmentForSpaceArgsForCall)
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceCalls(stub func(string) error) {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	defer fake.resetIsolationSegmentForSpaceMutex.Unlock()
	fake.ResetIsolationSegmentForSpaceStub = stub
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceArgsForCall(i int) string {
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	argsForCall := fake.resetIsolationSegmentForSpaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceReturns(result1 error) {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	defer fake.resetIsolationSegmentForSpaceMutex.Unlock()
	fake.ResetIsolationSegmentForSpaceStub = nil
	fake.resetIsolationSegmentForSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceReturnsOnCall(i int, result1 error) {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	defer fake.resetIsolationSegmentForSpaceMutex.Unlock()
	fake.ResetIsolationSegmentForSpaceStub = nil
	if fake.resetIsolationSegmentForSpaceReturnsOnCall == nil {
		fake.resetIsolationSegmentForSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetIsolationSegmentForSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ServiceBindingByGuid(arg1 string) (cfclient.ServiceBinding, error) {
	fake.serviceBindingByGuidMutex.Lock()
	ret, specificReturn := fake.serviceBindingByGuidReturnsOnCall[len(fake.serviceBindingByGuidArgsForCall)]
	fake.serviceBindingByGuidArgsForCall = append(fake.serviceBindingByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ServiceBindingByGuid", []interface{}{arg1})
	fake.serviceBindingByGuidMutex.Unlock()
	if fake.ServiceBindingByGuidStub != nil {
		return fake.ServiceBindingByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.serviceBindingByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ServiceBindingByGuidCallCount() int {
	fake.serviceBindingByGuidMutex.RLock()
	defer fake.serviceBindingByGuidMutex.RUnlock()
	return len(fake.serviceBindingByGuidArgsForCall)
}

func (fake *FakeCFClient) ServiceBindingByGuidCalls(stub func(string) (cfclient.ServiceBinding, error)) {
	fake.serviceBindingByGuidMutex.Lock()
	defer fake.serviceBindingByGuidMutex.Unlock()
	fake.ServiceBindingByGuidStub = stub
}

func (fake *FakeCFClient) ServiceBindingByGuidArgsForCall(i int) string {
	fake.serviceBindingByGuidMutex.RLock()
	defer fake.serviceBindingByGuidMutex.RUnlock()
	argsForCall := fake.serviceBindingByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ServiceBindingByGuidReturns(result1 cfclient.ServiceBinding, result2 error) {
	fake.serviceBindingByGuidMutex.Lock()
	defer fake.serviceBindingByGuidMutex.Unlock()
	fake.ServiceBindingByGuidStub = nil
	fake.serviceBindingByGuidReturns = struct {
		result1 cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ServiceBindingByGuidReturnsOnCall(i int, result1 cfclient.ServiceBinding, result2 error) {
	fake.serviceBindingByGuidMutex.Lock()
	defer fake.serviceBindingByGuidMutex.Unlock()
	fake.ServiceBindingByGuidStub = nil
	if fake.serviceBindingByGuidReturnsOnCall == nil {
		fake.serviceBindingByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceBinding
			result2 error
		})
	}
	fake.serviceBindingByGuidReturnsOnCall[i] = struct {
		result1 cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ServiceInstanceByGuid(arg1 string) (cfclient.ServiceInstance, error) {
	fake.serviceInstanceByGuidMutex.Lock()
	ret, specificReturn := fake.serviceInstanceByGuidReturnsOnCall[len(fake.serviceInstanceByGuidArgsForCall)]
	fake.serviceInstanceByGuidArgsForCall = append(fake.serviceInstanceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ServiceInstanceByGuid", []interface{}{arg1})
	fake.serviceInstanceByGuidMutex.Unlock()
	if fake.ServiceInstanceByGuidStub != nil {
		return fake.ServiceInstanceByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.serviceInstanceByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ServiceInstanceByGuidCallCount() int {
	fake.serviceInstanceByGuidMutex.RLock()
	defer fake.serviceInstanceByGuidMutex.RUnlock()
	return len(fake.serviceInstanceByGuidArgsForCall)
}

func (fake *FakeCFClient) ServiceInstanceByGuidCalls(stub func(string) (cfclient.ServiceInstance, error)) {
	fake.serviceInstanceByGuidMutex.Lock()
	defer fake.serviceInstanceByGuidMutex.Unlock()
	fake.ServiceInstanceByGuidStub = stub
}

func (fake *FakeCFClient) ServiceInstanceByGuidArgsForCall(i int) string {
	fake.serviceInstanceByGuidMutex.RLock()
	defer fake.serviceInstanceByGuidMutex.RUnlock()
	argsForCall := fake.serviceInstanceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ServiceInstanceByGuidReturns(result1 cfclient.ServiceInstance, result2 error) {
	fake.serviceInstanceByGuidMutex.Lock()
	defer fake.serviceInstanceByGuidMutex.Unlock()
	fake.ServiceInstanceByGuidStub = nil
	fake.serviceInstanceByGuidReturns = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ServiceInstanceByGuidReturnsOnCall(i int, result1 cfclient.ServiceInstance, result2 error) {
	fake.serviceInstanceByGuidMutex.Lock()
	defer fake.serviceInstanceByGuidMutex.Unlock()
	fake.ServiceInstanceByGuidStub = nil
	if fake.serviceInstanceByGuidReturnsOnCall == nil {
		fake.serviceInstanceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceInstance
			result2 error
		})
	}
	fake.serviceInstanceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroup(arg1 cfclient.EnvironmentVariableGroup) error {
	fake.setRunningEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.setRunningEnvironmentVariableGroupReturnsOnCall[len(fake.setRunningEnvironmentVariableGroupArgsForCall)]
	fake.setRunningEnvironmentVariableGroupArgsForCall = append(fake.setRunningEnvironmentVariableGroupArgsForCall, struct {
		arg1 cfclient.EnvironmentVariableGroup
	}{arg1})
	fake.recordInvocation("SetRunningEnvironmentVariableGroup", []interface{}{arg1})
	fake.setRunningEnvironmentVariableGroupMutex.Unlock()
	if fake.SetRunningEnvironmentVariableGroupStub != nil {
		return fake.SetRunningEnvironmentVariableGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setRunningEnvironmentVariableGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupCallCount() int {
	fake.setRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.setRunningEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.setRunningEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupCalls(stub func(cfclient.EnvironmentVariableGroup) error) {
	fake.setRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.setRunningEnvironmentVariableGroupMutex.Unlock()
	fake.SetRunningEnvironmentVariableGroupStub = stub
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupArgsForCall(i int) cfclient.EnvironmentVariableGroup {
	fake.setRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.setRunningEnvironmentVariableGroupMutex.RUnlock()
	argsForCall := fake.setRunningEnvironmentVariableGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupReturns(result1 error) {
	fake.setRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.setRunningEnvironmentVariableGroupMutex.Unlock()
	fake.SetRunningEnvironmentVariableGroupStub = nil
	fake.setRunningEnvironmentVariableGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) SetRunningEnvironmentVariableGroupReturnsOnCall(i int, result1 error) {
	fake.setRunningEnvironmentVariableGroupMutex.Lock()
	defer fake.setRunningEnvironmentVariableGroupMutex.Unlock()
	fake.SetRunningEnvironmentVariableGroupStub = nil
	if fake.setRunningEnvironmentVariableGroupReturnsOnCall == nil {
		fake.setRunningEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setRunningEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroup(arg1 cfclient.EnvironmentVariableGroup) error {
	fake.setStagingEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.setStagingEnvironmentVariableGroupReturnsOnCall[len(fake.setStagingEnvironmentVariableGroupArgsForCall)]
	fake.setStagingEnvironmentVariableGroupArgsForCall = append(fake.setStagingEnvironmentVariableGroupArgsForCall, struct {
		arg1 cfclient.EnvironmentVariableGroup
	}{arg1})
	fake.recordInvocation("SetStagingEnvironmentVariableGroup", []interface{}{arg1})
	fake.setStagingEnvironmentVariableGroupMutex.Unlock()
	if fake.SetStagingEnvironmentVariableGroupStub != nil {
		return fake.SetStagingEnvironmentVariableGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setStagingEnvironmentVariableGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupCallCount() int {
	fake.setStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.setStagingEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.setStagingEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupCalls(stub func(cfclient.EnvironmentVariableGroup) error) {
	fake.setStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.setStagingEnvironmentVariableGroupMutex.Unlock()
	fake.SetStagingEnvironmentVariableGroupStub = stub
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupArgsForCall(i int) cfclient.EnvironmentVariableGroup {
	fake.setStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.setStagingEnvironmentVariableGroupMutex.RUnlock()
	argsForCall := fake.setStagingEnvironmentVariableGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupReturns(result1 error) {
	fake.setStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.setStagingEnvironmentVariableGroupMutex.Unlock()
	fake.SetStagingEnvironmentVariableGroupStub = nil
	fake.setStagingEnvironmentVariableGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) SetStagingEnvironmentVariableGroupReturnsOnCall(i int, result1 error) {
	fake.setStagingEnvironmentVariableGroupMutex.Lock()
	defer fake.setStagingEnvironmentVariableGroupMutex.Unlock()
	fake.SetStagingEnvironmentVariableGroupStub = nil
	if fake.setStagingEnvironmentVariableGroupReturnsOnCall == nil {
		fake.setStagingEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setStagingEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ShareOrgPrivateDomain(arg1 string, arg2 string) (*cfclient.Domain, error) {
	fake.shareOrgPrivateDomainMutex.Lock()
	ret, specificReturn := fake.shareOrgPrivateDomainReturnsOnCall[len(fake.shareOrgPrivateDomainArgsForCall)]
	fake.shareOrgPrivateDomainArgsForCall = append(fake.shareOrgPrivateDomainArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("ShareOrgPrivateDomain", []interface{}{arg1, arg2})
	fake.shareOrgPrivateDomainMutex.Unlock()
	if fake.ShareOrgPrivateDomainStub != nil {
		return fake.ShareOrgPrivateDomainStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.shareOrgPrivateDomainReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ShareOrgPrivateDomainCallCount() int {
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	return len(fake.shareOrgPrivateDomainArgsForCall)
}

func (fake *FakeCFClient) ShareOrgPrivateDomainCalls(stub func(string, string) (*cfclient.Domain, error)) {
	fake.shareOrgPrivateDomainMutex.Lock()
	defer fake.shareOrgPrivateDomainMutex.Unlock()
	fake.ShareOrgPrivateDomainStub = stub
}

func (fake *FakeCFClient) ShareOrgPrivateDomainArgsForCall(i int) (string, string) {
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	argsForCall := fake.shareOrgPrivateDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ShareOrgPrivateDomainReturns(result1 *cfclient.Domain, result2 error) {
	fake.shareOrgPrivateDomainMutex.Lock()
	defer fake.shareOrgPrivateDomainMutex.Unlock()
	fake.ShareOrgPrivateDomainStub = nil
	fake.shareOrgPrivateDomainReturns = struct {
		result1 *cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ShareOrgPrivateDomainReturnsOnCall(i int, result1 *cfclient.Domain, result2 error) {
	fake.shareOrgPrivateDomainMutex.Lock()
	defer fake.shareOrgPrivateDomainMutex.Unlock()
	fake.ShareOrgPrivateDomainStub = nil
	if fake.shareOrgPrivateDomainReturnsOnCall == nil {
		fake.shareOrgPrivateDomainReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Domain
			result2 error
		})
	}
	fake.shareOrgPrivateDomainReturnsOnCall[i] = struct {
		result1 *cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) StartApp(arg1 string) error {
	fake.startAppMutex.Lock()
	ret, specificReturn := fake.startAppReturnsOnCall[len(fake.startAppArgsForCall)]
	fake.startAppArgsForCall = append(fake.startAppArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StartApp", []interface{}{arg1})
	fake.startAppMutex.Unlock()
	if fake.StartAppStub != nil {
		return fake.StartAppStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.startAppReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) StartAppCallCount() int {
	fake.startAppMutex.RLock()
	defer fake.startAppMutex.RUnlock()
	return len(fake.startAppArgsForCall)
}

func (fake *FakeCFClient) StartAppCalls(stub func(string) error) {
	fake.startAppMutex.Lock()
	defer fake.startAppMutex.Unlock()
	fake.StartAppStub = stub
}

func (fake *FakeCFClient) StartAppArgsForCall(i int) string {
	fake.startAppMutex.RLock()
	defer fake.startAppMutex.RUnlock()
	argsForCall := fake.startAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) StartAppReturns(result1 error) {
	fake.startAppMutex.Lock()
	defer fake.startAppMutex.Unlock()
	fake.StartAppStub = nil
	fake.startAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) StartAppReturnsOnCall(i int, result1 error) {
	fake.startAppMutex.Lock()
	defer fake.startAppMutex.Unlock()
	fake.StartAppStub = nil
	if fake.startAppReturnsOnCall == nil {
		fake.startAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.startAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) StopApp(arg1 string) error {
	fake.stopAppMutex.Lock()
	ret, specificReturn := fake.stopAppReturnsOnCall[len(fake.stopAppArgsForCall)]
	fake.stopAppArgsForCall = append(fake.stopAppArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("StopApp", []interface{}{arg1})
	fake.stopAppMutex.Unlock()
	if fake.StopAppStub != nil {
		return fake.StopAppStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.stopAppReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) StopAppCallCount() int {
	fake.stopAppMutex.RLock()
	defer fake.stopAppMutex.RUnlock()
	return len(fake.stopAppArgsForCall)
}

func (fake *FakeCFClient) StopAppCalls(stub func(string) error) {
	fake.stopAppMutex.Lock()
	defer fake.stopAppMutex.Unlock()
	fake.StopAppStub = stub
}

func (fake *FakeCFClient) StopAppArgsForCall(i int) string {
	fake.stopAppMutex.RLock()
	defer fake.stopAppMutex.RUnlock()
	argsForCall := fake.stopAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) StopAppReturns(result1 error) {
	fake.stopAppMutex.Lock()
	defer fake.stopAppMutex.Unlock()
	fake.StopAppStub = nil
	fake.stopAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) StopAppReturnsOnCall(i int, result1 error) {
	fake.stopAppMutex.Lock()
	defer fake.stopAppMutex.Unlock()
	fake.StopAppStub = nil
	if fake.stopAppReturnsOnCall == nil {
		fake.stopAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.stopAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) TaskByGuid(arg1 string) (cfclient.Task, error) {
	fake.taskByGuidMutex.Lock()
	ret, specificReturn := fake.taskByGuidReturnsOnCall[len(fake.taskByGuidArgsForCall)]
	fake.taskByGuidArgsForCall = append(fake.taskByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TaskByGuid", []interface{}{arg1})
	fake.taskByGuidMutex.Unlock()
	if fake.TaskByGuidStub != nil {
		return fake.TaskByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.taskByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) TaskByGuidCallCount() int {
	fake.taskByGuidMutex.RLock()
	defer fake.taskByGuidMutex.RUnlock()
	return len(fake.taskByGuidArgsForCall)
}

func (fake *FakeCFClient) TaskByGuidCalls(stub func(string) (cfclient.Task, error)) {
	fake.taskByGuidMutex.Lock()
	defer fake.taskByGuidMutex.Unlock()
	fake.TaskByGuidStub = stub
}

func (fake *FakeCFClient) TaskByGuidArgsForCall(i int) string {
	fake.taskByGuidMutex.RLock()
	defer fake.taskByGuidMutex.RUnlock()
	argsForCall := fake.taskByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) TaskByGuidReturns(result1 cfclient.Task, result2 error) {
	fake.taskByGuidMutex.Lock()
	defer fake.taskByGuidMutex.Unlock()
	fake.TaskByGuidStub = nil
	fake.taskByGuidReturns = struct {
		result1 cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TaskByGuidReturnsOnCall(i int, result1 cfclient.Task, result2 error) {
	fake.taskByGuidMutex.Lock()
	defer fake.taskByGuidMutex.Unlock()
	fake.TaskByGuidStub = nil
	if fake.taskByGuidReturnsOnCall == nil {
		fake.taskByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Task
			result2 error
		})
	}
	fake.taskByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TasksByApp(arg1 string) ([]cfclient.Task, error) {
	fake.tasksByAppMutex.Lock()
	ret, specificReturn := fake.tasksByAppReturnsOnCall[len(fake.tasksByAppArgsForCall)]
	fake.tasksByAppArgsForCall = append(fake.tasksByAppArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TasksByApp", []interface{}{arg1})
	fake.tasksByAppMutex.Unlock()
	if fake.TasksByAppStub != nil {
		return fake.TasksByAppStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tasksByAppReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) TasksByAppCallCount() int {
	fake.tasksByAppMutex.RLock()
	defer fake.tasksByAppMutex.RUnlock()
	return len(fake.tasksByAppArgsForCall)
}

func (fake *FakeCFClient) TasksByAppCalls(stub func(string) ([]cfclient.Task, error)) {
	fake.tasksByAppMutex.Lock()
	defer fake.tasksByAppMutex.Unlock()
	fake.TasksByAppStub = stub
}

func (fake *FakeCFClient) TasksByAppArgsForCall(i int) string {
	fake.tasksByAppMutex.RLock()
	defer fake.tasksByAppMutex.RUnlock()
	argsForCall := fake.tasksByAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) TasksByAppReturns(result1 []cfclient.Task, result2 error) {
	fake.tasksByAppMutex.Lock()
	defer fake.tasksByAppMutex.Unlock()
	fake.TasksByAppStub = nil
	fake.tasksByAppReturns = struct {
		result1 []cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TasksByAppReturnsOnCall(i int, result1 []cfclient.Task, result2 error) {
	fake.tasksByAppMutex.Lock()
	defer fake.tasksByAppMutex.Unlock()
	fake.TasksByAppStub = nil
	if fake.tasksByAppReturnsOnCall == nil {
		fake.tasksByAppReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Task
			result2 error
		})
	}
	fake.tasksByAppReturnsOnCall[i] = struct {
		result1 []cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TasksByAppByQuery(arg1 string, arg2 url.Values) ([]cfclient.Task, error) {
	fake.tasksByAppByQueryMutex.Lock()
	ret, specificReturn := fake.tasksByAppByQueryReturnsOnCall[len(fake.tasksByAppByQueryArgsForCall)]
	fake.tasksByAppByQueryArgsForCall = append(fake.tasksByAppByQueryArgsForCall, struct {
		arg1 string
		arg2 url.Values
	}{arg1, arg2})
	fake.recordInvocation("TasksByAppByQuery", []interface{}{arg1, arg2})
	fake.tasksByAppByQueryMutex.Unlock()
	if fake.TasksByAppByQueryStub != nil {
		return fake.TasksByAppByQueryStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tasksByAppByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) TasksByAppByQueryCallCount() int {
	fake.tasksByAppByQueryMutex.RLock()
	defer fake.tasksByAppByQueryMutex.RUnlock()
	return len(fake.tasksByAppByQueryArgsForCall)
}

func (fake *FakeCFClient) TasksByAppByQueryCalls(stub func(string, url.Values) ([]cfclient.Task, error)) {
	fake.tasksByAppByQueryMutex.Lock()
	defer fake.tasksByAppByQueryMutex.Unlock()
	fake.TasksByAppByQueryStub = stub
}

func (fake *FakeCFClient) TasksByAppByQueryArgsForCall(i int) (string, url.Values) {
	fake.tasksByAppByQueryMutex.RLock()
	defer fake.tasksByAppByQueryMutex.RUnlock()
	argsForCall := fake.tasksByAppByQueryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) TasksByAppByQueryReturns(result1 []cfclient.Task, result2 error) {
	fake.tasksByAppByQueryMutex.Lock()
	defer fake.tasksByAppByQueryMutex.Unlock()
	fake.TasksByAppByQueryStub = nil
	fake.tasksByAppByQueryReturns = struct {
		result1 []cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TasksByAppByQueryReturnsOnCall(i int, result1 []cfclient.Task, result2 error) {
	fake.tasksByAppByQueryMutex.Lock()
	defer fake.tasksByAppByQueryMutex.Unlock()
	fake.TasksByAppByQueryStub = nil
	if fake.tasksByAppByQueryReturnsOnCall == nil {
		fake.tasksByAppByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Task
			result2 error
		})
	}
	fake.tasksByAppByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TerminateTask(arg1 string) error {
	fake.terminateTaskMutex.Lock()
	ret, specificReturn := fake.terminateTaskReturnsOnCall[len(fake.terminateTaskArgsForCall)]
	fake.terminateTaskArgsForCall = append(fake.terminateTaskArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("TerminateTask", []interface{}{arg1})
	fake.terminateTaskMutex.Unlock()
	if fake.TerminateTaskStub != nil {
		return fake.TerminateTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.terminateTaskReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) TerminateTaskCallCount() int {
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	return len(fake.terminateTaskArgsForCall)
}

func (fake *FakeCFClient) TerminateTaskCalls(stub func(string) error) {
	fake.terminateTaskMutex.Lock()
	defer fake.terminateTaskMutex.Unlock()
	fake.TerminateTaskStub = stub
}

func (fake *FakeCFClient) TerminateTaskArgsForCall(i int) string {
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	argsForCall := fake.terminateTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) TerminateTaskReturns(result1 error) {
	fake.terminateTaskMutex.Lock()
	defer fake.terminateTaskMutex.Unlock()
	fake.TerminateTaskStub = nil
	fake.terminateTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) TerminateTaskReturnsOnCall(i int, result1 error) {
	fake.terminateTaskMutex.Lock()
	defer fake.terminateTaskMutex.Unlock()
	fake.TerminateTaskStub = nil
	if fake.terminateTaskReturnsOnCall == nil {
		fake.terminateTaskReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.terminateTaskReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) TotalEvents() (int, error) {
	fake.totalEventsMutex.Lock()
	ret, specificReturn := fake.totalEventsReturnsOnCall[len(fake.totalEventsArgsForCall)]
	fake.totalEventsArgsForCall = append(fake.totalEventsArgsForCall, struct {
	}{})
	fake.recordInvocation("TotalEvents", []interface{}{})
	fake.totalEventsMutex.Unlock()
	if fake.TotalEventsStub != nil {
		return fake.TotalEventsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.totalEventsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) TotalEventsCallCount() int {
	fake.totalEventsMutex.RLock()
	defer fake.totalEventsMutex.RUnlock()
	return len(fake.totalEventsArgsForCall)
}

func (fake *FakeCFClient) TotalEventsCalls(stub func() (int, error)) {
	fake.totalEventsMutex.Lock()
	defer fake.totalEventsMutex.Unlock()
	fake.TotalEventsStub = stub
}

func (fake *FakeCFClient) TotalEventsReturns(result1 int, result2 error) {
	fake.totalEventsMutex.Lock()
	defer fake.totalEventsMutex.Unlock()
	fake.TotalEventsStub = nil
	fake.totalEventsReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TotalEventsReturnsOnCall(i int, result1 int, result2 error) {
	fake.totalEventsMutex.Lock()
	defer fake.totalEventsMutex.Unlock()
	fake.TotalEventsStub = nil
	if fake.totalEventsReturnsOnCall == nil {
		fake.totalEventsReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.totalEventsReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TotalEventsByQuery(arg1 url.Values) (int, error) {
	fake.totalEventsByQueryMutex.Lock()
	ret, specificReturn := fake.totalEventsByQueryReturnsOnCall[len(fake.totalEventsByQueryArgsForCall)]
	fake.totalEventsByQueryArgsForCall = append(fake.totalEventsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	fake.recordInvocation("TotalEventsByQuery", []interface{}{arg1})
	fake.totalEventsByQueryMutex.Unlock()
	if fake.TotalEventsByQueryStub != nil {
		return fake.TotalEventsByQueryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.totalEventsByQueryReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) TotalEventsByQueryCallCount() int {
	fake.totalEventsByQueryMutex.RLock()
	defer fake.totalEventsByQueryMutex.RUnlock()
	return len(fake.totalEventsByQueryArgsForCall)
}

func (fake *FakeCFClient) TotalEventsByQueryCalls(stub func(url.Values) (int, error)) {
	fake.totalEventsByQueryMutex.Lock()
	defer fake.totalEventsByQueryMutex.Unlock()
	fake.TotalEventsByQueryStub = stub
}

func (fake *FakeCFClient) TotalEventsByQueryArgsForCall(i int) url.Values {
	fake.totalEventsByQueryMutex.RLock()
	defer fake.totalEventsByQueryMutex.RUnlock()
	argsForCall := fake.totalEventsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) TotalEventsByQueryReturns(result1 int, result2 error) {
	fake.totalEventsByQueryMutex.Lock()
	defer fake.totalEventsByQueryMutex.Unlock()
	fake.TotalEventsByQueryStub = nil
	fake.totalEventsByQueryReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) TotalEventsByQueryReturnsOnCall(i int, result1 int, result2 error) {
	fake.totalEventsByQueryMutex.Lock()
	defer fake.totalEventsByQueryMutex.Unlock()
	fake.TotalEventsByQueryStub = nil
	if fake.totalEventsByQueryReturnsOnCall == nil {
		fake.totalEventsByQueryReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.totalEventsByQueryReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UnbindRunningSecGroup(arg1 string) error {
	fake.unbindRunningSecGroupMutex.Lock()
	ret, specificReturn := fake.unbindRunningSecGroupReturnsOnCall[len(fake.unbindRunningSecGroupArgsForCall)]
	fake.unbindRunningSecGroupArgsForCall = append(fake.unbindRunningSecGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UnbindRunningSecGroup", []interface{}{arg1})
	fake.unbindRunningSecGroupMutex.Unlock()
	if fake.UnbindRunningSecGroupStub != nil {
		return fake.UnbindRunningSecGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unbindRunningSecGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) UnbindRunningSecGroupCallCount() int {
	fake.unbindRunningSecGroupMutex.RLock()
	defer fake.unbindRunningSecGroupMutex.RUnlock()
	return len(fake.unbindRunningSecGroupArgsForCall)
}

func (fake *FakeCFClient) UnbindRunningSecGroupCalls(stub func(string) error) {
	fake.unbindRunningSecGroupMutex.Lock()
	defer fake.unbindRunningSecGroupMutex.Unlock()
	fake.UnbindRunningSecGroupStub = stub
}

func (fake *FakeCFClient) UnbindRunningSecGroupArgsForCall(i int) string {
	fake.unbindRunningSecGroupMutex.RLock()
	defer fake.unbindRunningSecGroupMutex.RUnlock()
	argsForCall := fake.unbindRunningSecGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) UnbindRunningSecGroupReturns(result1 error) {
	fake.unbindRunningSecGroupMutex.Lock()
	defer fake.unbindRunningSecGroupMutex.Unlock()
	fake.UnbindRunningSecGroupStub = nil
	fake.unbindRunningSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnbindRunningSecGroupReturnsOnCall(i int, result1 error) {
	fake.unbindRunningSecGroupMutex.Lock()
	defer fake.unbindRunningSecGroupMutex.Unlock()
	fake.UnbindRunningSecGroupStub = nil
	if fake.unbindRunningSecGroupReturnsOnCall == nil {
		fake.unbindRunningSecGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unbindRunningSecGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnbindSecGroup(arg1 string, arg2 string) error {
	fake.unbindSecGroupMutex.Lock()
	ret, specificReturn := fake.unbindSecGroupReturnsOnCall[len(fake.unbindSecGroupArgsForCall)]
	fake.unbindSecGroupArgsForCall = append(fake.unbindSecGroupArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UnbindSecGroup", []interface{}{arg1, arg2})
	fake.unbindSecGroupMutex.Unlock()
	if fake.UnbindSecGroupStub != nil {
		return fake.UnbindSecGroupStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unbindSecGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) UnbindSecGroupCallCount() int {
	fake.unbindSecGroupMutex.RLock()
	defer fake.unbindSecGroupMutex.RUnlock()
	return len(fake.unbindSecGroupArgsForCall)
}

func (fake *FakeCFClient) UnbindSecGroupCalls(stub func(string, string) error) {
	fake.unbindSecGroupMutex.Lock()
	defer fake.unbindSecGroupMutex.Unlock()
	fake.UnbindSecGroupStub = stub
}

func (fake *FakeCFClient) UnbindSecGroupArgsForCall(i int) (string, string) {
	fake.unbindSecGroupMutex.RLock()
	defer fake.unbindSecGroupMutex.RUnlock()
	argsForCall := fake.unbindSecGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UnbindSecGroupReturns(result1 error) {
	fake.unbindSecGroupMutex.Lock()
	defer fake.unbindSecGroupMutex.Unlock()
	fake.UnbindSecGroupStub = nil
	fake.unbindSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnbindSecGroupReturnsOnCall(i int, result1 error) {
	fake.unbindSecGroupMutex.Lock()
	defer fake.unbindSecGroupMutex.Unlock()
	fake.UnbindSecGroupStub = nil
	if fake.unbindSecGroupReturnsOnCall == nil {
		fake.unbindSecGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unbindSecGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnbindStagingSecGroup(arg1 string) error {
	fake.unbindStagingSecGroupMutex.Lock()
	ret, specificReturn := fake.unbindStagingSecGroupReturnsOnCall[len(fake.unbindStagingSecGroupArgsForCall)]
	fake.unbindStagingSecGroupArgsForCall = append(fake.unbindStagingSecGroupArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UnbindStagingSecGroup", []interface{}{arg1})
	fake.unbindStagingSecGroupMutex.Unlock()
	if fake.UnbindStagingSecGroupStub != nil {
		return fake.UnbindStagingSecGroupStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unbindStagingSecGroupReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) UnbindStagingSecGroupCallCount() int {
	fake.unbindStagingSecGroupMutex.RLock()
	defer fake.unbindStagingSecGroupMutex.RUnlock()
	return len(fake.unbindStagingSecGroupArgsForCall)
}

func (fake *FakeCFClient) UnbindStagingSecGroupCalls(stub func(string) error) {
	fake.unbindStagingSecGroupMutex.Lock()
	defer fake.unbindStagingSecGroupMutex.Unlock()
	fake.UnbindStagingSecGroupStub = stub
}

func (fake *FakeCFClient) UnbindStagingSecGroupArgsForCall(i int) string {
	fake.unbindStagingSecGroupMutex.RLock()
	defer fake.unbindStagingSecGroupMutex.RUnlock()
	argsForCall := fake.unbindStagingSecGroupArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) UnbindStagingSecGroupReturns(result1 error) {
	fake.unbindStagingSecGroupMutex.Lock()
	defer fake.unbindStagingSecGroupMutex.Unlock()
	fake.UnbindStagingSecGroupStub = nil
	fake.unbindStagingSecGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnbindStagingSecGroupReturnsOnCall(i int, result1 error) {
	fake.unbindStagingSecGroupMutex.Lock()
	defer fake.unbindStagingSecGroupMutex.Unlock()
	fake.UnbindStagingSecGroupStub = nil
	if fake.unbindStagingSecGroupReturnsOnCall == nil {
		fake.unbindStagingSecGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unbindStagingSecGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnshareOrgPrivateDomain(arg1 string, arg2 string) error {
	fake.unshareOrgPrivateDomainMutex.Lock()
	ret, specificReturn := fake.unshareOrgPrivateDomainReturnsOnCall[len(fake.unshareOrgPrivateDomainArgsForCall)]
	fake.unshareOrgPrivateDomainArgsForCall = append(fake.unshareOrgPrivateDomainArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UnshareOrgPrivateDomain", []interface{}{arg1, arg2})
	fake.unshareOrgPrivateDomainMutex.Unlock()
	if fake.UnshareOrgPrivateDomainStub != nil {
		return fake.UnshareOrgPrivateDomainStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.unshareOrgPrivateDomainReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainCallCount() int {
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	return len(fake.unshareOrgPrivateDomainArgsForCall)
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainCalls(stub func(string, string) error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = stub
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainArgsForCall(i int) (string, string) {
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	argsForCall := fake.unshareOrgPrivateDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainReturns(result1 error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = nil
	fake.unshareOrgPrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainReturnsOnCall(i int, result1 error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = nil
	if fake.unshareOrgPrivateDomainReturnsOnCall == nil {
		fake.unshareOrgPrivateDomainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unshareOrgPrivateDomainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UpdateApp(arg1 string, arg2 cfclient.AppUpdateResource) (cfclient.UpdateResponse, error) {
	fake.updateAppMutex.Lock()
	ret, specificReturn := fake.updateAppReturnsOnCall[len(fake.updateAppArgsForCall)]
	fake.updateAppArgsForCall = append(fake.updateAppArgsForCall, struct {
		arg1 string
		arg2 cfclient.AppUpdateResource
	}{arg1, arg2})
	fake.recordInvocation("UpdateApp", []interface{}{arg1, arg2})
	fake.updateAppMutex.Unlock()
	if fake.UpdateAppStub != nil {
		return fake.UpdateAppStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateAppReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateAppCallCount() int {
	fake.updateAppMutex.RLock()
	defer fake.updateAppMutex.RUnlock()
	return len(fake.updateAppArgsForCall)
}

func (fake *FakeCFClient) UpdateAppCalls(stub func(string, cfclient.AppUpdateResource) (cfclient.UpdateResponse, error)) {
	fake.updateAppMutex.Lock()
	defer fake.updateAppMutex.Unlock()
	fake.UpdateAppStub = stub
}

func (fake *FakeCFClient) UpdateAppArgsForCall(i int) (string, cfclient.AppUpdateResource) {
	fake.updateAppMutex.RLock()
	defer fake.updateAppMutex.RUnlock()
	argsForCall := fake.updateAppArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateAppReturns(result1 cfclient.UpdateResponse, result2 error) {
	fake.updateAppMutex.Lock()
	defer fake.updateAppMutex.Unlock()
	fake.UpdateAppStub = nil
	fake.updateAppReturns = struct {
		result1 cfclient.UpdateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateAppReturnsOnCall(i int, result1 cfclient.UpdateResponse, result2 error) {
	fake.updateAppMutex.Lock()
	defer fake.updateAppMutex.Unlock()
	fake.UpdateAppStub = nil
	if fake.updateAppReturnsOnCall == nil {
		fake.updateAppReturnsOnCall = make(map[int]struct {
			result1 cfclient.UpdateResponse
			result2 error
		})
	}
	fake.updateAppReturnsOnCall[i] = struct {
		result1 cfclient.UpdateResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrg(arg1 string, arg2 cfclient.OrgRequest) (cfclient.Org, error) {
	fake.updateOrgMutex.Lock()
	ret, specificReturn := fake.updateOrgReturnsOnCall[len(fake.updateOrgArgsForCall)]
	fake.updateOrgArgsForCall = append(fake.updateOrgArgsForCall, struct {
		arg1 string
		arg2 cfclient.OrgRequest
	}{arg1, arg2})
	fake.recordInvocation("UpdateOrg", []interface{}{arg1, arg2})
	fake.updateOrgMutex.Unlock()
	if fake.UpdateOrgStub != nil {
		return fake.UpdateOrgStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateOrgReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateOrgCallCount() int {
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	return len(fake.updateOrgArgsForCall)
}

func (fake *FakeCFClient) UpdateOrgCalls(stub func(string, cfclient.OrgRequest) (cfclient.Org, error)) {
	fake.updateOrgMutex.Lock()
	defer fake.updateOrgMutex.Unlock()
	fake.UpdateOrgStub = stub
}

func (fake *FakeCFClient) UpdateOrgArgsForCall(i int) (string, cfclient.OrgRequest) {
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	argsForCall := fake.updateOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateOrgReturns(result1 cfclient.Org, result2 error) {
	fake.updateOrgMutex.Lock()
	defer fake.updateOrgMutex.Unlock()
	fake.UpdateOrgStub = nil
	fake.updateOrgReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrgReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.updateOrgMutex.Lock()
	defer fake.updateOrgMutex.Unlock()
	fake.UpdateOrgStub = nil
	if fake.updateOrgReturnsOnCall == nil {
		fake.updateOrgReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.updateOrgReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrgQuota(arg1 string, arg2 cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error) {
	fake.updateOrgQuotaMutex.Lock()
	ret, specificReturn := fake.updateOrgQuotaReturnsOnCall[len(fake.updateOrgQuotaArgsForCall)]
	fake.updateOrgQuotaArgsForCall = append(fake.updateOrgQuotaArgsForCall, struct {
		arg1 string
		arg2 cfclient.OrgQuotaRequest
	}{arg1, arg2})
	fake.recordInvocation("UpdateOrgQuota", []interface{}{arg1, arg2})
	fake.updateOrgQuotaMutex.Unlock()
	if fake.UpdateOrgQuotaStub != nil {
		return fake.UpdateOrgQuotaStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateOrgQuotaReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateOrgQuotaCallCount() int {
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	return len(fake.updateOrgQuotaArgsForCall)
}

func (fake *FakeCFClient) UpdateOrgQuotaCalls(stub func(string, cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error)) {
	fake.updateOrgQuotaMutex.Lock()
	defer fake.updateOrgQuotaMutex.Unlock()
	fake.UpdateOrgQuotaStub = stub
}

func (fake *FakeCFClient) UpdateOrgQuotaArgsForCall(i int) (string, cfclient.OrgQuotaRequest) {
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	argsForCall := fake.updateOrgQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateOrgQuotaReturns(result1 *cfclient.OrgQuota, result2 error) {
	fake.updateOrgQuotaMutex.Lock()
	defer fake.updateOrgQuotaMutex.Unlock()
	fake.UpdateOrgQuotaStub = nil
	fake.updateOrgQuotaReturns = struct {
		result1 *cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrgQuotaReturnsOnCall(i int, result1 *cfclient.OrgQuota, result2 error) {
	fake.updateOrgQuotaMutex.Lock()
	defer fake.updateOrgQuotaMutex.Unlock()
	fake.UpdateOrgQuotaStub = nil
	if fake.updateOrgQuotaReturnsOnCall == nil {
		fake.updateOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 *cfclient.OrgQuota
			result2 error
		})
	}
	fake.updateOrgQuotaReturnsOnCall[i] = struct {
		result1 *cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSecGroup(arg1 string, arg2 string, arg3 []cfclient.SecGroupRule, arg4 []string) (*cfclient.SecGroup, error) {
	var arg3Copy []cfclient.SecGroupRule
	if arg3 != nil {
		arg3Copy = make([]cfclient.SecGroupRule, len(arg3))
		copy(arg3Copy, arg3)
	}
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.updateSecGroupMutex.Lock()
	ret, specificReturn := fake.updateSecGroupReturnsOnCall[len(fake.updateSecGroupArgsForCall)]
	fake.updateSecGroupArgsForCall = append(fake.updateSecGroupArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []cfclient.SecGroupRule
		arg4 []string
	}{arg1, arg2, arg3Copy, arg4Copy})
	fake.recordInvocation("UpdateSecGroup", []interface{}{arg1, arg2, arg3Copy, arg4Copy})
	fake.updateSecGroupMutex.Unlock()
	if fake.UpdateSecGroupStub != nil {
		return fake.UpdateSecGroupStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSecGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateSecGroupCallCount() int {
	fake.updateSecGroupMutex.RLock()
	defer fake.updateSecGroupMutex.RUnlock()
	return len(fake.updateSecGroupArgsForCall)
}

func (fake *FakeCFClient) UpdateSecGroupCalls(stub func(string, string, []cfclient.SecGroupRule, []string) (*cfclient.SecGroup, error)) {
	fake.updateSecGroupMutex.Lock()
	defer fake.updateSecGroupMutex.Unlock()
	fake.UpdateSecGroupStub = stub
}

func (fake *FakeCFClient) UpdateSecGroupArgsForCall(i int) (string, string, []cfclient.SecGroupRule, []string) {
	fake.updateSecGroupMutex.RLock()
	defer fake.updateSecGroupMutex.RUnlock()
	argsForCall := fake.updateSecGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeCFClient) UpdateSecGroupReturns(result1 *cfclient.SecGroup, result2 error) {
	fake.updateSecGroupMutex.Lock()
	defer fake.updateSecGroupMutex.Unlock()
	fake.UpdateSecGroupStub = nil
	fake.updateSecGroupReturns = struct {
		result1 *cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSecGroupReturnsOnCall(i int, result1 *cfclient.SecGroup, result2 error) {
	fake.updateSecGroupMutex.Lock()
	defer fake.updateSecGroupMutex.Unlock()
	fake.UpdateSecGroupStub = nil
	if fake.updateSecGroupReturnsOnCall == nil {
		fake.updateSecGroupReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SecGroup
			result2 error
		})
	}
	fake.updateSecGroupReturnsOnCall[i] = struct {
		result1 *cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateServiceBroker(arg1 string, arg2 cfclient.UpdateServiceBrokerRequest) (cfclient.ServiceBroker, error) {
	fake.updateServiceBrokerMutex.Lock()
	ret, specificReturn := fake.updateServiceBrokerReturnsOnCall[len(fake.updateServiceBrokerArgsForCall)]
	fake.updateServiceBrokerArgsForCall = append(fake.updateServiceBrokerArgsForCall, struct {
		arg1 string
		arg2 cfclient.UpdateServiceBrokerRequest
	}{arg1, arg2})
	fake.recordInvocation("UpdateServiceBroker", []interface{}{arg1, arg2})
	fake.updateServiceBrokerMutex.Unlock()
	if fake.UpdateServiceBrokerStub != nil {
		return fake.UpdateServiceBrokerStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceBrokerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateServiceBrokerCallCount() int {
	fake.updateServiceBrokerMutex.RLock()
	defer fake.updateServiceBrokerMutex.RUnlock()
	return len(fake.updateServiceBrokerArgsForCall)
}

func (fake *FakeCFClient) UpdateServiceBrokerCalls(stub func(string, cfclient.UpdateServiceBrokerRequest) (cfclient.ServiceBroker, error)) {
	fake.updateServiceBrokerMutex.Lock()
	defer fake.updateServiceBrokerMutex.Unlock()
	fake.UpdateServiceBrokerStub = stub
}

func (fake *FakeCFClient) UpdateServiceBrokerArgsForCall(i int) (string, cfclient.UpdateServiceBrokerRequest) {
	fake.updateServiceBrokerMutex.RLock()
	defer fake.updateServiceBrokerMutex.RUnlock()
	argsForCall := fake.updateServiceBrokerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateServiceBrokerReturns(result1 cfclient.ServiceBroker, result2 error) {
	fake.updateServiceBrokerMutex.Lock()
	defer fake.updateServiceBrokerMutex.Unlock()
	fake.UpdateServiceBrokerStub = nil
	fake.updateServiceBrokerReturns = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateServiceBrokerReturnsOnCall(i int, result1 cfclient.ServiceBroker, result2 error) {
	fake.updateServiceBrokerMutex.Lock()
	defer fake.updateServiceBrokerMutex.Unlock()
	fake.UpdateServiceBrokerStub = nil
	if fake.updateServiceBrokerReturnsOnCall == nil {
		fake.updateServiceBrokerReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceBroker
			result2 error
		})
	}
	fake.updateServiceBrokerReturnsOnCall[i] = struct {
		result1 cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateServiceInstance(arg1 string, arg2 io.Reader, arg3 bool) error {
	fake.updateServiceInstanceMutex.Lock()
	ret, specificReturn := fake.updateServiceInstanceReturnsOnCall[len(fake.updateServiceInstanceArgsForCall)]
	fake.updateServiceInstanceArgsForCall = append(fake.updateServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 io.Reader
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateServiceInstance", []interface{}{arg1, arg2, arg3})
	fake.updateServiceInstanceMutex.Unlock()
	if fake.UpdateServiceInstanceStub != nil {
		return fake.UpdateServiceInstanceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateServiceInstanceReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) UpdateServiceInstanceCallCount() int {
	fake.updateServiceInstanceMutex.RLock()
	defer fake.updateServiceInstanceMutex.RUnlock()
	return len(fake.updateServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) UpdateServiceInstanceCalls(stub func(string, io.Reader, bool) error) {
	fake.updateServiceInstanceMutex.Lock()
	defer fake.updateServiceInstanceMutex.Unlock()
	fake.UpdateServiceInstanceStub = stub
}

func (fake *FakeCFClient) UpdateServiceInstanceArgsForCall(i int) (string, io.Reader, bool) {
	fake.updateServiceInstanceMutex.RLock()
	defer fake.updateServiceInstanceMutex.RUnlock()
	argsForCall := fake.updateServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) UpdateServiceInstanceReturns(result1 error) {
	fake.updateServiceInstanceMutex.Lock()
	defer fake.updateServiceInstanceMutex.Unlock()
	fake.UpdateServiceInstanceStub = nil
	fake.updateServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UpdateServiceInstanceReturnsOnCall(i int, result1 error) {
	fake.updateServiceInstanceMutex.Lock()
	defer fake.updateServiceInstanceMutex.Unlock()
	fake.UpdateServiceInstanceStub = nil
	if fake.updateServiceInstanceReturnsOnCall == nil {
		fake.updateServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateServiceInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UpdateServicePlanVisibility(arg1 string, arg2 string, arg3 string) (cfclient.ServicePlanVisibility, error) {
	fake.updateServicePlanVisibilityMutex.Lock()
	ret, specificReturn := fake.updateServicePlanVisibilityReturnsOnCall[len(fake.updateServicePlanVisibilityArgsForCall)]
	fake.updateServicePlanVisibilityArgsForCall = append(fake.updateServicePlanVisibilityArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateServicePlanVisibility", []interface{}{arg1, arg2, arg3})
	fake.updateServicePlanVisibilityMutex.Unlock()
	if fake.UpdateServicePlanVisibilityStub != nil {
		return fake.UpdateServicePlanVisibilityStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServicePlanVisibilityReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateServicePlanVisibilityCallCount() int {
	fake.updateServicePlanVisibilityMutex.RLock()
	defer fake.updateServicePlanVisibilityMutex.RUnlock()
	return len(fake.updateServicePlanVisibilityArgsForCall)
}

func (fake *FakeCFClient) UpdateServicePlanVisibilityCalls(stub func(string, string, string) (cfclient.ServicePlanVisibility, error)) {
	fake.updateServicePlanVisibilityMutex.Lock()
	defer fake.updateServicePlanVisibilityMutex.Unlock()
	fake.UpdateServicePlanVisibilityStub = stub
}

func (fake *FakeCFClient) UpdateServicePlanVisibilityArgsForCall(i int) (string, string, string) {
	fake.updateServicePlanVisibilityMutex.RLock()
	defer fake.updateServicePlanVisibilityMutex.RUnlock()
	argsForCall := fake.updateServicePlanVisibilityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) UpdateServicePlanVisibilityReturns(result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.updateServicePlanVisibilityMutex.Lock()
	defer fake.updateServicePlanVisibilityMutex.Unlock()
	fake.UpdateServicePlanVisibilityStub = nil
	fake.updateServicePlanVisibilityReturns = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateServicePlanVisibilityReturnsOnCall(i int, result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.updateServicePlanVisibilityMutex.Lock()
	defer fake.updateServicePlanVisibilityMutex.Unlock()
	fake.UpdateServicePlanVisibilityStub = nil
	if fake.updateServicePlanVisibilityReturnsOnCall == nil {
		fake.updateServicePlanVisibilityReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.updateServicePlanVisibilityReturnsOnCall[i] = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpace(arg1 string, arg2 cfclient.SpaceRequest) (cfclient.Space, error) {
	fake.updateSpaceMutex.Lock()
	ret, specificReturn := fake.updateSpaceReturnsOnCall[len(fake.updateSpaceArgsForCall)]
	fake.updateSpaceArgsForCall = append(fake.updateSpaceArgsForCall, struct {
		arg1 string
		arg2 cfclient.SpaceRequest
	}{arg1, arg2})
	fake.recordInvocation("UpdateSpace", []interface{}{arg1, arg2})
	fake.updateSpaceMutex.Unlock()
	if fake.UpdateSpaceStub != nil {
		return fake.UpdateSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSpaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateSpaceCallCount() int {
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	return len(fake.updateSpaceArgsForCall)
}

func (fake *FakeCFClient) UpdateSpaceCalls(stub func(string, cfclient.SpaceRequest) (cfclient.Space, error)) {
	fake.updateSpaceMutex.Lock()
	defer fake.updateSpaceMutex.Unlock()
	fake.UpdateSpaceStub = stub
}

func (fake *FakeCFClient) UpdateSpaceArgsForCall(i int) (string, cfclient.SpaceRequest) {
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	argsForCall := fake.updateSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateSpaceReturns(result1 cfclient.Space, result2 error) {
	fake.updateSpaceMutex.Lock()
	defer fake.updateSpaceMutex.Unlock()
	fake.UpdateSpaceStub = nil
	fake.updateSpaceReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpaceReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.updateSpaceMutex.Lock()
	defer fake.updateSpaceMutex.Unlock()
	fake.UpdateSpaceStub = nil
	if fake.updateSpaceReturnsOnCall == nil {
		fake.updateSpaceReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.updateSpaceReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpaceQuota(arg1 string, arg2 cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error) {
	fake.updateSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.updateSpaceQuotaReturnsOnCall[len(fake.updateSpaceQuotaArgsForCall)]
	fake.updateSpaceQuotaArgsForCall = append(fake.updateSpaceQuotaArgsForCall, struct {
		arg1 string
		arg2 cfclient.SpaceQuotaRequest
	}{arg1, arg2})
	fake.recordInvocation("UpdateSpaceQuota", []interface{}{arg1, arg2})
	fake.updateSpaceQuotaMutex.Unlock()
	if fake.UpdateSpaceQuotaStub != nil {
		return fake.UpdateSpaceQuotaStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateSpaceQuotaReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateSpaceQuotaCallCount() int {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	return len(fake.updateSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) UpdateSpaceQuotaCalls(stub func(string, cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error)) {
	fake.updateSpaceQuotaMutex.Lock()
	defer fake.updateSpaceQuotaMutex.Unlock()
	fake.UpdateSpaceQuotaStub = stub
}

func (fake *FakeCFClient) UpdateSpaceQuotaArgsForCall(i int) (string, cfclient.SpaceQuotaRequest) {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	argsForCall := fake.updateSpaceQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateSpaceQuotaReturns(result1 *cfclient.SpaceQuota, result2 error) {
	fake.updateSpaceQuotaMutex.Lock()
	defer fake.updateSpaceQuotaMutex.Unlock()
	fake.UpdateSpaceQuotaStub = nil
	fake.updateSpaceQuotaReturns = struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpaceQuotaReturnsOnCall(i int, result1 *cfclient.SpaceQuota, result2 error) {
	fake.updateSpaceQuotaMutex.Lock()
	defer fake.updateSpaceQuotaMutex.Unlock()
	fake.UpdateSpaceQuotaStub = nil
	if fake.updateSpaceQuotaReturnsOnCall == nil {
		fake.updateSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SpaceQuota
			result2 error
		})
	}
	fake.updateSpaceQuotaReturnsOnCall[i] = struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateUserProvidedServiceInstance(arg1 string, arg2 cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error) {
	fake.updateUserProvidedServiceInstanceMutex.Lock()
	ret, specificReturn := fake.updateUserProvidedServiceInstanceReturnsOnCall[len(fake.updateUserProvidedServiceInstanceArgsForCall)]
	fake.updateUserProvidedServiceInstanceArgsForCall = append(fake.updateUserProvidedServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 cfclient.UserProvidedServiceInstanceRequest
	}{arg1, arg2})
	fake.recordInvocation("UpdateUserProvidedServiceInstance", []interface{}{arg1, arg2})
	fake.updateUserProvidedServiceInstanceMutex.Unlock()
	if fake.UpdateUserProvidedServiceInstanceStub != nil {
		return fake.UpdateUserProvidedServiceInstanceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateUserProvidedServiceInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateUserProvidedServiceInstanceCallCount() int {
	fake.updateUserProvidedServiceInstanceMutex.RLock()
	defer fake.updateUserProvidedServiceInstanceMutex.RUnlock()
	return len(fake.updateUserProvidedServiceInstanceArgsForCall)
}

func (fake *FakeCFClient) UpdateUserProvidedServiceInstanceCalls(stub func(string, cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error)) {
	fake.updateUserProvidedServiceInstanceMutex.Lock()
	defer fake.updateUserProvidedServiceInstanceMutex.Unlock()
	fake.UpdateUserProvidedServiceInstanceStub = stub
}

func (fake *FakeCFClient) UpdateUserProvidedServiceInstanceArgsForCall(i int) (string, cfclient.UserProvidedServiceInstanceRequest) {
	fake.updateUserProvidedServiceInstanceMutex.RLock()
	defer fake.updateUserProvidedServiceInstanceMutex.RUnlock()
	argsForCall := fake.updateUserProvidedServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateUserProvidedServiceInstanceReturns(result1 *cfclient.UserProvidedServiceInstance, result2 error) {
	fake.updateUserProvidedServiceInstanceMutex.Lock()
	defer fake.updateUserProvidedServiceInstanceMutex.Unlock()
	fake.UpdateUserProvidedServiceInstanceStub = nil
	fake.updateUserProvidedServiceInstanceReturns = struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateUserProvidedServiceInstanceReturnsOnCall(i int, result1 *cfclient.UserProvidedServiceInstance, result2 error) {
	fake.updateUserProvidedServiceInstanceMutex.Lock()
	defer fake.updateUserProvidedServiceInstanceMutex.Unlock()
	fake.UpdateUserProvidedServiceInstanceStub = nil
	if fake.updateUserProvidedServiceInstanceReturnsOnCall == nil {
		fake.updateUserProvidedServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 *cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.updateUserProvidedServiceInstanceReturnsOnCall[i] = struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UploadAppBits(arg1 io.Reader, arg2 string) error {
	fake.uploadAppBitsMutex.Lock()
	ret, specificReturn := fake.uploadAppBitsReturnsOnCall[len(fake.uploadAppBitsArgsForCall)]
	fake.uploadAppBitsArgsForCall = append(fake.uploadAppBitsArgsForCall, struct {
		arg1 io.Reader
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UploadAppBits", []interface{}{arg1, arg2})
	fake.uploadAppBitsMutex.Unlock()
	if fake.UploadAppBitsStub != nil {
		return fake.UploadAppBitsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.uploadAppBitsReturns
	return fakeReturns.result1
}

func (fake *FakeCFClient) UploadAppBitsCallCount() int {
	fake.uploadAppBitsMutex.RLock()
	defer fake.uploadAppBitsMutex.RUnlock()
	return len(fake.uploadAppBitsArgsForCall)
}

func (fake *FakeCFClient) UploadAppBitsCalls(stub func(io.Reader, string) error) {
	fake.uploadAppBitsMutex.Lock()
	defer fake.uploadAppBitsMutex.Unlock()
	fake.UploadAppBitsStub = stub
}

func (fake *FakeCFClient) UploadAppBitsArgsForCall(i int) (io.Reader, string) {
	fake.uploadAppBitsMutex.RLock()
	defer fake.uploadAppBitsMutex.RUnlock()
	argsForCall := fake.uploadAppBitsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UploadAppBitsReturns(result1 error) {
	fake.uploadAppBitsMutex.Lock()
	defer fake.uploadAppBitsMutex.Unlock()
	fake.UploadAppBitsStub = nil
	fake.uploadAppBitsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UploadAppBitsReturnsOnCall(i int, result1 error) {
	fake.uploadAppBitsMutex.Lock()
	defer fake.uploadAppBitsMutex.Unlock()
	fake.UploadAppBitsStub = nil
	if fake.uploadAppBitsReturnsOnCall == nil {
		fake.uploadAppBitsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.uploadAppBitsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UserProvidedServiceInstanceByGuid(arg1 string) (cfclient.UserProvidedServiceInstance, error) {
	fake.userProvidedServiceInstanceByGuidMutex.Lock()
	ret, specificReturn := fake.userProvidedServiceInstanceByGuidReturnsOnCall[len(fake.userProvidedServiceInstanceByGuidArgsForCall)]
	fake.userProvidedServiceInstanceByGuidArgsForCall = append(fake.userProvidedServiceInstanceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UserProvidedServiceInstanceByGuid", []interface{}{arg1})
	fake.userProvidedServiceInstanceByGuidMutex.Unlock()
	if fake.UserProvidedServiceInstanceByGuidStub != nil {
		return fake.UserProvidedServiceInstanceByGuidStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.userProvidedServiceInstanceByGuidReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UserProvidedServiceInstanceByGuidCallCount() int {
	fake.userProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.userProvidedServiceInstanceByGuidMutex.RUnlock()
	return len(fake.userProvidedServiceInstanceByGuidArgsForCall)
}

func (fake *FakeCFClient) UserProvidedServiceInstanceByGuidCalls(stub func(string) (cfclient.UserProvidedServiceInstance, error)) {
	fake.userProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.userProvidedServiceInstanceByGuidMutex.Unlock()
	fake.UserProvidedServiceInstanceByGuidStub = stub
}

func (fake *FakeCFClient) UserProvidedServiceInstanceByGuidArgsForCall(i int) string {
	fake.userProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.userProvidedServiceInstanceByGuidMutex.RUnlock()
	argsForCall := fake.userProvidedServiceInstanceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) UserProvidedServiceInstanceByGuidReturns(result1 cfclient.UserProvidedServiceInstance, result2 error) {
	fake.userProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.userProvidedServiceInstanceByGuidMutex.Unlock()
	fake.UserProvidedServiceInstanceByGuidStub = nil
	fake.userProvidedServiceInstanceByGuidReturns = struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UserProvidedServiceInstanceByGuidReturnsOnCall(i int, result1 cfclient.UserProvidedServiceInstance, result2 error) {
	fake.userProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.userProvidedServiceInstanceByGuidMutex.Unlock()
	fake.UserProvidedServiceInstanceByGuidStub = nil
	if fake.userProvidedServiceInstanceByGuidReturnsOnCall == nil {
		fake.userProvidedServiceInstanceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.userProvidedServiceInstanceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	fake.appByGuidMutex.RLock()
	defer fake.appByGuidMutex.RUnlock()
	fake.appByNameMutex.RLock()
	defer fake.appByNameMutex.RUnlock()
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	fake.associateOrgAuditorByUsernameMutex.RLock()
	defer fake.associateOrgAuditorByUsernameMutex.RUnlock()
	fake.associateOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgAuditorByUsernameAndOriginMutex.RUnlock()
	fake.associateOrgBillingManagerMutex.RLock()
	defer fake.associateOrgBillingManagerMutex.RUnlock()
	fake.associateOrgBillingManagerByUsernameMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameMutex.RUnlock()
	fake.associateOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	fake.associateOrgManagerMutex.RLock()
	defer fake.associateOrgManagerMutex.RUnlock()
	fake.associateOrgManagerByUsernameMutex.RLock()
	defer fake.associateOrgManagerByUsernameMutex.RUnlock()
	fake.associateOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgManagerByUsernameAndOriginMutex.RUnlock()
	fake.associateOrgUserMutex.RLock()
	defer fake.associateOrgUserMutex.RUnlock()
	fake.associateOrgUserByUsernameMutex.RLock()
	defer fake.associateOrgUserByUsernameMutex.RUnlock()
	fake.associateOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.associateOrgUserByUsernameAndOriginMutex.RUnlock()
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	fake.associateSpaceAuditorByUsernameMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameMutex.RUnlock()
	fake.associateSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	fake.associateSpaceDeveloperByUsernameMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameMutex.RUnlock()
	fake.associateSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	fake.associateSpaceManagerMutex.RLock()
	defer fake.associateSpaceManagerMutex.RUnlock()
	fake.associateSpaceManagerByUsernameMutex.RLock()
	defer fake.associateSpaceManagerByUsernameMutex.RUnlock()
	fake.associateSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.associateSpaceManagerByUsernameAndOriginMutex.RUnlock()
	fake.bindRouteMutex.RLock()
	defer fake.bindRouteMutex.RUnlock()
	fake.bindRunningSecGroupMutex.RLock()
	defer fake.bindRunningSecGroupMutex.RUnlock()
	fake.bindSecGroupMutex.RLock()
	defer fake.bindSecGroupMutex.RUnlock()
	fake.bindStagingSecGroupMutex.RLock()
	defer fake.bindStagingSecGroupMutex.RUnlock()
	fake.bindStagingSecGroupToSpaceMutex.RLock()
	defer fake.bindStagingSecGroupToSpaceMutex.RUnlock()
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	fake.createBuildpackMutex.RLock()
	defer fake.createBuildpackMutex.RUnlock()
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	fake.createRouteMutex.RLock()
	defer fake.createRouteMutex.RUnlock()
	fake.createRouteServiceBindingMutex.RLock()
	defer fake.createRouteServiceBindingMutex.RUnlock()
	fake.createSecGroupMutex.RLock()
	defer fake.createSecGroupMutex.RUnlock()
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	fake.createServiceBrokerMutex.RLock()
	defer fake.createServiceBrokerMutex.RUnlock()
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	fake.createServicePlanVisibilityByUniqueIdMutex.RLock()
	defer fake.createServicePlanVisibilityByUniqueIdMutex.RUnlock()
	fake.createSharedDomainMutex.RLock()
	defer fake.createSharedDomainMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	fake.createTaskMutex.RLock()
	defer fake.createTaskMutex.RUnlock()
	fake.createTcpRouteMutex.RLock()
	defer fake.createTcpRouteMutex.RUnlock()
	fake.createUserMutex.RLock()
	defer fake.createUserMutex.RUnlock()
	fake.createUserProvidedServiceInstanceMutex.RLock()
	defer fake.createUserProvidedServiceInstanceMutex.RUnlock()
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	fake.deleteBuildpackMutex.RLock()
	defer fake.deleteBuildpackMutex.RUnlock()
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	fake.deleteOrgQuotaMutex.RLock()
	defer fake.deleteOrgQuotaMutex.RUnlock()
	fake.deleteRouteMutex.RLock()
	defer fake.deleteRouteMutex.RUnlock()
	fake.deleteRouteMappingMutex.RLock()
	defer fake.deleteRouteMappingMutex.RUnlock()
	fake.deleteRouteServiceBindingMutex.RLock()
	defer fake.deleteRouteServiceBindingMutex.RUnlock()
	fake.deleteSecGroupMutex.RLock()
	defer fake.deleteSecGroupMutex.RUnlock()
	fake.deleteServiceBindingMutex.RLock()
	defer fake.deleteServiceBindingMutex.RUnlock()
	fake.deleteServiceBrokerMutex.RLock()
	defer fake.deleteServiceBrokerMutex.RUnlock()
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	fake.deleteServiceKeyMutex.RLock()
	defer fake.deleteServiceKeyMutex.RUnlock()
	fake.deleteServicePlanVisibilityMutex.RLock()
	defer fake.deleteServicePlanVisibilityMutex.RUnlock()
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	fake.deleteSpaceMutex.RLock()
	defer fake.deleteSpaceMutex.RUnlock()
	fake.deleteUserMutex.RLock()
	defer fake.deleteUserMutex.RUnlock()
	fake.deleteUserProvidedServiceInstanceMutex.RLock()
	defer fake.deleteUserProvidedServiceInstanceMutex.RUnlock()
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	fake.doRequestWithoutRedirectsMutex.RLock()
	defer fake.doRequestWithoutRedirectsMutex.RUnlock()
	fake.getAppBitsMutex.RLock()
	defer fake.getAppBitsMutex.RUnlock()
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	fake.getAppByGuidNoInlineCallMutex.RLock()
	defer fake.getAppByGuidNoInlineCallMutex.RUnlock()
	fake.getAppEnvMutex.RLock()
	defer fake.getAppEnvMutex.RUnlock()
	fake.getAppInstancesMutex.RLock()
	defer fake.getAppInstancesMutex.RUnlock()
	fake.getAppRoutesMutex.RLock()
	defer fake.getAppRoutesMutex.RUnlock()
	fake.getAppStatsMutex.RLock()
	defer fake.getAppStatsMutex.RUnlock()
	fake.getBuildpackByGuidMutex.RLock()
	defer fake.getBuildpackByGuidMutex.RUnlock()
	fake.getDomainByNameMutex.RLock()
	defer fake.getDomainByNameMutex.RUnlock()
	fake.getInfoMutex.RLock()
	defer fake.getInfoMutex.RUnlock()
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	fake.getRouteMappingByGuidMutex.RLock()
	defer fake.getRouteMappingByGuidMutex.RUnlock()
	fake.getRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.getRunningEnvironmentVariableGroupMutex.RUnlock()
	fake.getSecGroupMutex.RLock()
	defer fake.getSecGroupMutex.RUnlock()
	fake.getSecGroupByNameMutex.RLock()
	defer fake.getSecGroupByNameMutex.RUnlock()
	fake.getServiceBindingByGuidMutex.RLock()
	defer fake.getServiceBindingByGuidMutex.RUnlock()
	fake.getServiceBrokerByGuidMutex.RLock()
	defer fake.getServiceBrokerByGuidMutex.RUnlock()
	fake.getServiceBrokerByNameMutex.RLock()
	defer fake.getServiceBrokerByNameMutex.RUnlock()
	fake.getServiceByGuidMutex.RLock()
	defer fake.getServiceByGuidMutex.RUnlock()
	fake.getServiceInstanceByGuidMutex.RLock()
	defer fake.getServiceInstanceByGuidMutex.RUnlock()
	fake.getServiceKeyByInstanceGuidMutex.RLock()
	defer fake.getServiceKeyByInstanceGuidMutex.RUnlock()
	fake.getServiceKeyByNameMutex.RLock()
	defer fake.getServiceKeyByNameMutex.RUnlock()
	fake.getServiceKeysByInstanceGuidMutex.RLock()
	defer fake.getServiceKeysByInstanceGuidMutex.RUnlock()
	fake.getServicePlanByGUIDMutex.RLock()
	defer fake.getServicePlanByGUIDMutex.RUnlock()
	fake.getServicePlanVisibilityByGuidMutex.RLock()
	defer fake.getServicePlanVisibilityByGuidMutex.RUnlock()
	fake.getSharedDomainByGuidMutex.RLock()
	defer fake.getSharedDomainByGuidMutex.RUnlock()
	fake.getSharedDomainByNameMutex.RLock()
	defer fake.getSharedDomainByNameMutex.RUnlock()
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	fake.getStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.getStagingEnvironmentVariableGroupMutex.RUnlock()
	fake.getTaskByGuidMutex.RLock()
	defer fake.getTaskByGuidMutex.RUnlock()
	fake.getTokenMutex.RLock()
	defer fake.getTokenMutex.RUnlock()
	fake.getUserByGUIDMutex.RLock()
	defer fake.getUserByGUIDMutex.RUnlock()
	fake.getUserProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.RUnlock()
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	fake.killAppInstanceMutex.RLock()
	defer fake.killAppInstanceMutex.RUnlock()
	fake.listAllProcessesMutex.RLock()
	defer fake.listAllProcessesMutex.RUnlock()
	fake.listAllProcessesByQueryMutex.RLock()
	defer fake.listAllProcessesByQueryMutex.RUnlock()
	fake.listAppEventsMutex.RLock()
	defer fake.listAppEventsMutex.RUnlock()
	fake.listAppEventsByQueryMutex.RLock()
	defer fake.listAppEventsByQueryMutex.RUnlock()
	fake.listAppUsageEventsMutex.RLock()
	defer fake.listAppUsageEventsMutex.RUnlock()
	fake.listAppUsageEventsByQueryMutex.RLock()
	defer fake.listAppUsageEventsByQueryMutex.RUnlock()
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	fake.listAppsByQueryMutex.RLock()
	defer fake.listAppsByQueryMutex.RUnlock()
	fake.listAppsByQueryWithLimitsMutex.RLock()
	defer fake.listAppsByQueryWithLimitsMutex.RUnlock()
	fake.listAppsByRouteMutex.RLock()
	defer fake.listAppsByRouteMutex.RUnlock()
	fake.listBuildpacksMutex.RLock()
	defer fake.listBuildpacksMutex.RUnlock()
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	fake.listDomainsByQueryMutex.RLock()
	defer fake.listDomainsByQueryMutex.RUnlock()
	fake.listEventsMutex.RLock()
	defer fake.listEventsMutex.RUnlock()
	fake.listEventsByQueryMutex.RLock()
	defer fake.listEventsByQueryMutex.RUnlock()
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	fake.listOrgAuditorsMutex.RLock()
	defer fake.listOrgAuditorsMutex.RUnlock()
	fake.listOrgAuditorsByQueryMutex.RLock()
	defer fake.listOrgAuditorsByQueryMutex.RUnlock()
	fake.listOrgBillingManagersMutex.RLock()
	defer fake.listOrgBillingManagersMutex.RUnlock()
	fake.listOrgBillingManagersByQueryMutex.RLock()
	defer fake.listOrgBillingManagersByQueryMutex.RUnlock()
	fake.listOrgManagersMutex.RLock()
	defer fake.listOrgManagersMutex.RUnlock()
	fake.listOrgManagersByQueryMutex.RLock()
	defer fake.listOrgManagersByQueryMutex.RUnlock()
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	fake.listOrgQuotasMutex.RLock()
	defer fake.listOrgQuotasMutex.RUnlock()
	fake.listOrgQuotasByQueryMutex.RLock()
	defer fake.listOrgQuotasByQueryMutex.RUnlock()
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	fake.listOrgUsersMutex.RLock()
	defer fake.listOrgUsersMutex.RUnlock()
	fake.listOrgUsersByQueryMutex.RLock()
	defer fake.listOrgUsersByQueryMutex.RUnlock()
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	fake.listOrgsByQueryMutex.RLock()
	defer fake.listOrgsByQueryMutex.RUnlock()
	fake.listRouteMappingsMutex.RLock()
	defer fake.listRouteMappingsMutex.RUnlock()
	fake.listRouteMappingsByQueryMutex.RLock()
	defer fake.listRouteMappingsByQueryMutex.RUnlock()
	fake.listRoutesMutex.RLock()
	defer fake.listRoutesMutex.RUnlock()
	fake.listRoutesByQueryMutex.RLock()
	defer fake.listRoutesByQueryMutex.RUnlock()
	fake.listRunningSecGroupsMutex.RLock()
	defer fake.listRunningSecGroupsMutex.RUnlock()
	fake.listSecGroupsMutex.RLock()
	defer fake.listSecGroupsMutex.RUnlock()
	fake.listServiceBindingsMutex.RLock()
	defer fake.listServiceBindingsMutex.RUnlock()
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	fake.listServiceBrokersByQueryMutex.RLock()
	defer fake.listServiceBrokersByQueryMutex.RUnlock()
	fake.listServiceInstancesMutex.RLock()
	defer fake.listServiceInstancesMutex.RUnlock()
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	fake.listServiceKeysMutex.RLock()
	defer fake.listServiceKeysMutex.RUnlock()
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	fake.listServicePlanVisibilitiesMutex.RLock()
	defer fake.listServicePlanVisibilitiesMutex.RUnlock()
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	fake.listServicePlansMutex.RLock()
	defer fake.listServicePlansMutex.RUnlock()
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	fake.listServiceUsageEventsMutex.RLock()
	defer fake.listServiceUsageEventsMutex.RUnlock()
	fake.listServiceUsageEventsByQueryMutex.RLock()
	defer fake.listServiceUsageEventsByQueryMutex.RUnlock()
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	fake.listSharedDomainsMutex.RLock()
	defer fake.listSharedDomainsMutex.RUnlock()
	fake.listSharedDomainsByQueryMutex.RLock()
	defer fake.listSharedDomainsByQueryMutex.RUnlock()
	fake.listSpaceAuditorsMutex.RLock()
	defer fake.listSpaceAuditorsMutex.RUnlock()
	fake.listSpaceAuditorsByQueryMutex.RLock()
	defer fake.listSpaceAuditorsByQueryMutex.RUnlock()
	fake.listSpaceDevelopersMutex.RLock()
	defer fake.listSpaceDevelopersMutex.RUnlock()
	fake.listSpaceDevelopersByQueryMutex.RLock()
	defer fake.listSpaceDevelopersByQueryMutex.RUnlock()
	fake.listSpaceManagersMutex.RLock()
	defer fake.listSpaceManagersMutex.RUnlock()
	fake.listSpaceManagersByQueryMutex.RLock()
	defer fake.listSpaceManagersByQueryMutex.RUnlock()
	fake.listSpaceQuotasMutex.RLock()
	defer fake.listSpaceQuotasMutex.RUnlock()
	fake.listSpaceQuotasByQueryMutex.RLock()
	defer fake.listSpaceQuotasByQueryMutex.RUnlock()
	fake.listSpaceSecGroupsMutex.RLock()
	defer fake.listSpaceSecGroupsMutex.RUnlock()
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	fake.listStacksMutex.RLock()
	defer fake.listStacksMutex.RUnlock()
	fake.listStacksByQueryMutex.RLock()
	defer fake.listStacksByQueryMutex.RUnlock()
	fake.listStagingSecGroupsMutex.RLock()
	defer fake.listStagingSecGroupsMutex.RUnlock()
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	fake.listTasksByQueryMutex.RLock()
	defer fake.listTasksByQueryMutex.RUnlock()
	fake.listUserAuditedOrgsMutex.RLock()
	defer fake.listUserAuditedOrgsMutex.RUnlock()
	fake.listUserAuditedSpacesMutex.RLock()
	defer fake.listUserAuditedSpacesMutex.RUnlock()
	fake.listUserBillingManagedOrgsMutex.RLock()
	defer fake.listUserBillingManagedOrgsMutex.RUnlock()
	fake.listUserManagedOrgsMutex.RLock()
	defer fake.listUserManagedOrgsMutex.RUnlock()
	fake.listUserManagedSpacesMutex.RLock()
	defer fake.listUserManagedSpacesMutex.RUnlock()
	fake.listUserOrgsMutex.RLock()
	defer fake.listUserOrgsMutex.RUnlock()
	fake.listUserProvidedServiceInstancesMutex.RLock()
	defer fake.listUserProvidedServiceInstancesMutex.RUnlock()
	fake.listUserProvidedServiceInstancesByQueryMutex.RLock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.RUnlock()
	fake.listUserSpacesMutex.RLock()
	defer fake.listUserSpacesMutex.RUnlock()
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	fake.listUsersByQueryMutex.RLock()
	defer fake.listUsersByQueryMutex.RUnlock()
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	fake.makeServicePlanPublicMutex.RLock()
	defer fake.makeServicePlanPublicMutex.RUnlock()
	fake.mappingAppAndRouteMutex.RLock()
	defer fake.mappingAppAndRouteMutex.RUnlock()
	fake.newRequestMutex.RLock()
	defer fake.newRequestMutex.RUnlock()
	fake.newRequestWithBodyMutex.RLock()
	defer fake.newRequestWithBodyMutex.RUnlock()
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	fake.removeOrgAuditorMutex.RLock()
	defer fake.removeOrgAuditorMutex.RUnlock()
	fake.removeOrgAuditorByUsernameMutex.RLock()
	defer fake.removeOrgAuditorByUsernameMutex.RUnlock()
	fake.removeOrgAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgAuditorByUsernameAndOriginMutex.RUnlock()
	fake.removeOrgBillingManagerMutex.RLock()
	defer fake.removeOrgBillingManagerMutex.RUnlock()
	fake.removeOrgBillingManagerByUsernameMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameMutex.RUnlock()
	fake.removeOrgBillingManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgBillingManagerByUsernameAndOriginMutex.RUnlock()
	fake.removeOrgManagerMutex.RLock()
	defer fake.removeOrgManagerMutex.RUnlock()
	fake.removeOrgManagerByUsernameMutex.RLock()
	defer fake.removeOrgManagerByUsernameMutex.RUnlock()
	fake.removeOrgManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgManagerByUsernameAndOriginMutex.RUnlock()
	fake.removeOrgUserMutex.RLock()
	defer fake.removeOrgUserMutex.RUnlock()
	fake.removeOrgUserByUsernameMutex.RLock()
	defer fake.removeOrgUserByUsernameMutex.RUnlock()
	fake.removeOrgUserByUsernameAndOriginMutex.RLock()
	defer fake.removeOrgUserByUsernameAndOriginMutex.RUnlock()
	fake.removeSpaceAuditorMutex.RLock()
	defer fake.removeSpaceAuditorMutex.RUnlock()
	fake.removeSpaceAuditorByUsernameMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameMutex.RUnlock()
	fake.removeSpaceAuditorByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceAuditorByUsernameAndOriginMutex.RUnlock()
	fake.removeSpaceDeveloperMutex.RLock()
	defer fake.removeSpaceDeveloperMutex.RUnlock()
	fake.removeSpaceDeveloperByUsernameMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameMutex.RUnlock()
	fake.removeSpaceDeveloperByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceDeveloperByUsernameAndOriginMutex.RUnlock()
	fake.removeSpaceManagerMutex.RLock()
	defer fake.removeSpaceManagerMutex.RUnlock()
	fake.removeSpaceManagerByUsernameMutex.RLock()
	defer fake.removeSpaceManagerByUsernameMutex.RUnlock()
	fake.removeSpaceManagerByUsernameAndOriginMutex.RLock()
	defer fake.removeSpaceManagerByUsernameAndOriginMutex.RUnlock()
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	fake.serviceBindingByGuidMutex.RLock()
	defer fake.serviceBindingByGuidMutex.RUnlock()
	fake.serviceInstanceByGuidMutex.RLock()
	defer fake.serviceInstanceByGuidMutex.RUnlock()
	fake.setRunningEnvironmentVariableGroupMutex.RLock()
	defer fake.setRunningEnvironmentVariableGroupMutex.RUnlock()
	fake.setStagingEnvironmentVariableGroupMutex.RLock()
	defer fake.setStagingEnvironmentVariableGroupMutex.RUnlock()
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	fake.startAppMutex.RLock()
	defer fake.startAppMutex.RUnlock()
	fake.stopAppMutex.RLock()
	defer fake.stopAppMutex.RUnlock()
	fake.taskByGuidMutex.RLock()
	defer fake.taskByGuidMutex.RUnlock()
	fake.tasksByAppMutex.RLock()
	defer fake.tasksByAppMutex.RUnlock()
	fake.tasksByAppByQueryMutex.RLock()
	defer fake.tasksByAppByQueryMutex.RUnlock()
	fake.terminateTaskMutex.RLock()
	defer fake.terminateTaskMutex.RUnlock()
	fake.totalEventsMutex.RLock()
	defer fake.totalEventsMutex.RUnlock()
	fake.totalEventsByQueryMutex.RLock()
	defer fake.totalEventsByQueryMutex.RUnlock()
	fake.unbindRunningSecGroupMutex.RLock()
	defer fake.unbindRunningSecGroupMutex.RUnlock()
	fake.unbindSecGroupMutex.RLock()
	defer fake.unbindSecGroupMutex.RUnlock()
	fake.unbindStagingSecGroupMutex.RLock()
	defer fake.unbindStagingSecGroupMutex.RUnlock()
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	fake.updateAppMutex.RLock()
	defer fake.updateAppMutex.RUnlock()
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	fake.updateSecGroupMutex.RLock()
	defer fake.updateSecGroupMutex.RUnlock()
	fake.updateServiceBrokerMutex.RLock()
	defer fake.updateServiceBrokerMutex.RUnlock()
	fake.updateServiceInstanceMutex.RLock()
	defer fake.updateServiceInstanceMutex.RUnlock()
	fake.updateServicePlanVisibilityMutex.RLock()
	defer fake.updateServicePlanVisibilityMutex.RUnlock()
	fake.updateSpaceMutex.RLock()
	defer fake.updateSpaceMutex.RUnlock()
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	fake.updateUserProvidedServiceInstanceMutex.RLock()
	defer fake.updateUserProvidedServiceInstanceMutex.RUnlock()
	fake.uploadAppBitsMutex.RLock()
	defer fake.uploadAppBitsMutex.RUnlock()
	fake.userProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.userProvidedServiceInstanceByGuidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ query.CFClient = new(FakeCFClient)
